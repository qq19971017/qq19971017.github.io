<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>学无止境</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://qq19971017.github.io/"/>
  <updated>2020-02-28T07:32:16.856Z</updated>
  <id>https://qq19971017.github.io/</id>
  
  <author>
    <name>Jiajun Ma</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JVM学习笔记(1)——JVM整体概念</title>
    <link href="https://qq19971017.github.io/2020/02/28/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)%E2%80%94%E2%80%94JVM%E6%95%B4%E4%BD%93%E6%A6%82%E5%BF%B5/"/>
    <id>https://qq19971017.github.io/2020/02/28/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)%E2%80%94%E2%80%94JVM%E6%95%B4%E4%BD%93%E6%A6%82%E5%BF%B5/</id>
    <published>2020-02-27T16:04:00.000Z</published>
    <updated>2020-02-28T07:32:16.856Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-什么是JVM"><a href="#一-什么是JVM" class="headerlink" title="一. 什么是JVM"></a>一. 什么是JVM</h3><p>JVM是Java Virtual Machine（Java虚拟机）的缩写，JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。 引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译。  </p><p>它是一种能够运行Java bytecode的虚拟机，以堆栈结构机器来进行实做。最早由太阳微系统所研发并实现第一个实现版本，是Java平台的一部分，能够运行以Java语言写作的软件程序。  </p><p>Java虚拟机有自己完善的硬体架构，如处理器、堆栈、寄存器等，还具有相应的指令系统。JVM屏蔽了与具体操作系统平台相关的信息，使得Java程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。通过对中央处理器（CPU）所执行的软件实现，实现能执行编译过的Java程序码（Applet与应用程序）。</p><p>作为一种编程语言的虚拟机，实际上不只是专用于Java语言，只要生成的编译文件符合JVM对加载编译文件格式要求，任何语言都可以由JVM编译运行。此外，除了甲骨文，也有其他开源或闭源的实现。 </p><p><img src="/images/pasted-0.png" alt="upload successful"></p><p>总之高级语言只要是能够通过编译器生成符合JVM规范的字节码，就可以在JVM上运行。JVM的这种可扩展性也解释了java的 <strong>“一次编译，到处运行的”</strong> 的原因。</p><hr><h3 id="二-JVM的相关结构"><a href="#二-JVM的相关结构" class="headerlink" title="二. JVM的相关结构"></a>二. JVM的相关结构</h3><h4 id="1-JDK、JRE、JVM的关系结构"><a href="#1-JDK、JRE、JVM的关系结构" class="headerlink" title="1. JDK、JRE、JVM的关系结构"></a>1. JDK、JRE、JVM的关系结构</h4><p><img src="/images/pasted-1.png" alt="upload successful"></p><p>如上图所示：JDK包含了JAVA程序设计语言、JVM、JAVA API类库这三个部分，用于支持JAVA程序开发的最小环境，是JAVA程序开发的<strong>必需品</strong>；JRE则只包含了JVM以及JAVA API类库中的JAVA SE API子集，JRE不能够用于JAVA程序开发，只是为JAVA程序运行提供一个标准环境。</p><h4 id="2-JVM工作原理"><a href="#2-JVM工作原理" class="headerlink" title="2. JVM工作原理"></a>2. JVM工作原理</h4><p><img src="/images/pasted-2.png" alt="upload successful"></p><p>如图所示，java源代码通过编译器转化为字节码，JVM将字节码读取、校验，并逐条解释成操作系统可读取的机器码。对于一些热点代码(即多次重复出现的代码)，JVM将会通过JIT代码生成器对这些代码进行二次编译直接生成机器码，避免以后重复解释，且提升JVM工作效率。</p><p>这里解释一下为什么不先将字节码全部编译成机器码，再执行机器码，按道理来说这样运行效率会更高呀？原因是前期的编译操作是需要一定时间的，特别对于大型的JAVA文件，若前期编译操作浪费大量时间就会影响用户使用体验；而逐条解释虽然效率相对不高，但是能够从快速加载文件，通过牺牲效率换取用户使用体验，从这点来说还是必要的。</p><h4 id="3-JVM内存结构"><a href="#3-JVM内存结构" class="headerlink" title="3. JVM内存结构"></a>3. JVM内存结构</h4><p><img src="/images/pasted-3.png" alt="upload successful"></p><ul><li><p><strong>程序技术器</strong><br>程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Native方法，这个计数器值则为空（Undefined）。此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</p></li><li><p><strong>JAVA虚拟栈</strong><br>与程序计数器一样，Java虚拟机栈（Java Virtual Machine Stacks）也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。 </p></li><li><p><strong>本地方法栈</strong><br>本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native方法服务。虚拟机规范中对本地方法栈中的方法使用的语言、使用方式与数据结构并没有强制规定，因此具体的虚拟机可以自由实现它。甚至有的虚拟机（譬如Sun HotSpot虚拟机）直接就把本地方法栈和虚拟机栈合二为一。与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError和OutOfMemoryError异常。</p></li><li><p><strong>JAVA堆</strong><br>对于大多数应用来说，Java堆（Java Heap）是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。Java堆是垃圾收集器管理的主要区域，因此很多时候也被称做“GC堆”。如果从内存回收的角度看，由于现在收集器基本都是采用的分代收集算法，所以Java堆中还可以细分为：新生代和老年代；再细致一点的有Eden空间、From Survivor空间、To Survivor空间等。根据Java虚拟机规范的规定，Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。在实现时，既可以实现成固定大小的，也可以是可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的（通过-Xmx和-Xms控制）。</p></li><li><p><strong>方法区</strong><br>方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是与Java堆区分开来。<br>对于习惯在HotSpot虚拟机上开发和部署程序的开发者来说，很多人愿意把方法区称为“永久代”（Permanent Generation），本质上两者并不等价，仅仅是因为HotSpot虚拟机的设计团队选择把GC分代收集扩展至方法区，或者说使用永久代来实现方法区而已。</p></li></ul><h3 id="三-JVM的生命周期"><a href="#三-JVM的生命周期" class="headerlink" title="三. JVM的生命周期"></a>三. JVM的生命周期</h3><h4 id="1-JVM的启动"><a href="#1-JVM的启动" class="headerlink" title="1. JVM的启动"></a>1. JVM的启动</h4><p>java虚拟机的启动是通过引导类加载器创建一个初始类来完成的，这个类是由虚拟机的具体实现指定的。初始类加载完成后，再通过main方法将其他的类加载进来。当java程序启动时，JVM进程就被创建和运行。</p><h4 id="2-JVM的执行"><a href="#2-JVM的执行" class="headerlink" title="2. JVM的执行"></a>2. JVM的执行</h4><ul><li>一个运行中的JVM有着一个清晰的任务： 执行JAVA程序。</li><li>程序开始执行时他才运行，程序结束时他就停止了。</li><li><strong>执行一个所谓的JAVA程序的时候，真真正正在执行的是一个叫JAVA虚拟机的进程。</strong><br>举个例子，我们先执行一段如下代码。 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lifetime_JVM</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> b=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> c = a+b;</span><br><span class="line">        Thread.sleep(<span class="number">6000</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"good"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在程序执行未结束时，我们在当前文件夹下使用terminal输入jps，这是一个可以查看java程序运行进程的工具，我们可以看到下图<br><img src="/images/pasted-4.png" alt="upload successful"><br>这里会出现一个Lifetime_JVM的进程，说明jvm已经启动，等程序执行完毕，我们在输入jps时，这个Lifetime_JVM的进程就会消失，如图所示<br><img src="/images/pasted-5.png" alt="upload successful"></p><h4 id="3-JVM的退出"><a href="#3-JVM的退出" class="headerlink" title="3. JVM的退出"></a>3. JVM的退出</h4><ul><li>程序正常执行结束</li><li>程序在执行过程中遇到了异常或错误而异常终止。</li><li>由于操作系统出现错误而导致JAVA虚拟机进程终止。</li><li>某线程调用runtime类或者system类的exit访达，或者Runtime类的halt访达，并且JAVA安全管理器也允许这次exit或halt操作。</li></ul><h3 id="四-参考文章"><a href="#四-参考文章" class="headerlink" title="四. 参考文章"></a>四. 参考文章</h3><p>视频：</p><p><a href="https://www.bilibili.com/video/av83622425" target="_blank" rel="noopener">尚硅谷宋红康JVM教程(java虚拟机详解，jvm从入门到精通)</a></p><p>文章：</p><p><a href="https://juejin.im/post/5d1efae26fb9a07ea6489355" target="_blank" rel="noopener">JVM是什么？深入解析JVM原理!</a></p><p><a href="https://blog.csdn.net/sinat_35512245/article/details/54744815" target="_blank" rel="noopener">Java中JVM虚拟机详解</a></p><p><a href="https://www.cnblogs.com/ityouknow/p/5610232.html" target="_blank" rel="noopener">jvm系列(二):JVM内存结构</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-什么是JVM&quot;&gt;&lt;a href=&quot;#一-什么是JVM&quot; class=&quot;headerlink&quot; title=&quot;一. 什么是JVM&quot;&gt;&lt;/a&gt;一. 什么是JVM&lt;/h3&gt;&lt;p&gt;JVM是Java Virtual Machine（Java虚拟机）的缩写，JVM是一种用
      
    
    </summary>
    
    
      <category term="JVM 学习" scheme="https://qq19971017.github.io/categories/JVM-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JVM" scheme="https://qq19971017.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://qq19971017.github.io/2020/02/27/hello-world/"/>
    <id>https://qq19971017.github.io/2020/02/27/hello-world/</id>
    <published>2020-02-27T09:21:34.000Z</published>
    <updated>2020-02-24T06:53:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>My First Post</title>
    <link href="https://qq19971017.github.io/2020/02/24/My-First-Post/"/>
    <id>https://qq19971017.github.io/2020/02/24/My-First-Post/</id>
    <published>2020-02-24T07:09:21.000Z</published>
    <updated>2020-02-24T07:09:22.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
</feed>
