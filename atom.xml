<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>学无止境</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://qq19971017.github.io/"/>
  <updated>2020-08-16T05:27:50.199Z</updated>
  <id>https://qq19971017.github.io/</id>
  
  <author>
    <name>Jiajun Ma</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算机网络(7)——https</title>
    <link href="https://qq19971017.github.io/2020/08/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-7-%E2%80%94%E2%80%94https/"/>
    <id>https://qq19971017.github.io/2020/08/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-7-%E2%80%94%E2%80%94https/</id>
    <published>2020-08-15T15:23:00.000Z</published>
    <updated>2020-08-16T05:27:50.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><p>我们通常使用http协议用于网页的浏览，但是http有一个最大的缺点就是明文传输，这样在被攻击者截取了web浏览器和网站服务器之间传输的报文，就可以直接看懂信息，并利用信息进行犯罪。为了提高安全性，我们提出了https协议，https协议主要解决了两个问题。</p></blockquote><ol><li>解决了明文传输的不可靠性。</li><li>进行身份验证，保证数据是从正确的服务器发送过来。确认网站的真实性。</li></ol><h4 id="http与https区别"><a href="#http与https区别" class="headerlink" title="http与https区别"></a>http与https区别</h4><ol><li>http协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。</li><li>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl/tls加密传输协议。</li><li>http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</li><li>http的连接很简单，是无状态的；HTTPS协议是由SSL/TLS+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</li></ol><h3 id="https的通信步骤"><a href="#https的通信步骤" class="headerlink" title="https的通信步骤"></a>https的通信步骤</h3><p>在此之前先介绍一些基本的概念：<br><strong>对称加密</strong>：对称加密是指客户端和服务端在传输数据的时候，公用一把锁，这把锁既可以对明文加密，又可以对加密的内容进行解码。<br><strong>非对称加密</strong>：非对称加密是指在进行传输的过程中共有一对公/密匙来起作用，公钥匙是对外公开的由客户端拥有（实际上每个人都可以拥有），而密匙是只有服务端知道，由公匙加密的报文只能用密匙解密。<br>相比较而言非对称加密安全性更高，因为在使用对称加密的时候需要首先传递共享密匙，这一步有可能会被拦截并被盗取的。而非堆成加密是不存在这样的情况的，公匙是对外公开的，而密匙是服务器私有的，只要服务器没有泄漏密匙，就基本不会出现安全问题。但是同样的非对称加密的算法是指数级别的，而对称加密算法速度更快。<br>https协议结合了两种算法的优缺点，使用了一种混合的加密算法。具体的算法我们后面介绍。</p><p><strong>数字签名</strong><br>数字签名的目的是为了保证客户端收到的报文是从正确的服务端收到的。通常是求取要发送报文的数字散列H(m),然后用密匙对这个数字散列加密K(H(m))，并加到明文报文后面，构成m+K(H(m)),服务端将新的报文发送到客户端，客户端将前面的明文进行哈希散列构成H(m’)，并对后面的K(H(m))进行解密，得到H(m)，比较这两个哈希散列是否一直，如果一致就说明数字签名是正确的，数据也是完整的。</p><p><strong>数字证书</strong><br>数字签名虽然已经能够提高准确率，但是黑客仍然可以进行攻击，他们可以拦截服务端发送的报文，并用黑客自己生成的钥匙对加密这个明文报文，并连同公匙一起发送给客户端，客户端拿到公匙和签名发现验证通过就会误以为这是客户端发送的数据。而会用这个黑客的公匙对报文进行加密，并发送给服务端，而服务端并不能将这个数据进行解密，进而无法解决问题。</p><p>从这个问题看出来，要想使公匙有用，需要能够正式你具有的公匙实际上就是与你要进行通行的实体。这个时候就可以用ca认证来解决这个问题。我们可以让ca去认证这个服务端的合法信息。一旦ca验证了某个实体的身份，这个CA会生成一个将其身份和实体的公匙绑定起来的证书。这个证书包含这个公匙和公匙所有者全局唯一的身份表示信息。由ca对这个数字证书进行签名。</p><p>这样服务端发送的其实是ca签署的证书(由ca私匙加密)，然后客户端收到证书后从ca获取公匙，并进行身份验证，最后在利用公匙对明文报文验证其合法性。</p><p>(1) 客户使用https的url访问服务器，要求与web服务器建立ssl连接。<br>(2) Web服务器收到客户端请求后，会将网站的证书信息（证书中包含公钥）传送一份给客户端。<br>(3) 客户端的浏览器与Web服务器开始协商SSL/TLS连接的安全等级，也就是信息加密的等级。<br>(4) 客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站。<br>(5) Web服务器利用自己的私钥解密出会话密钥。<br>(6) Web服务器利用会话密钥加密与客户端之间的通信。</p><p><img src="/images/pasted-75.png" alt="upload successful"><br><img src="/images/pasted-76.png" alt="upload successful"></p><h4 id="CA证书的申请及其使用过程"><a href="#CA证书的申请及其使用过程" class="headerlink" title="CA证书的申请及其使用过程"></a>CA证书的申请及其使用过程</h4><p>上面客户端使用HTTPS与服务器通信中使用到了CA认证，这里可能大家会问为什么不直接使用非对称加密的形式直接进行，首先这里先介绍下非对称加密。</p><p>非对称加密：客户端和服务端均拥有一个公有密匙和一个私有密匙。公有密匙可以对外暴露，而私有密匙只有自己可见。</p><p>使用公有密匙加密的消息，只有对应的私有密匙才能解开。反过来，使用私有密匙加密的消息，只有公有密匙才能解开。这样客户端在发送消息前，先用服务器的公匙对消息进行加密，服务器收到后再用自己的私匙进行解密。</p><p><img src="/images/pasted-77.png" alt="upload successful"></p><p>非对称加密的优点：</p><ul><li><p>非对称加密采用公有密匙和私有密匙的方式，解决了http中消息保密性问题，而且使得私有密匙泄露的风险降低。</p></li><li><p>因为公匙加密的消息只有对应的私匙才能解开，所以较大程度上保证了消息的来源性以及消息的准确性和完整性。</p></li></ul><p>非对称加密的缺点：</p><ul><li><p>非对称加密时需要使用到接收方的公匙对消息进行加密，但是公匙不是保密的，任何人都可以拿到，中间人也可以。那么中间人可以做两件事，第一件是中间人可以在客户端与服务器交换公匙的时候，将客户端的公匙替换成自己的。这样服务器拿到的公匙将不是客户端的，而是中间人的。服务器也无法判断公匙来源的正确性。第二件是中间人可以不替换公匙，但是他可以截获客户端发来的消息，然后篡改，然后用服务器的公匙加密再发往服务器，服务器将收到错误的消息。</p></li><li><p>非对称加密的性能相对对称加密来说会慢上几倍甚至几百倍，比较消耗系统资源。正是因为如此，https将两种加密结合了起来。</p></li></ul><p>为了应对上面非对称加密带来的问题，我们就引入了数字证书与数字签名</p><p>故CA认证介入我们的HTTPS连接的过程如下：</p><p>1、服务器拥有自己的私钥与公钥</p><p>2、服务器将公钥交给CA认证机构，请求给予一份数字证书</p><p>3、CA认证机构生成数字证书，并颁发给服务器</p><p>4、服务器将带有公钥信息的数字证书发给客户端</p><p>5、进入客户端生成对称密钥再进行对接的过程……</p><p><img src="/images/pasted-78.png" alt="upload successful"></p><p>虽然说HTTPS有很大的优势，但其相对来说，还是存在不足之处的：</p><p>（1）HTTPS协议握手阶段比较费时，会使页面的加载时间延长近50%，增加10%到20%的耗电；</p><p>（2）HTTPS连接缓存不如HTTP高效，会增加数据开销和功耗，甚至已有的安全措施也会因此而受到影响；</p><p>（3）SSL证书需要钱，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用。</p><p>（4）SSL证书通常需要绑定IP，不能在同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗。</p><p>（5）HTTPS协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。最关键的，SSL证书的信用链体系并不安全，特别是在某些国家可以控制CA根证书的情况下，中间人攻击一样可行。</p><p>实践中建议保留http。所以我们在切换的时候可以做http和https的兼容，具体实现方式是，去掉页面链接中的http头部，这样可以自动匹配http头和https头。例如：将<a href="http://www.baidu.com改为//www.baidu.com。然后当用户从http的入口进入访问页面时，页面就是http，如果用户是从https的入口进入访问页面，页面即是https的" target="_blank" rel="noopener">http://www.baidu.com改为//www.baidu.com。然后当用户从http的入口进入访问页面时，页面就是http，如果用户是从https的入口进入访问页面，页面即是https的</a></p><p>如何优化HTTPS的速度<br>1、HSTS重定向技术</p><p>HSTS（HTTP Strict Transport Security）技术，启用HSTS后，将保证浏览器始终连接到网站的 HTTPS 加密版本。</p><pre><code>1. 用户在浏览器里输入 HTTP 协议进行访问时，浏览器会自动将 HTTP 转换为 HTTPS 进行访问，确保用户访问安全；2. 省去301跳转的出现，缩短访问时间；3. 能阻止基于 SSL Strip 的中间人攻击，万一证书有错误，则显示错误，用户不能回避警告，从而能够更加有效安全的保障用户的访问。</code></pre><p>2、TLS握手优化</p><pre><code>在传输应用数据之前，客户端必须与服务端协商密钥、加密算法等信息，服务端还要把自己的证书发给客户端表明其身份，这些环节构成 TLS 握手过程。采用 False Start （抢先开始）技术，浏览器在与服务器完成 TLS 握手前，就开始发送请求数据，服务器在收到这些数据后，完成 TLS 握手的同时，开始发送响应数据。开启 False Start 功能后，数据传输时间将进一步缩短。</code></pre><p>3、Session Identifier（会话标识符）复用</p><pre><code>如果用户的一个业务请求包含了多条的加密流，客户端与服务器将会反复握手，必定会导致更多的时间损耗。或者某些特殊情况导致了对话突然中断，双方就需要重新握手，增加了用户访问时间。（1）服务器为每一次的会话都生成并记录一个 ID 号，然后发送给客户端；（2）如果客户端发起重新连接，则只要向服务器发送该 ID 号；（3）服务器收到客户端发来的 ID 号，然后查找自己的会话记录，匹配 ID 之后，双方就可以重新使用之前的对称加密秘钥进行数据加密传输，而不必重新生成，减少交互时间。</code></pre><p>4、开启OSCP Stapling，提高TLS握手效率</p><pre><code>采用OCSP Stapling ，提升 HTTPS 性能。服务端主动获取 OCSP 查询结果并随着证书一起发送给客户端，从而客户端可直接通过 Web Server 验证证书，提高 TLS 握手效率。服务器模拟浏览器向 CA 发起请求，并将带有 CA 机构签名的 OCSP 响应保存到本地，然后在与客户端握手阶段，将 OCSP 响应下发给浏览器，省去浏览器的在线验证过程。由于浏览器不需要直接向 CA 站点查询证书状态，这个功能对访问速度的提升非常明显。</code></pre><p>5、完全前向加密PFS，保护用户数据，预防私钥泄漏</p><pre><code>    非对称加密算法 RSA，包含了公钥、私钥，其中私钥是保密不对外公开的，由于此算法既可以用于加密也可以用于签名，所以用途甚广，但是还是会遇到一些问题： （1） 假如我是一名黑客，虽然现在我不知道私钥，但是我可以先把客户端与服务器之前的传输数据（已加密）全部保存下来（2）如果某一天，服务器维护人员不小心把私钥泄露了，或者服务器被我攻破获取到了私钥（3）那我就可以利用这个私钥，破解掉之前已被我保存的数据，从中获取有用的信息    所以为了防止上述现象发生，我们必须保护好自己的私钥。    如果私钥确实被泄漏了，那我们改如何补救呢？那就需要PFS（perfect forward secrecy）完全前向保密功能，此功能用于客户端与服务器交换对称密钥，起到前向保密的作用，也即就算私钥被泄漏，黑客也无法破解先前已加密的数据。维基解释是：长期使用的主密钥泄漏不会导致过去的会话密钥泄漏    实现此功能需要服务器支持以下算法和签名组合：（1）ECDHE 密钥交换、RSA 签名；（2）ECDHE 密钥交换、ECDSA 签名；</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;我们通常使用http协议用于网页的浏览，但是http有一个最大的缺点就是明文传输，这样在被攻击者截取了web浏览器
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://qq19971017.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="https://qq19971017.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络(6)——滑动窗口和拥塞窗口(转)</title>
    <link href="https://qq19971017.github.io/2020/08/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-6-%E2%80%94%E2%80%94%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E5%92%8C%E6%8B%A5%E5%A1%9E%E7%AA%97%E5%8F%A3-%E8%BD%AC/"/>
    <id>https://qq19971017.github.io/2020/08/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-6-%E2%80%94%E2%80%94%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E5%92%8C%E6%8B%A5%E5%A1%9E%E7%AA%97%E5%8F%A3-%E8%BD%AC/</id>
    <published>2020-08-13T12:30:00.000Z</published>
    <updated>2020-08-13T15:58:46.750Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这片文章是结合很多篇blog以及TCP/IP详解的滑动窗口部分总结来的，文字基本都是copy，内容不难，本来想自己总结的但是最近事情太多就直接把别人的东西直接拿过来了。</p></blockquote><h3 id="一-窗口定义"><a href="#一-窗口定义" class="headerlink" title="一.窗口定义"></a>一.窗口定义</h3><p><img src="/images/pasted-69.png" alt="upload successful"></p><p>因此我们先了解一下16位的窗口大小究竟有什么作用。</p><p>窗口分为滑动窗口和拥塞窗口。</p><p>滑动窗口是接受数据端使用的窗口大小，用来告知<font color=#A52A2A size=4 >发送端接收端的缓存大小</font>，以此可以控制发送端发送数据的大小，从而达到流量控制的目的。</p><p>那么对于数据的发送端就是拥塞窗口了，拥塞窗口不代表缓存，<font color=#A52A2A size=4 >拥塞窗口指某一源端数据流在一个RTT内可以最多发送的数据包数</font>。</p><h4 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h4><p>滑动窗口协议是传输层进行流控的一种措施，接收方通过通告发送方自己的可以接受缓冲区大小（这个字段越大说明网络吞吐量越高），从而控制发送方的发送速度，不过如果接收端的缓冲区一旦面临数据溢出，窗口大小值也会随之被设置一个更小的值通知给发送端，从而控制数据发送量（发送端会根据接收端指示，进行流量控制）。</p><p>对ACK的再认识，ack通常被理解为收到数据后给出的一个确认ACK，ACK包含两个非常重要的信息：</p><ul><li><p>一是期望接收到的下一字节的序号n，该n代表接收方已经接收到了前n-1字节数据，此时如果接收方收到第n+1字节数据而不是第n字节数据，接 收方是不会发送序号为n+2的ACK的。举个例子，假如接收端收到1-1024字节，它会发送一个确认号为1025的ACK,但是接下来收到的是 2049-3072，它是不会发送确认号为3072的ACK,而依旧发送1025的ACK。</p></li><li><p>二是当前的窗口大小m，如此发送方在接收到ACK包含的这两个数据后就可以计算出还可以发送多少字节的数据给对方，假定当前发送方已发送到第x字节，则可以发送的字节数就是y=m-(x-n).这就是滑动窗口控制流量的基本原理.</p></li></ul><p>滑动窗口协议如图所示:</p><p><img src="/images/pasted-70.png" alt="upload successful"></p><p>在这个图中，我们将字节从1至11进行 标号。接收方通告的窗口称为提出的窗口，它覆盖了从第4字节到第9字节的区域，表明接收方已经确认了包括第3字节在内的数据，且通告窗口大小为6。我们知 道窗口大小是与确认序号相对应的。发送方计算它的可用窗口，该窗口表明多少数据可以立即被发送。当接收方确认数据后，这个滑动窗口不时地向右移动。窗口两 个边沿的相对运动增加或减少了窗口的大小。我们使用三个术语来描述窗口左右边沿的运动：</p><ul><li>称窗口左边沿向右边沿靠近为窗口合拢。这种现象发生在数据被发送和确认时。</li><li>当窗口右边沿向右移动时将允许发送更多的数据，我们称之为窗口张开。这种现象发生在另一端的接收进程读取已经确认的数据并释放了T C P的接收缓存时。</li><li>当右边缘向左移动时，称之为窗口收缩。当然这是TCP所不允许的。</li></ul><p>当接收端的缓冲区满了，发送端接收到接收端的窗口大小为0，这个时候停止发送数据，这个时候发送端会过了超时重发的时间，发送一个窗口探测的包，此数据端仅含一个字节以获取最新的窗口大小信息。</p><h4 id="拥塞窗口"><a href="#拥塞窗口" class="headerlink" title="拥塞窗口"></a>拥塞窗口</h4><p>拥塞控制：<strong>防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载</strong>。拥塞控制所要做的都有一个<strong>前提：网络能够承受现有的网络负荷</strong>。拥塞控制是一个<strong>全局性的过程</strong>，涉及到所有的主机、路由器，以及与降低网络传输性能有关的所有因素。</p><pre><code>流量控制：指点对点通信量的控制，是端到端正的问题。流量控制所要做的就是抑制发送端发送数据的速率，以便使接收端来得及接收。拥塞控制代价：需要获得网络内部流量分布的信息。在实施拥塞控制之前，还需要在结点之间交换信息和各种命令，以便选择控制的策略和实施控制。这样就产生了额外的开销。拥塞控制还需要将一些资源分配给各个用户单独使用，使得网络资源不能更好地实现共享。</code></pre><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><p>滑动实质上是解决了接收端的缓存的问题，如果从发送端传送的数据超出了接受端所能够接收的最大缓存，那么接收端就会丢包。<br>而拥塞接口是为了解决整个网络中的过载问题，如果大量的数据在网路上传输，超过了网络的承载的上限那么，也会出现路由器也会丢包现象。</p><h3 id="二-几种拥塞控制算法"><a href="#二-几种拥塞控制算法" class="headerlink" title="二.几种拥塞控制算法"></a>二.几种拥塞控制算法</h3><p>慢开始，拥塞避免，快重传和快恢复</p><p>发送方维持一个拥塞窗口 cwnd ( congestion window )的状态变量。拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。发送方让自己的发送窗口等于拥塞。</p><p>发送方控制拥塞窗口的原则是：只要网络没有出现拥塞，拥塞窗口就再增大一些，以便把更多的分组发送出去。但只要网络出现拥塞，拥塞窗口就减小一些，以减少注入到网络中的分组数。</p><p>慢开始算法：当主机开始发送数据时，如果立即所大量数据字节注入到网络，那么就有可能引起网络拥塞，因为现在并不清楚网络的负荷情况。因此，较好的方法是 先探测一下，即由小到大逐渐增大发送窗口，也就是说，由小到大逐渐增大拥塞窗口数值。通常在刚刚开始发送报文段时，先把拥塞窗口 cwnd 设置为一个最大报文段MSS的数值。而在每收到一个对新的报文段的确认后，把拥塞窗口增加至多一个MSS的数值。用这样的方法逐步增大发送方的拥塞窗口 cwnd ，可以使分组注入到网络的速率更加合理。</p><p><img src="/images/pasted-71.png" alt="upload successful"></p><p>每经过一个传输轮次，拥塞窗口 cwnd 就加倍。一个传输轮次所经历的时间其实就是往返时间RTT。不过“传输轮次”更加强调：把拥塞窗口cwnd所允许发送的报文段都连续发送出去，并收到了对已发送的最后一个字节的确认。</p><p>另，慢开始的“慢”并不是指cwnd的增长速率慢，而是指在TCP开始发送报文段时先设置cwnd=1，使得发送方在开始时只发送一个报文段（目的是试探一下网络的拥塞情况），然后再逐渐增大cwnd。慢启动实质是解决发送方和接收方之间存在多个路由器和速率较慢的链路时，就有可能出现一些问题。一些中间路由器必须缓存分组，并有可能消耗存储器的空间，慢启动算法是通过观察到新分组进入网络的速率应该与另一端返回确认的速度相同而工作。</p><p>为了防止拥塞窗口cwnd增长过大引起网络拥塞，还需要设置一个慢开始门限ssthresh状态变量（如何设置ssthresh）。慢开始门限ssthresh的用法如下：</p><pre><code>当 cwnd &lt; ssthresh 时，使用上述的慢开始算法。当 cwnd &gt; ssthresh 时，停止使用慢开始算法而改用拥塞避免算法。当 cwnd = ssthresh 时，既可使用慢开始算法，也可使用拥塞控制避免算法。</code></pre><p>拥塞避免算法：让拥塞窗口cwnd缓慢地增大，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。这样拥塞窗口cwnd按线性规律缓慢增长，比慢开始算法的拥塞窗口增长速率缓慢得多。拥塞避免算法是用于处理丢失分组的方法。<br>无论在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（其根据就是没有收到确认），就要把慢开始门限ssthresh设置为出现拥塞时的发送 方窗口值的一半（但不能小于2）。然后把拥塞窗口cwnd重新设置为1，执行慢开始算法。这样做的目的就是要迅速减少主机发送到网络中的分组数，使得发生 拥塞的路由器有足够时间把队列中积压的分组处理完毕。</p><p>如下图，用具体数值说明了上述拥塞控制的过程。现在发送窗口的大小和拥塞窗口一样大。<br><img src="/images/pasted-72.png" alt="upload successful"></p><ul><li><p>&lt;1&gt;. 当TCP连接进行初始化时，把拥塞窗口cwnd置为1。前面已说过，为了便于理解，图中的窗口单位不使用字节而使用报文段的个数。慢开始门限的初始值设置为16个报文段，即 cwnd = 16 。</p></li><li><p>&lt;2&gt;. 在执行慢开始算法时，拥塞窗口 cwnd 的初始值为1。以后发送方每收到一个对新报文段的确认ACK，就把拥塞窗口值另1，然后开始下一轮的传输（图中横坐标为传输轮次）。因此拥塞窗口cwnd 随着传输轮次按指数规律增长。当拥塞窗口cwnd增长到慢开始门限值ssthresh时（即当cwnd=16时），就改为执行拥塞控制算法，拥塞窗口按线 性规律增长。</p></li><li><p>&lt;3&gt;. 假定拥塞窗口的数值增长到24时，网络出现超时（这很可能就是网络发生拥塞了）。更新后的ssthresh值变为12（即变为出现超时时的拥塞窗口数值 24的一半），拥塞窗口再重新设置为1，并执行慢开始算法。当cwnd=ssthresh=12时改为执行拥塞避免算法，拥塞窗口按线性规律增长，每经过 一个往返时间增加一个MSS的大小。</p></li></ul><p>强调：“拥塞避免”并非指完全能够避免了拥塞。利用以上的措施要完全避免网络拥塞还是不可能的。“拥塞避免”是说在拥塞避免阶段将拥塞窗口控制为按线性规律增长，使网络比较不容易出现拥塞。</p><h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><p>相同：提高网络性能。<br>不同：<br>  [1].流量控制：在TCP连接上实现对发送流量的控制，考虑点对点之间对通信量的控制，端到端，即：控制发送端的数据发送速率，使接收端可以来得及接收，保证网络高效稳定运行。<br>  [2].拥塞控制：处理网络拥塞现象，考虑网络能够承受现有的网络负荷，全局性变量，涉及所有的路由器、主机以及与降低网络传输性能有关的因素。防止过多的数据注入到网络，使网络中的路由器或链路不致过载，确保通信子网可以有效为主机传递分组。</p><h4 id="快重传和快恢复"><a href="#快重传和快恢复" class="headerlink" title="快重传和快恢复"></a>快重传和快恢复</h4><p>如果发送方设置的超时计时器时限已到但还没有收到确认，那么很可能是网络出现了拥塞，致使报文段在网络中的某处被丢弃。这时，TCP马上把拥塞窗口 cwnd 减小到1，并执行慢开始算法，同时把慢开始门限值ssthresh减半。这是不使用快重传的情况。</p><p>快重传算法首先要求接收方每收到一个失序的报文段后就立即发出重复确认（为的是使发送方及早知道有报文段没有到达对方）而不要等到自己发送数据时才进行捎带确认。</p><p><img src="/images/pasted-73.png" alt="upload successful"><br>接收方收到了M1和M2后都分别发出了确认。现在假定接收方没有收到M3但接着收到了M4。显然，接收方不能确认M4，因为M4是收到的失序报文段。根据 可靠传输原理，接收方可以什么都不做，也可以在适当时机发送一次对M2的确认。但按照快重传算法的规定，接收方应及时发送对M2的重复确认，这样做可以让 发送方及早知道报文段M3没有到达接收方。发送方接着发送了M5和M6。接收方收到这两个报文后，也还要再次发出对M2的重复确认。这样，发送方共收到了 接收方的四个对M2的确认，其中后三个都是重复确认。快重传算法还规定，发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段M3，而不必 继续等待M3设置的重传计时器到期。由于发送方尽早重传未被确认的报文段，因此采用快重传后可以使整个网络吞吐量提高约20%。</p><p><strong>为什么要收到3个以上重复的ack才进行重传</strong><br>由于我们不知道一个重复的ACK是由一个丢失的报文段引起的，还是由仅仅出现了几个报文段的重排序，因此我们等到少量重复的ack到来。假如这只是一些报文段的重新排序，因此我们等待少量重复的ack到来。假如这只是一些报文段的重新排序，则在重新排序的报文段被处理并产生一个新的ACK之前，只可能生产1～2个重复的ack。如果收到3个或3个以上的重复的ack，就非常啃呢个是一个报文段丢失，因此我们就重传丢失的数据报文段，而无需等待超时定时器溢出。这就是快速重传算法。接下来执行的不是慢启动算法而是快速恢复算法。</p><p>与快重传配合使用的还有快恢复算法，其过程有以下两个要点：</p><ul><li><p>&lt;1&gt;. 当发送方连续收到三个重复确认，就执行“乘法减小”算法，把慢开始门限ssthresh减半。这是为了预防网络发生拥塞。请注意：接下去不执行慢开始算法。</p></li><li><p>&lt;2&gt;. 由于发送方现在认为网络很可能没有发生拥塞，因此与慢开始不同之处是现在不执行慢开始算法（即拥塞窗口cwnd现在不设置为1），而是把cwnd值设置为 慢开始门限ssthresh减半后的数值，然后开始执行拥塞避免算法（“加法增大”），使拥塞窗口缓慢地线性增大。</p></li></ul><p>下图给出了快重传和快恢复的示意图，并标明了“TCP Reno版本”。</p><p>区别：新的 TCP Reno 版本在快重传之后采用快恢复算法而不是采用慢开始算法。<br><img src="/images/pasted-74.png" alt="upload successful"></p><p>说明：新的 TCP Reno 版本在快重传之后采用快恢复算法而不是采用慢启动算法。从接收方对发送方的流量控制的角度考虑，发送方的发送窗口一定不能超过对方给出的接收窗口rwind 。</p><p>也有的快重传实现是把开始时的拥塞窗口cwnd值再增大一点，即等于 ssthresh + 3 X MSS 。这样做的理由是：既然发送方收到三个重复的确认，就表明有三个分组已经离开了网络。这三个分组不再消耗网络 的资源而是停留在接收方的缓存中。可见现在网络中并不是堆积了分组而是减少了三个分组。因此可以适当把拥塞窗口扩大了些。</p><p>tcp快恢复算法，快恢复过程大致包括以下步骤：</p><ul><li>1、cwnd = sshthresh + 3 * MSS （3的意思是确认有3个数据包被收到了）</li><li>2、重传Duplicated ACKs指定的数据包</li><li>3、如果再收到 duplicated Acks，那么cwnd = cwnd +1</li><li>4、如果收到了新的Ack，那么，cwnd = sshthresh。</li></ul><p>这里关于<font color=#A52A2A size=4 >为什么第一步cwnd为sshthresh+3MSS，以及为什么第三步没收到一个ack，cwnd+1，最后收到新的ack就恢复为sshthresh。</font><br>这里我们用知乎上的回答：<br><a href="https://www.zhihu.com/question/53168634/answer/154822905" target="_blank" rel="noopener">TCP reno版本的快恢复算法最后一步为什么重置窗口？</a></p><pre><code>因为在reno中假定：网络只偶然的丢了一个包。第一句话中+3MSS的原因其实是指你已经收到了3个Dup ack。假定情况如下：你的ssthresh是10000，MSS是1000.那么现在你发送了10个包。始终受到要求第1个包的ACK。然后你再次发生第一个包。还是收到dup ack。这时候Reno让你的cwnd+1，于是你新发了第11个包。循环100次后，你已经发送到了第110个包。循环100次后，你已经发送到了第110个包。接收端一下子给你回了一个要求第100个包的ACK。于是你的window一下子就向右移动了100个MSS。在刚才的inflates过程中，你的cwnd已经达到了10+3+100（N）的一个非常大的数据。而Reno认为，你应该还保持在原有的ssthresh的程度（即10个MSS的程度）所以要重置ssthresh。</code></pre><p>这个方案的好处是：每次DUP ACK，你还能以拥塞避免的速度去发送新的数据；避免中间长时间被浪费。当然问题就是，他主要假定只不见了一个包。于是如果不见了多个包，就会又一次进入fast recovery；于是cwnd和ssthresh再次减半。等于丢一个包就是一次减半.</p><p>关于上面这个问题还有一个blog写的比较好我们也可以借鉴一下：<br><a href="https://blog.csdn.net/su_coding/article/details/77372643" target="_blank" rel="noopener">关于快恢复算法中的一些问题</a></p><p>在采用快恢复算法时，慢开始算法只是在TCP连接建立时和网络出现超时时才使用。</p><p>采用这样的拥塞控制方法使得TCP的性能有明显的改进。</p><p>接收方根据自己的接收能力设定了接收窗口rwnd，并把这个窗口值写入TCP首部中的窗口字段，传送给发送方。因此，接收窗口又称为通知窗口。因此，从接收方对发送方的流量控制的角度考虑，发送方的发送窗口一定不能超过对方给出的接收窗口rwnd 。</p><p>发送方窗口的上限值 = Min [ rwnd, cwnd ]</p><p>当rwnd &lt; cwnd 时，是接收方的接收能力限制发送方窗口的最大值。</p><p>当cwnd &lt; rwnd 时，则是网络的拥塞限制发送方窗口的最大值。</p><h3 id="转载连接"><a href="#转载连接" class="headerlink" title="转载连接"></a>转载连接</h3><p><a href="https://blog.csdn.net/ligupeng7929/article/details/79597423" target="_blank" rel="noopener">TCP的滑动窗口与拥塞窗口</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这片文章是结合很多篇blog以及TCP/IP详解的滑动窗口部分总结来的，文字基本都是copy，内容不难，本来想自己总结的但是最近事情太多就直接把别人的东西直接拿过来了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一-窗口定义&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://qq19971017.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="https://qq19971017.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
      <category term="TCP" scheme="https://qq19971017.github.io/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络(5)——TCP</title>
    <link href="https://qq19971017.github.io/2020/08/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-5-%E2%80%94%E2%80%94TCP/"/>
    <id>https://qq19971017.github.io/2020/08/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-5-%E2%80%94%E2%80%94TCP/</id>
    <published>2020-08-06T13:44:00.000Z</published>
    <updated>2020-08-11T03:25:54.409Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>TCP是计算机网络中运输层的一个协议。他有一下几个特点：面向连接、点对点、全双公服务。</p><ul><li>面向连接：当一个服务器向另一个服务器发送数据的时候，必须要先通过握手建立连接，才能发送数据。</li><li>点对点：这保证数据的传输只有单个的发送方和单个接收方。和UDP的广播和多播是不一样的。</li><li>全双工服务：表示建立TCP连接的两个主机既可以发送数据，也可以接收数据。</li></ul><p>上面的三个特点保证了TCP的连接是可靠的。</p><h4 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h4><p>具体来讲，TCP/IP详解一书中提到了多个TCP保证可靠性的方式，我将它分为以下两类，一类从数据传输来说，一类是对下层ip协议的可靠性</p><ul><li><p>数据传输：1. tcp在数据传输时，将数据分割成小的数据块，分块发送可以保证在数据传输的时候，如果出现错误需要重穿，只需要将出错的一段重新发送即可，不需要将整个数据包重新上传。</p></li><li><p>数据传输：2. 定时器机制——当TCP发出一个段时，他会启动一个定时器，等待目的端确认收到这个报文段。如果不能够及时收到确认的话，将重新发送这个报文段。</p></li><li><p>数据传输：3. 当TCP收到发自TCP连接另一端的数据的时候，它将发送一个确认，这个确认不是立即发送，通常会推迟几分之一秒，这是因为，我们希望能够将数据确认和接下来需要发送的数据一起发送给另一端，这样可以节省发送的次数。</p></li><li><p>数据传输：4.流量控制，TCP连接的每一端都会有一个固定大小的缓冲空间。这个缓冲空间可以保证发送过来的数据不能及时处理，就会放在缓冲空间中，可以提高吞吐率。即使有缓冲区也有可能会导致缓冲区溢出，所以TCP的接收端只允许另一端发送接收端缓冲区所能接纳的数据，这将防止较快主机致使较慢主机的缓冲区溢出。</p></li><li><p>数据传输：5.TCP将保持它的首部和数据的校验和。</p></li><li><p>数据传输：6.TCP对传输字节流的内容不做解释。TCP不知道传输的数据字节流是二进制数据还是ASSCII字符。字节流的解释交由引用层来处理。</p></li><li><p>数据传输：7.当发送端从引用层发送多个字节时，TCP会按照自己的方式将字节转换为小数据块。比如一方的应用程序先传10字节，又传20字节，再传50字节，连接的另一方无法知道发送方每次发了多少字节。接收方可以分4次接收这80个字节，每次接收20字节。</p></li><li><p>ip可靠性保证：1.失序重排：既然TCP报文段作为IP数据包来传输，而IP数据报的到达可能会失序，因此TCP报文段的到达可能失序。如果必要，TCP将对收到的数据进行重排序，将收到的数据以正确的顺序交给应用层。</p></li><li><p>ip可靠性保证：2.重复丢弃：IP数据报会发生重复，TCP的接收端必须丢弃重复的数据。</p></li></ul><h3 id="TCP结构"><a href="#TCP结构" class="headerlink" title="TCP结构"></a>TCP结构</h3><p><img src="/images/pasted-56.png" alt="upload successful"></p><p>TCP报文主要包括首部和数据两个部分，具体的结构如上图所示，下面我们来具体介绍一下这几个部分。</p><ul><li><p>端口号：每个TCP端都包含两个16位的源端和目的端口号，用于寻找发送端和接收端的进程。这两个值加上IP首部的源端IP地址、目的端IP地址可以唯一确定一个TCP连接。我们通常将IP地址+端口号一起成为socket（端口号）。既然是16位的也就是说端口号最大为2^16-1;</p></li><li><p>序号：序号用来标示从TCP发送端向TCP接收端发送的数据字节流，他标示在这个报文段中的第一个数据字节的序号。如果将字节流看作在两个应用程序间的单项流动，则TCP用序号对每个字节进行计数，序号是32bit的无符号数，序号达到2^32-1后又从0开始，要注意的是，SYN和FIN标示位是会消耗一个序号。也就是说即使数据是空的，当SYN和FIN的被标志的时候，序号仍然会加1.</p></li></ul><p><img src="/images/pasted-57.png" alt="upload successful"></p><p>比如我们发送端要给接收端发送9000字节的数据，我们将这个9000字节的数据进行切分成2500大小的数据报文。那么序号就表示位每一个数据的第一个字节，比如第一个数据的序号就为1，第二个位2500。</p><ul><li><p>确认序号应当是上次成功收到数据字节序号加1.只有ACK标志为1的时候确认序号字段才有效。<br>我们还用上面的图进行解释，当接收端收到发送端发来的第一个数据报，并已经确认之后，当接收端向发送端发送数据的时候，接收端希望下一次收到的报文的序号为2500，这样数据才能接上，所以确认序号的值就是2500.</p></li><li><p>发送的ACK是不占用任何序号的，因为32bit的确认序号和ACK标志一样，总是TCP首部的一部分，因此我们看到，一旦一个连接建立起来，这个字段总是被设置，ACK标志也总是被设置为1.</p></li><li><p>TCP可以表述为一个没有选择确认或者否认的滑动窗口协议，我们说TCP缺少选择确认是因为TCP首部的确认序号表示发送方已经成功接收的字节，但还不包含确认序号所指的字节。当前还无法对数据流中选定的部分进行确认。如下图所示：</p></li></ul><p><img src="/images/pasted-58.png" alt="upload successful"><br>发送端向接收端发送1000～1999的数据，接收端发送确认序号2000，接着接受端收到3000～3999的数据，但是这不是接收端想要的数据，由于无法选择确认后面的序号，所以只能重新发一次确认序号2000，表明没有收到序号为2000的数据。<br>没有否认的意思是，如果接收端收到想要的数据，但是校验和不通过，因为不能直接发送否认序号，所以只能发送一个确认序号为2000的新的请求。</p><ul><li><p>首部长度给出首部32位的数目，需要这个值是因为任选字段是可变的，这个字段占4bit，因此TCP最多有60字节的首部，然而，没有任选字段，正常的长度是20字节。因为TCP单位是32位也就是4字节，首部长度占4bit最大可以表示15，15x4=60，所以TCP首部最大60字节。</p></li><li><p>TCP中的标志位有6个，它们中多个可以同时被设置为1.<br>  URG 紧急指针有效<br>  ACK 确认序号有效<br>  PSH 接收方应该尽快将这个报文交给应用层<br>  RST 重建连接<br>  SYN 同步序号用来发起一个连接。<br>  FIN 发端完成发送任务。</p></li><li><p>TCP的流量控制由连接的每一端通过申明窗口大小来提供。窗口大小为字节数，起始与确认序号字段指明的值，这个值是接受端正期望接收的字节。窗口大小是16bit字段，因而窗口大小最大为65535字节。</p></li><li><p>检验和覆盖了整个TCP报文段。</p></li><li><p>最常见的可选字段是最长报文大小，又称为MSS。每个连接方通常都在通信的第一个报文段中指明这个选项。它指明本端所能接收的最大长度的报文段。</p></li><li><p>我们注意到TCP报文段的数据是可选的。当一个连接建立连接和连接终止时，双方交换的报文端只有首部，在处理超时情况下，通常也会发送空数据的报文段。</p></li></ul><h3 id="TCP连接的建立和终止"><a href="#TCP连接的建立和终止" class="headerlink" title="TCP连接的建立和终止"></a>TCP连接的建立和终止</h3><p>TCP是一个面向连接的协议。无论哪一个方向另一方发送数据之前，都必须先在双方之间建立一条连接。</p><h4 id="TCP连接三次握手"><a href="#TCP连接三次握手" class="headerlink" title="TCP连接三次握手"></a>TCP连接三次握手</h4><p>TCP的连接，客户端会向服务端发送一个连接请求，接着服务端会向客户端发送一个请求确认，最后客户端会继续向服务端发送一个请求确认，这就表明了两个主机之间完成了TCP的连接，也叫三次握手。<br>如下图所示：<br><img src="/images/pasted-59.png" alt="upload successful"></p><ul><li><ol><li>请求端发送一个TCP的SYN标志位置1的包，指明客户端打算连接的服务器的端口，以及一个初始的序列号x，保存在包头的序列号字段里面。此时进入SYN_SEND阶段。</li></ol></li><li><ol start="2"><li>服务端发回包含服务器的初始序号Y的SYN报文段作为应答。同时，将确认的初始序列号ISN加1，放在确认序号中，即X+1.发送完毕后服务端进入SYN_RECV阶段。</li></ol></li><li><ol start="3"><li>客户端必须将确认序号设置为服务端的ISN加1以对服务器的SYN报文段进行确认。</li></ol></li></ul><p>以上三步，我们称之为三次握手，值得注意的是，三次握手中SYN置为1只出现在前两个连接中，ACK置为1只出现在后两个连接中。选择项MSS只在SYN报文中出现，最终由客户端和服务毒案共同协议，如果两个mss不一样，则选择最小的报文段，如果不接受对方的MSS选择，则MSS就定为默认值536.一般来说，如果没有分段发生，MSS还是越大越好。报文段越大允许每个报文段传送的数据就越多，相对IP和TCP首部就有更高的网络利用率。当TCP发送一个SYN时，或者是因为一个本地应用进程想发起一个连接，或者是因为另一段的主机收到了一个连接请求，他能将MSS值设置为外出接口上的MTU的长度减去固定的IP首部和TCP首部长度。对于一个以太网可以达到1460字节。当MSS的值确定之后，以后的数据交换都不能超过MSS的值。</p><p>序列号ISN的确定并不是从0开始的，而是根据按照随时间增加而不断增加的，如果在某一时刻请求端发送请求，他会根据某个函数获取初始的ISN的值，当然不同的操作系统ISN计算方式不同。有些攻击者，可以根据定时的发送请求，来根据两个请求的时间差计算出操作系统使用的是哪一个。</p><p><strong>连接超时</strong><br>很多情况下会导致无法建立连接，一种情况是服务器主机没有处于正常状态。这个时候客户端每隔一定的时间会发送一次请求连接，直到到过一定的阈值。这个时间间隔会越来越大。</p><p><strong>二次握手和四次握手</strong><br>TCP建立连接的时候需要进行三次握手，才能确定连接的双方都能够正常通信，为什么不用两次握手或者四次握手呢。我们知道双方在建立连接的时候，实质上是确定双方的序号以及MSS的大小。双方需要知道自己首部的序号是否已经同步，这样才能在后面发送数据。</p><p><strong>两次握手</strong></p><p><img src="/images/pasted-61.png" alt="upload successful"><br>我们想以下，在进行两次握手的时候，发送端想接收端发送SYN的连接请求包，并带了自己的ISN序号，当服务端收到请求，并进行回应。服务端会把自己的SYN序号发给客户端，此时客户端已经知道服务端已经确认了通信，并保证从客户端想服务端发数据是可靠的，但是我们知道TCP是全双工的通道，我们只进行两次握手，服务端是无法知道自己发送的SYN包是否到达了数据库，不知道自己往客户端发送数据的通道是否可靠。如果这个SYN包丢失了，A和B的初始序列号无法达成一致的。</p><p>TCP的设计者将SYN这个同步标志SYN设计成占用一个字节的编号（FIN标志也是），既然是一个字节的数据，按照TCP对有数据的TCP segment必须确认的原则，所以这里客户端必须给服务端一个去二人，以确定A已经接收到B的同步信号。</p><p>那么三次握手是如何保证可靠的呢，如果客户端发给服务端的ack包丢失了怎么办。客户端会重传这个ACK吗？不会！TCP不会为没有数据的ACK超时重穿。此时服务端会重传自己的SYN同步信号，一直到A的ACK为止。</p><p>第一个包，即A发给B的SYN 中途被丢，没有到达B</p><p>A会周期性超时重传，直到收到B的确认</p><p>第二个包，即B发给A的SYN +ACK 中途被丢，没有到达A</p><p>B会周期性超时重传，直到收到A的确认</p><p>第三个包，即A发给B的ACK 中途被丢，没有到达B</p><p>A发完ACK，单方面认为TCP为 Established状态，而B显然认为TCP为Active状态：</p><p>a. 假定此时双方都没有数据发送，B会周期性的超时重传，直到收到A的确认，收到之后的B的TCP连接也为Established状态，双向可以发包。</p><p><strong>四次握手</strong><br>我们再来看一下四次握手，如图</p><p><img src="/images/pasted-62.png" alt="upload successful"></p><p>看起来很简单，就是将接收端发给客户端的syn包，拆分成了两份。这也很容易就能够看出来，这样的效率并不高。三次握手就可以提高效率。</p><h4 id="TCP连接四次挥手"><a href="#TCP连接四次挥手" class="headerlink" title="TCP连接四次挥手"></a>TCP连接四次挥手</h4><p><img src="/images/pasted-63.png" alt="upload successful"><br>TCP连接的建立需要3次握手，但是TCP的终止是需要4次挥手，这是由于TCP的半关闭造成的，因为TCP是一个全双工的连接，每个方向需要分别关闭通道。当一方结束数据传输的时候，就会发送一个FIN包来终止这个方向的连接。当接收端收到一个FIN包的时候，只是说明了来自这个方向的数据传输终止了，但是接收端仍然可以向发送端发送数据。当接收端结束数据传输的时候，他会向客户端发送一个FIN包，用来终止连接。</p><ul><li>第一次挥手：数据传输结束后，客户端向服务端发送一个FIN包，并停止发送数据，此时FIN=1，seq=u；</li><li>第二次挥手：客户端收到FIN包后，会发送一个确认请求，此时ACK=1，seq=v，ack=u+1。此时服务端处于半关闭状态，客户端收到确认包以后就不会再向服务端发送数据，而服务端仍然会向客户端发送数据。</li><li>第三次挥手：若服务器已经没有要向客户端发送的数据，其应用进程就通知服务器释放TCP连接。这个阶段服务器所发出的最后一个报文的首部应为：FIN=1,ACK=1,seq=w,ack=u+1。</li><li>第四次挥手：客户端收到连接释放报文段之后，必须发出确认：ACK=1,seq=u+1,ack=w+1。 再经过2MSL(最长报文端寿命)后，本次TCP连接真正结束，通信双方完成了他们的告别。<br>在这个过程中，通信双方的状态如下图，其中：ESTAB-LISHED：连接建立状态、FIN-WAIT-1：终止等待1状态、FIN-WAIT-2：终止等待2状态、CLOSE-WAIT：关闭等待状态、LAST-ACK：最后确认状态、TIME-WAIT：时间等待状态、CLOSED：关闭状态</li></ul><p><strong>为什么在TIME_WAIT后必须等待2MSL时间呢？</strong></p><ol><li><p>为了保证客户端（我们记为A端）发送的最后一个ACK报文段能够到达服务器端。这个ACK报文段有可能丢失，因而使处在LASK—ACK端的服务器端（我们记为B端）收不到对已发送的FIN+ACK报文段。B会超时重传这个FIN+ACK报文段，而A就能在2MSL时间内收到这个重传的FIN+ACK报文段。接着A重传一次确认，重新启动2MSL计时器。最后，A和B都正常进入到CLOSED状态。如果A在TIME_WAIT状态不等待一段时间，而是在发送完ACK确认后立即释放连接，那么就无法收到B重传的FIN+ACK报文段，因而也不会再发送一次确认报文段，这样，B就无法正常进入CLOSED状态。</p></li><li><p>我们都知道，假如A发送的第一个请求连接报文段丢失而未收到确认，A就会重传一次连接请求，后来B收到了确认，建立了连接。数据传输完毕后，就释放了连接。A共发送了两个连接请求报文段，其中第一个丢失，第二个到达了B。假如现在A发送的第一个连接请求报文段没有丢失，而是在某些网络节点长时间都留了，以至于延误到连接释放后的某个时间才到达B，这本来是已失效的报文段，但B并不知道，就会又建立一次连接。而等待的这2MSL就是为了解决这个问题的，A在发送完最后一个确认报后，在经过时间2MSL，就可以使本链接持续时间内所产生的所有报文段都从网络中消失，这样就可以使下一个新的连接中不会出现这种旧的连接请求报文段。</p></li></ol><p><strong>为什么是四次挥手</strong><br>我们都知道TCP是全双工，数据传输是双向的，如果客户端完成了数据的传输，发起主动关闭连接，此时服务端可能没有完全结束数据传输，如果只进行三次挥手，那么要求数据结束传输必须是同时的，这就会强制终止服务端的传输，这样数据的传输是不完整的。另一点，如果进行五次以上的挥手操作，一定会造成资源的浪费，使效率低。</p><p><strong>半关闭状态</strong><br>TCP提供了连接的一段在结束后还能够接收来自另一端数据的能力。这就是所谓的半关闭。正如我们早些时候提到的只有很少的应用程序使用它。<br>为了使用这种特性，编程接口必须为应用程序提供一种方式来说明，我已经完成了数据传送，因此发送一个文件结束给另一端，但我还想接收另一端发来的数据，直到它给我发来文件结束。</p><h4 id="TCP连接异常问题"><a href="#TCP连接异常问题" class="headerlink" title="TCP连接异常问题"></a>TCP连接异常问题</h4><p>我们之前介绍了三次握手建立连接，四次挥手释放连接。但是如果出现了连接异常现象，TCP是如何处理的呢，这里就会用到TCP标志位RST。</p><p><strong>到不存在的端口请求连接</strong><br>当一个TCP的一个请求连接到达服务器，发现请求的端口未对外开放，这时服务端会回传一个RST报文段，告知客户端端口号不可达。</p><p><img src="/images/pasted-64.png" alt="upload successful"></p><p><strong>TCP连接异常终止</strong></p><p>客户端和服务器的某一方在交互的过程中发生异常（如程序崩溃等），该方系统将向对端发送TCP reset报文，告之对方释放相关的TCP连接，如下图所示：</p><p><img src="/images/pasted-65.png" alt="upload successful"></p><p>接收端收到TCP报文，但是发现该TCP的报文，并不在其已建立的TCP连接列表内，则其直接向对端发送reset报文</p><p><img src="/images/pasted-66.png" alt="upload successful"></p><p>在交互的双方中的某一方长期未收到来自对方的确认报文，则其在超出一定的重传次数或时间后，会主动向对端发送reset报文释放该TCP连接，如下图所示：</p><p><img src="/images/pasted-67.png" alt="upload successful"></p><p>有些应用开发者在设计应用系统时，会利用reset报文快速释放已经完成数据交互的TCP连接，以提高业务交互的效率</p><p><img src="/images/pasted-68.png" alt="upload successful"></p><p>异常终止有两个好处，丢弃所有待发的数据并直接发送复位的报文段，RST的接收方会区分对方是正常关闭还是异常关闭。</p><p><strong>处理半连接状态</strong><br>如果tcp的一段已经关闭或者异常终止连接而对方却不知道，我们将这样的连接称之为半打开。任何一端的主机异常都有可能会导致发生这种情况。只要不再半打开的连接上传输数据，仍然处于连接的一方就无法知道对方出现异常。<br>半打开的原因往往是应为连接的一端突然断电，而不是正常的程序关闭出现后再关机，比如说当客户端结束任务，直接拔掉电源。等到重新开机的时候，之前的连接信息全部丢失了，而服务端如果没有发送数据，就不会知道连接已经断开。此时如果服务端向客户端发送一条信息，由于客户端丢失了之前的连接信息，所以它并不知道报文段中的连接，这时TCP的处理方式就是发送一个RST报文来进行复位，告知服务端连接已经终止。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://www.zhihu.com/question/24853633" target="_blank" rel="noopener">TCP 为什么是三次握手，而不是两次或四次？</a><br><a href="https://blog.51cto.com/10706198/1775555" target="_blank" rel="noopener">TCP/IP中MSL详解</a><br><a href="https://zhuanlan.zhihu.com/p/24860403" target="_blank" rel="noopener">简述TCP连接的建立与释放（三次握手、四次挥手）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;TCP是计算机网络中运输层的一个协议。他有一下几个特点：面向连接、点对点、全双公服务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;面向连接：当一个服务器向另
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://qq19971017.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="https://qq19971017.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
      <category term="TCP" scheme="https://qq19971017.github.io/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>leetcode——打家劫舍</title>
    <link href="https://qq19971017.github.io/2020/08/05/leetcode%E2%80%94%E2%80%94%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/"/>
    <id>https://qq19971017.github.io/2020/08/05/leetcode%E2%80%94%E2%80%94%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</id>
    <published>2020-08-05T05:15:00.000Z</published>
    <updated>2020-08-05T06:33:30.027Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>打家劫舍系列一共有三个题目，算是比较经典的dp的题目，我去年做过一遍今年在刷每日一题的时候又重新回顾一下这三个题目，对我的帮助还是收益满多的，话不多说先看题目。</p><h3 id="打家劫舍1"><a href="#打家劫舍1" class="headerlink" title="打家劫舍1"></a>打家劫舍1</h3><p><strong>题目</strong></p><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。</p><p><strong>示例1</strong></p><blockquote><p><strong>输入</strong>:[1,2,3,1]<br><strong>输出</strong>:4<br><strong>解释</strong>:<br>偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。<br>偷窃到的最高金额 = 1 + 3 = 4 。</p></blockquote><p><strong>示例2</strong></p><blockquote><p><strong>输入</strong>:[2,7,9,3,1]<br><strong>输出</strong>:12<br><strong>解释</strong>:<br>偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。<br>偷窃到的最高金额 = 2 + 9 + 1 = 12 。</p></blockquote><h4 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h4><p>这个题目的一个最重要的特点就是相邻的两个区域不能同时选择，所以，我们可以设置一个dp数组用来保存第i个房间被偷的时候能偷到的最大金额，我们就可以写出状态方程<br>dp[i] = max(dp[i-1]-num[i-1], dp[i-2]) + num[i];<br>然后利用这个公式，我们选择dp数组中最大的一个数就是我们能偷到的最大的数。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//dp算法</span></span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span>|| nums.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">2</span>) <span class="keyword">return</span> Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">int</span> [] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">1</span>] =nums[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> max = Math.max(dp[<span class="number">0</span>],dp[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;nums.length;++i)&#123;</span><br><span class="line">            dp[i] = Math.max(dp[i-<span class="number">1</span>]-nums[i-<span class="number">1</span>],dp[i-<span class="number">2</span>]) + nums[i];</span><br><span class="line">            max = Math.max(dp[i],max);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度和空间复杂度都是O(N)</p><h4 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h4><p>解法1虽然能够解决问题，但是方法不够简洁，不能够一次性解决问题，还需要对dp数组中寻找一个最大的数值。<br>我们可以换一种思路，将dp数组表示成当偷到第i个房间的时候，所能够获得的最大金额，这个表示和解法1还是有区别的，解法1是表示第i个房间必须被偷，而这个表示方法第i个房间不一定被偷。<br>按照这个思路来说，当我们偷第i个房间的时候，就有两种状态，第一种状态是第i-1个房间被偷了，那么根据相邻不可同时偷取的特性，第i个房间就必须跳过，此时有dp[i] = dp[i-1],第二种个状态是第i-1个房间没有被偷，此时第i个房间就可以选择偷也可以选择不偷，此时dp[i] = dp[i-2]+nums[i];结合上面两种状态，我们可以得出：dp[i]=max(dp[i−2]+nums[i],dp[i−1])</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> length = nums.length;</span><br><span class="line">        <span class="keyword">if</span> (length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; length; i++) &#123;</span><br><span class="line">            dp[i] = Math.max(dp[i - <span class="number">2</span>] + nums[i], dp[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[length - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>时间复杂度和空间复杂度都是O(N)</p><h4 id="解法3"><a href="#解法3" class="headerlink" title="解法3"></a>解法3</h4><p>我们可以对方法2进行优化，因为我们看到dp[i]只和dp[i-1],dp[i-2]有关，我们可以利用这个特性，将dp数组转化为3个int整数，这也是滚动pd。代码如下：</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> length = nums.length;</span><br><span class="line">        <span class="keyword">if</span> (length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> first = nums[<span class="number">0</span>], second = Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = second;</span><br><span class="line">            second = Math.max(first + nums[i], second);</span><br><span class="line">            first = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="打家劫舍2"><a href="#打家劫舍2" class="headerlink" title="打家劫舍2"></a>打家劫舍2</h3><p><strong>题目</strong></p><p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。</p><p><strong>示例1</strong></p><blockquote><p><strong>输入</strong>:[2,3,2]<br><strong>输出</strong>:3<br><strong>解释</strong>:<br>你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。</p></blockquote><p><strong>示例2</strong></p><blockquote><p><strong>输入</strong>:[1,2,3,1]<br><strong>输出</strong>:4<br><strong>解释</strong>:<br>你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。<br>偷窃到的最高金额 = 1 + 3 = 4 。</p></blockquote><h4 id="解法1-1"><a href="#解法1-1" class="headerlink" title="解法1"></a>解法1</h4><p>这个题目相比较上一个题目有一个难度的提升，从单链变成了循环，这样就需要保证第一个和最后一个不能同时被偷，这样我们可以遍历两次房间，第一次遍历从头开始遍历，遍历到除了最后一个房间的所有房间。第二次从尾巴开始遍历，遍历到除了第一个房间的所有房间。方式还是和第一题的解法1一样：</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//两次dp遍历，从前往后和从后往前</span></span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> ||  nums.length ==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums.length ==<span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(nums.length ==<span class="number">2</span>) <span class="keyword">return</span> Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span>(nums.length ==<span class="number">3</span>) <span class="keyword">return</span> Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">int</span> [] dp1 = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="keyword">int</span> [] dp2 = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        dp1[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        dp1[<span class="number">1</span>] = nums[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> max = Math.max(dp1[<span class="number">0</span>],dp1[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;nums.length-<span class="number">1</span>; ++i)&#123;</span><br><span class="line">            dp1[i] = Math.max(dp1[i-<span class="number">1</span>]-nums[i-<span class="number">1</span>], dp1[i-<span class="number">2</span>]) + nums[i];</span><br><span class="line">            max = Math.max(dp1[i], max);</span><br><span class="line">        &#125;</span><br><span class="line">        dp2[nums.length-<span class="number">1</span> ] = nums[nums.length-<span class="number">1</span>];</span><br><span class="line">        dp2[nums.length-<span class="number">2</span> ] = nums[nums.length-<span class="number">2</span>];</span><br><span class="line">        max = Math.max(dp2[nums.length-<span class="number">1</span> ], max);</span><br><span class="line">        max = Math.max(dp2[nums.length-<span class="number">2</span> ], max);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=nums.length-<span class="number">3</span>; i&gt;=<span class="number">1</span>; i--)&#123;</span><br><span class="line">            dp2[i] = Math.max(dp2[i+<span class="number">1</span>]-nums[i+<span class="number">1</span>], dp2[i+<span class="number">2</span>]) + nums[i];</span><br><span class="line">            max = Math.max(dp2[i], max);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="解法2-1"><a href="#解法2-1" class="headerlink" title="解法2"></a>解法2</h4><p>方式仍然是两次遍历，但是我们对dp的表达方式转化为和上一题的解法2一样。</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> Math.max(myRob(Arrays.copyOfRange(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>)), </span><br><span class="line">                        myRob(Arrays.copyOfRange(nums, <span class="number">1</span>, nums.length)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">myRob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pre = <span class="number">0</span>, cur = <span class="number">0</span>, tmp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            tmp = cur;</span><br><span class="line">            cur = Math.max(pre + num, cur);</span><br><span class="line">            pre = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="打家劫舍3"><a href="#打家劫舍3" class="headerlink" title="打家劫舍3"></a>打家劫舍3</h3><p><strong>题目</strong></p><p>在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为“根”。 除了“根”之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。</p><p>计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。</p><p><strong>示例1</strong></p><blockquote><p><strong>输入</strong>:[3,2,3,null,3,null,1]<br><strong>输出</strong>:7<br><strong>解释</strong>:<br>小偷一晚能够盗取的最高金额 = 3 + 3 + 1 = 7.</p></blockquote><p><strong>示例2</strong></p><blockquote><p><strong>输入</strong>:[3,4,5,1,3,null,1]<br><strong>输出</strong>:9<br><strong>解释</strong>:<br>小偷一晚能够盗取的最高金额 = 4 + 5 = 9.</p></blockquote><h4 id="解法1-2"><a href="#解法1-2" class="headerlink" title="解法1"></a>解法1</h4><p>第三题相对与上一题有时一个提升，是将树和dp算法结合到了一起，通常这样的关于树的dp算法，我们可以用dfs来解决。</p><p>对于树中的每个节点我们可以存储他的两个状态，一个状态是这个房间被偷的情况下，它的左右两个节点一定没有被偷，以这个房间为根节点的树所获取的最大金额，那么这个状态的最大金额selected = left.notSelected+ right.notSelected+ root.val;<br>第二个状态是这个房间没有被偷的情况，那么他的左右两个节点可能被偷了，也可能没有被偷。那么没有被偷的这个状态可以被表示为：notSelected = Math.max(left.selected,ledt.notSelected)+ Math.max(right.selected, right.notSelected);</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> []rootState = dfs(root);</span><br><span class="line">        <span class="keyword">return</span> Math.max(rootState[<span class="number">0</span>], rootState[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] dfs(TreeNode node)&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> [] l = dfs(node.left);</span><br><span class="line">        <span class="keyword">int</span> [] r = dfs(node.right);</span><br><span class="line">        <span class="keyword">int</span> selected = node.val + l[<span class="number">1</span>] + r[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> notSelected =Math.max(l[<span class="number">0</span>],l[<span class="number">1</span>])+ Math.max(r[<span class="number">0</span>], r[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;selected,notSelected&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h3&gt;&lt;p&gt;打家劫舍系列一共有三个题目，算是比较经典的dp的题目，我去年做过一遍今年在刷每日一题的时候又重新回顾一下这三个题目，对我的帮助还是收益满多的
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://qq19971017.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://qq19971017.github.io/tags/leetcode/"/>
    
      <category term="dp" scheme="https://qq19971017.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>leetcode——两数相加</title>
    <link href="https://qq19971017.github.io/2020/08/04/leetcode%E2%80%94%E2%80%94%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <id>https://qq19971017.github.io/2020/08/04/leetcode%E2%80%94%E2%80%94%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</id>
    <published>2020-08-04T04:52:00.000Z</published>
    <updated>2020-08-04T05:02:33.703Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>请设计一个算法完成两个超长正整数的加法。</p><h4 id="接口说明"><a href="#接口说明" class="headerlink" title="接口说明"></a>接口说明</h4><p>/*<br>请设计一个算法完成两个超长正整数的加法。<br>输入参数：<br>String addend：加数<br>String augend：被加数<br>返回值：加法结果<br>*/</p><p>public String AddLongInteger(String addend, String augend)<br>{<br>/<em>在这里实现功能</em>/</p><p>return null;<br>}</p><p>本题有多组输入数据，请使用while(cin&gt;&gt;)等方式读取</p><h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h4><ul><li>输入两个字符串数字</li></ul><h4 id="输出描述："><a href="#输出描述：" class="headerlink" title="输出描述："></a>输出描述：</h4><ul><li>输出相加后的结果，string型</li></ul><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><p>输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">99999999999999999999999999999999999999999999999999</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100000000000000000000000000000000000000000000000000</span></span><br></pre></td></tr></table></figure><h4 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h4><p>这个题目第一次做的时候是在去年做网易的笔试题目的时候，当时用的语言还是c++，但是无从下手，不知道该怎么解决这个问题，昨天刷leetcode每日一题的时候，又重新看到了这个题目，所以很系统的了解一下应该如何去处理这样的题目，因为leetcode只需要写算法，不需要整个写输入输出，所以特地去牛客网上找到相同的题目又重新写了一遍。</p><p>算法其实不难，但是我们整体用到的知识点就是如何从尾部相加，我们用两个指针i，j分别指向加数和被加数的尾部，然后一个个相加，并用StringBuilder存储结果，最后将StringBuilder逆序并且转化为String类型。下面提供一个我自己写的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span>(sc.hasNext())&#123;</span><br><span class="line">            String  add1 = sc.nextLine();</span><br><span class="line">            String add2 = sc.nextLine();</span><br><span class="line">            String res = AddLongInteger(add1, add2);</span><br><span class="line">            System.out.println(res);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">AddLongInteger</span><span class="params">(String add1, String add2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = add1.length();</span><br><span class="line">        <span class="keyword">int</span> n = add2.length();</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> i=m-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j = n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&gt;=<span class="number">0</span> || j&gt;=<span class="number">0</span> || c ==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> a1 = i&gt;=<span class="number">0</span>?add1.charAt(i)-<span class="string">'0'</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> a2 = j&gt;=<span class="number">0</span>?add2.charAt(j)-<span class="string">'0'</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> sum = a1+ a2+ c;</span><br><span class="line">            sb.append(sum %<span class="number">10</span>);</span><br><span class="line">            c = sum/<span class="number">10</span>;</span><br><span class="line">            i--;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;请设计一个算法完成两个超长正整数的加法。&lt;/p&gt;
&lt;h4 id=&quot;接口说明&quot;&gt;&lt;a href=&quot;#接口说明&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://qq19971017.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://qq19971017.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>JAVA String详解</title>
    <link href="https://qq19971017.github.io/2020/08/01/JAVA-String%E8%AF%A6%E8%A7%A3/"/>
    <id>https://qq19971017.github.io/2020/08/01/JAVA-String%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-08-01T06:06:00.000Z</published>
    <updated>2020-08-02T09:49:54.123Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-String概念"><a href="#一-String概念" class="headerlink" title="一. String概念"></a>一. String概念</h3><p>String 是java中对字符串的一种表达方式，这是一个示例对象，并不属于常见的8中基本类型，和char[]也有一定的区别。</p><h4 id="1-String特性"><a href="#1-String特性" class="headerlink" title="1.String特性"></a>1.String特性</h4><p>String有三个特性。</p><ul><li><p>不可变性：从JDK文档中我们可以看到，String是常量的，这就意味着当我们对String重新赋值的时候，需要重写指定内存区域进行赋值，不能对原有的内存地址中的value进行修改。当对现有的字符串进行拼接的时候，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。当我们调用String的replace()方法进行修改的时候，同样的也不能直接修改</p></li><li><p>final 修饰：这意味这String是不可以被继承的，这也增加了String的安全性。实现Serializable接口：表示字符串支持序列化，实现了ComparaBle接口：表示String可以比较大小；</p></li><li><p>在JVM中维护了一个字符串常量池，用于存放字符串常量，这个对于我们深入理解String是非常重要的，至于字符串常量池的版本变化，我在之前的方法区中有提到过，大家可以去看一下。通过字面量的方式(区别与new)给一个字符串赋值，此时的字符串值声明在字符串常量池中。当然根据字符串常量池的特性，常量池中是不会存放相同的值，当我们创建两个具有相同字面量的字符串时，比如</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">"abc"</span>;</span><br><span class="line">String b = <span class="string">"abc"</span>;</span><br></pre></td></tr></table></figure><p>因为字符串a和字符串b被同一个字面量创建，当a被创建的时候，会先检查字符串常量池中是否有“abc”，如果没有则开辟一个空间并把“abc”存放到这个地址上，而当b被创建的时候，检查常量池上已经有“abc”了，所以直接把指针指向该地址。实际上a和b指向的是同一个地址。</p><h4 id="2-String内存分配"><a href="#2-String内存分配" class="headerlink" title="2.String内存分配"></a>2.String内存分配</h4><p>在Java语言中，有8种基本类型，和一种比较特殊的类型String，这些类型为了使他们在运行过程中速度更快，更节省内存，都提供了一种常量池的概念。<br>常量池就是类似一个Java系统级别的提供的缓存。8中基本类型的常量池都是系统协调的，String类型的常量池比较特殊。它主要使用的方法有两种：</p><ul><li>直接使用双引号声明出来的String对象会直接存储在常量池中。</li><li>如果不是用双引号声明的String对象，可以使用String提供的intern()方法。</li></ul><h3 id="String操作"><a href="#String操作" class="headerlink" title="String操作"></a>String操作</h3><p>String操作有：字符串的创建、拼接、比较等几个比较常用的方法，这些方法的一些用法因为String的特殊性，经常被当作笔试的题目，我们接下来就重点讲解这几个操作。</p><h4 id="1-String创建"><a href="#1-String创建" class="headerlink" title="1.String创建"></a>1.String创建</h4><p>String的创建有两种方法，一种是使用字面量赋值，比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">"abc"</span>;</span><br><span class="line">String b = <span class="string">"abc"</span>;</span><br></pre></td></tr></table></figure><p>这种方式创建字符串，会直接在常量池中创建对象，栈对象a和b分别用指针指向该字符串常量池中的常量。</p><p>另一种方式是使用常用的new关键字创建，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String c = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br></pre></td></tr></table></figure><p>这种方式创建的字符串会先在堆中开辟一个空间，并创建字符串对象c，这个对象的value为“abc”，同时会检查常量池是否含有“abc”字符串，如果没有的话会重新创建一个字符串常量“abc”。</p><p>总结来说第一种创建方法指针会直接指向字符串常量池相当于a-&gt;”abc”,b-&gt;”abc”，第二种方式首先会在堆中创建一个c的String对象，它的value是“abc”。 同时如果这个字符串在常量池中不存在，会在常量池中创建这个String对象“abc”；</p><p>我们用下图表示，两者的区别：</p><p><img src="/images/pasted-53.png" alt="upload successful"></p><p>所以我们可以看到这样的面试题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">stringTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String a = <span class="string">"abc"</span>;</span><br><span class="line">        String b = <span class="string">"abc"</span>;</span><br><span class="line">        String c = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">        System.out.println(a == b);</span><br><span class="line">        System.out.println(a == c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回的结果是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure><h4 id="2-String拼接"><a href="#2-String拼接" class="headerlink" title="2.String拼接"></a>2.String拼接</h4><p>常量池的拼接遵守以下规则：</p><ul><li>1.常量和常量的拼接结果在常量池中，原理是编译期优化。</li><li>2.常量池中不会存在相同内容的常量。</li><li><ol start="3"><li>只要其中有一个是变量，结果就在堆中。变量拼接的原理是StringBuilder。</li></ol></li><li>4.如果拼接的结果调用intern()方法，则主动将常量池中还没有的字符串对象放在常量池中，并返回此对象地址。</li></ul><p>下面我们根据一些笔试的题目看一下这些规则：<br>面试题一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String a = <span class="string">"a"</span> + <span class="string">"b"</span> + <span class="string">"c"</span>;</span><br><span class="line">    String b = <span class="string">"abc"</span>;</span><br><span class="line">    System.out.println(a ==b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里a是由三个字符串拼接的结果，我们根据规则一可以得到拼接结果“abc”会放在常量池中，所以结果阿返回的是true，并且我们根据编译的class文件可以看到，String a = “a” + “b” + “c”;直接会被优化成String a = “abc”;所以最后执行的代码是String a = “abc”；这样我们可以和我们之间的知识对应。</p><p>面试题二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String s1 = <span class="string">"a"</span>;</span><br><span class="line">    String s2 = <span class="string">"b"</span>;</span><br><span class="line">    String s3 = <span class="string">"ab"</span>;</span><br><span class="line">    String s4 = <span class="string">"a"</span>+<span class="string">"b"</span>;</span><br><span class="line">    String s5 = s1+<span class="string">"b"</span>;</span><br><span class="line">    String s6 = <span class="string">"a"</span>+s2;</span><br><span class="line">    String s7 = s1+s2;</span><br><span class="line"></span><br><span class="line">    System.out.println(s3 == s4); <span class="comment">//true</span></span><br><span class="line">    System.out.println(s3 == s5); <span class="comment">//false</span></span><br><span class="line">    System.out.println(s3 == s7); <span class="comment">//false</span></span><br><span class="line">    System.out.println(s5 == s6); <span class="comment">//false</span></span><br><span class="line">    System.out.println(s5 == s7); <span class="comment">//false</span></span><br><span class="line">    System.out.println(s6 == s7); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由上面的规则得到，只要其中有一个是变量，得到的结果就存放在堆中，而不是在常量池中，所以除了当一个返回的是true，其他的返回的都是false。</p><p>当我们使用变量进行拼接的时候，我们使用的底层是StringBilder，比如上面的String s7 = s1+s2;就相当于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">sb.append(<span class="string">"a"</span>);</span><br><span class="line">sb.append(<span class="string">"b"</span>);</span><br><span class="line">sb.toString();</span><br></pre></td></tr></table></figure><p>StringBuilder的toString操作实际上是一个new String的操作。</p><p>当然不是所有的变量拼接操作都是使用StringBuilder操作的，当我们对变量声明为final的时候，变量的拼接就会编程常量的拼接，这样底层就不会用到SringBuilder，而是由编译器优化直接使用常量池进行赋值。</p><p>这里同时也变相说明了String的拼接操作会比StringBuilder的拼接操作效率低，因为String在进行拼接操作的过程中会new StringBuilder对象，然后再进行拼接操作，而StringBuilder直接进行拼接，节省了空间和时间从而提高效率。</p><p>讲完上面两个String的创建和拼接，我们来看一个综合的笔试面试题目。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">     String a = <span class="keyword">new</span> String(<span class="string">"a"</span>)+ <span class="keyword">new</span> String(<span class="string">"b"</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>我们来计算一下这里到底创建了多少个对象，我们先说答案，再说为什么，这里一共生成了6个对象。<br>首先是会生成一个StringBuilder对象用于拼接，接着对于new String(a)会在堆中以及常量分别生成String对象，以及对于new String(“b”)同样的会生成两个对象，最后调用StringBuilder的toString方法，会生成一个String对象。这里要注意，toString方法并不会在常量池中生成对象，所以常量池中并没有“ab”的字符串对象。</p><h4 id="3-intern"><a href="#3-intern" class="headerlink" title="3.intern()"></a>3.intern()</h4><p>String字符串还有一个比较特殊的API：intern()，当一个字符串s调用这个函数的时候，会从字符串常量池中寻找是否有与s值相等的字符串，如果找到了，就返回常量池中的字符串。否则，将该字符串加入到常量池中，并且返回对该常量池中这个字符串的引用。</p><p>比如说：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String info = <span class="keyword">new</span> String(<span class="string">"1111"</span>).intern();</span><br></pre></td></tr></table></figure><p>也就是说，如果在任意字符串上调用String.intern方法，那么返回结果所指向的那个类实例，必须和直接以常量形式出现的字符串实例完全相同，因此，下列表达式的值必定是true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"a"</span>+<span class="string">"b"</span>+<span class="string">"c"</span>&#125;.intern()== “abc”；</span><br></pre></td></tr></table></figure><p>通俗来讲，Intern就是确保相同值的字符串在内存中只用一份拷贝，这样可以节约内存空间，加快字符串操作任务的执行速度。注意这个值会被存放在字符串内部池。</p><p>这里我们仍然用一个面试题来看一下intern()方法使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String a = <span class="keyword">new</span> String(<span class="string">"a"</span>) + <span class="keyword">new</span> String(<span class="string">"b"</span>);</span><br><span class="line">    a.intern();</span><br><span class="line">    String b = <span class="string">"ab"</span>;</span><br><span class="line">    System.out.println(a == b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题的答案其实根据不同的jdk版本是不一样的，在jdk1.6以前，因为之前说过String a = new String(“a”) + new String(“b”);并没有在常量池中创建“ab”的字符串，且a指向的是堆空间地址，所以返回的是false，但是在jdk7及以后，intern同样会在常量池中寻找“ab”对象，但是因为在堆中已经创建了“ab”的字符串对象，所以当b创建对象的时候，常量池不需要在常量池中重新创建“ab”对象了，可以直接存储堆中的引用，这个引用指向s3引用的对象，也就是说引用地址相同。所以结果最终返回的是true。</p><p>当我们将a.intern();和String b = “ab”;调换一下顺序之后，结果又会发生变化，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String a = <span class="keyword">new</span> String(<span class="string">"a"</span>) + <span class="keyword">new</span> String(<span class="string">"b"</span>);</span><br><span class="line">    String b = <span class="string">"ab"</span>;</span><br><span class="line">    a.intern();</span><br><span class="line">    System.out.println(a == b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为String b = “ab”;并不会像a.intern()一样智能会选择直接引用堆中相同的对象，所以结果返回的就是false；</p><h4 id="4-String-比较"><a href="#4-String-比较" class="headerlink" title="4.String 比较"></a>4.String 比较</h4><p>String的比较主要有两种，一种是==一种是equals。</p><ul><li>使用==号：用于比较对象引用的内存地址是否相同。</li><li>使用equals方法：在Object类中和==号相同，但在自定义类中，建议覆盖equals方法去实现比较自己内容的细节；由于String类覆盖已经覆盖了equals方法，所以其比较的是字符内容。</li></ul><h3 id="三-StringBuffer-和-StringBuilder"><a href="#三-StringBuffer-和-StringBuilder" class="headerlink" title="三. StringBuffer 和 StringBuilder"></a>三. StringBuffer 和 StringBuilder</h3><p>StringBuffer和StringBuilder常常用于解决字符串拼接的问题，他们都比String直接凭借效率高很多。</p><p>先来分别使用String/StringBuilder/StringBuffer来拼接30000次字符串，对比各自损耗的时间，经过测试发现：</p><p>String做字符串拼接的时候，耗时最高，性能极低，原因是String内容是不可变的，每次内容改变都会在内存中创建新的对象。</p><p>性能最好的是StringBuilder，其次是StringBuffer，最后是String。StringBuilder和StringBuffer区别并不是很大，也有可能是测试次数还不够吧。感兴趣的小伙伴可以增加拼接次数来看看。代码很简单，就不展示出来了。</p><p>所以在开发中拼接字符串时，优先使用StringBuffer/StringBuilder，不到万不得已，不要轻易使用String。</p><h4 id="StringBuilder以及StringBuffer的区别"><a href="#StringBuilder以及StringBuffer的区别" class="headerlink" title="StringBuilder以及StringBuffer的区别"></a>StringBuilder以及StringBuffer的区别</h4><p>StringBuffer和StringBuilder都表示可变的字符串，两种’的功能方法都是相同的。但唯一的区别：</p><ul><li>StringBuffer：StringBuffer中的方法都使用了synchronized修饰符，表示同步操作，在多线程并发的时候可以保证线程安全，但在保证线程安全的时候，对其性能有一定影响，会降低其性能。</li><li>StringBuilder：StringBuilder中的方法都没有使用了synchronized修饰符，线程不安全，正因为如此，其性能较高。</li></ul><p>对并发安全没有很高要求的情况下，建议使用StringBuilder，因为其性能很高。像这样的情况会较多些。使用StringBuilder无参数的构造器，在底层创建了一个长度为16的char数组：</p><p><img src="/images/pasted-54.png" alt="upload successful"></p><p>此时该数组只能存储16个字符，如果超过了16个字符，会自动扩容（创建长度更大的数组,再把之前的数组拷贝到新数组），此时性能极低；如果事先知道大概需要存储多少字符，可以通过构造器来设置字符的初始值：</p><p><img src="/images/pasted-55.png" alt="upload successful"></p><h3 id="四-参考资料"><a href="#四-参考资料" class="headerlink" title="四. 参考资料"></a>四. 参考资料</h3><p><a href="https://www.bilibili.com/video/BV1PJ411n7xZ?t=428&p=131" target="_blank" rel="noopener">尚硅谷2020最新版宋红康JVM教程持续更新中(java虚拟机详解，jvm从入门到精通)</a></p><p><a href="https://segmentfault.com/a/1190000022468585" target="_blank" rel="noopener">「JAVA」细述合理创建字符串，分析字符串的底层存储，你不该错过</a></p><p><a href="https://blog.csdn.net/weixin_40304387/article/details/81071816" target="_blank" rel="noopener">字符串常量池深入解析</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-String概念&quot;&gt;&lt;a href=&quot;#一-String概念&quot; class=&quot;headerlink&quot; title=&quot;一. String概念&quot;&gt;&lt;/a&gt;一. String概念&lt;/h3&gt;&lt;p&gt;String 是java中对字符串的一种表达方式，这是一个示例对象，并不
      
    
    </summary>
    
    
      <category term="字符串" scheme="https://qq19971017.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="字符串" scheme="https://qq19971017.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>(转)JAVA 内存泄露详解（原因、例子及解决）</title>
    <link href="https://qq19971017.github.io/2020/06/16/%E8%BD%AC-JAVA-%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E8%AF%A6%E8%A7%A3%EF%BC%88%E5%8E%9F%E5%9B%A0%E3%80%81%E4%BE%8B%E5%AD%90%E5%8F%8A%E8%A7%A3%E5%86%B3%EF%BC%89/"/>
    <id>https://qq19971017.github.io/2020/06/16/%E8%BD%AC-JAVA-%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E8%AF%A6%E8%A7%A3%EF%BC%88%E5%8E%9F%E5%9B%A0%E3%80%81%E4%BE%8B%E5%AD%90%E5%8F%8A%E8%A7%A3%E5%86%B3%EF%BC%89/</id>
    <published>2020-06-16T06:17:00.000Z</published>
    <updated>2020-06-16T06:34:47.228Z</updated>
    
    <content type="html"><![CDATA[<p>文章转自<a href="http://blog.csdn.net/anxpp/article/details/51325838" target="_blank" rel="noopener">JAVA 内存泄露详解（原因、例子及解决）</a></p><p>Java的一个重要特性就是通过垃圾收集器(GC)自动管理内存的回收，而不需要程序员自己来释放内存。理论上Java中所有不会再被利用的对象所占用的内存，都可以被GC回收，但是Java也存在内存泄露，但它的表现与C++不同。</p><h3 id="JAVA中的内存管理"><a href="#JAVA中的内存管理" class="headerlink" title="JAVA中的内存管理"></a>JAVA中的内存管理</h3><p>要了解Java中的内存泄露，首先就得知道Java中的内存是如何管理的。</p><p>在Java程序中，我们通常使用new为对象分配内存，而这些内存空间都在堆（Heap）上。</p><p>下面看一个示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Simple</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Object object1 = <span class="keyword">new</span> Object();<span class="comment">//obj1</span></span><br><span class="line">        Object object2 = <span class="keyword">new</span> Object();<span class="comment">//obj2</span></span><br><span class="line">        object2 = object1;</span><br><span class="line">        <span class="comment">//...此时，obj2是可以被清理的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <strong>Java使用有向图的方式进行内存管理</strong></p><p> 在有向图中，我们叫作obj1是可达的，obj2就是不可达的，显然不可达的可以被清理。</p><p>   内存的释放，也即清理那些不可达的对象，是由GC决定和执行的，所以GC会监控每一个对象的状态，包括申请、引用、被引用和赋值等。<strong>释放对象的根本原则就是对象不会再被使用：</strong></p><ul><li><p>给对象赋予了空值null，之后再没有调用过。</p></li><li><p>另一个是给对象赋予了新值，这样重新分配了内存空间。<br>通常，会认为在堆上分配对象的代价比较大，但是GC却优化了这一操作：C++中，在堆上分配一块内存，会查找一块适用的内存加以分配，如果对象销毁，这块内存就可以重用；而Java中，就想一条长的带子，每分配一个新的对象，Java的“堆指针”就向后移动到尚未分配的区域。所以，Java分配内存的效率，可与C++媲美。</p><p>但是这种工作方式有一个问题：如果频繁的申请内存，资源将会耗尽。这时GC就介入了进来，它会回收空间，并使堆中的对象排列更紧凑。这样，就始终会有足够大的内存空间可以分配。</p><p>gc清理时的引用计数方式：当引用连接至新对象时，引用计数+1；当某个引用离开作用域或被设置为null时，引用计数-1，GC发现这个计数为0时，就回收其占用的内存。这个开销会在引用程序的整个生命周期发生，并且不能处理循环引用的情况。所以这种方式只是用来说明GC的工作方式，而不会被任何一种Java虚拟机应用。</p><p>多数GC采用一种自适应的清理方式（加上其他附加的用于提升速度的技术），主要依据是找出任何“活”的对象，然后采用“自适应的、分代的、停止-复制、标记-清理”式的垃圾回收器。具体不介绍太多，这不是本文重点。</p></li></ul><h3 id="JAVA-中的内存泄露"><a href="#JAVA-中的内存泄露" class="headerlink" title="JAVA 中的内存泄露"></a>JAVA 中的内存泄露</h3><p>Java中的内存泄露，广义并通俗的说，就是：不再会被使用的对象的内存不能被回收，就是内存泄露。</p><p>Java中的内存泄露与C++中的表现有所不同。</p><p>在C++中，所有被分配了内存的对象，不再使用后，都必须程序员手动的释放他们。所以，每个类，都会含有一个析构函数，作用就是完成清理工作，如果我们忘记了某些对象的释放，就会造成内存泄露。</p><p>但是在Java中，我们不用（也没办法）自己释放内存，无用的对象由GC自动清理，这也极大的简化了我们的编程工作。但，实际有时候一些不再会被使用的对象，在GC看来不能被释放，就会造成内存泄露。</p><p>我们知道，对象都是有生命周期的，有的长，有的短，<strong>如果长生命周期的对象持有短生命周期的引用，就很可能会出现内存泄露。</strong>我们举一个简单的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Simple</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    Object object;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        object = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="comment">//...其他代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的object实例，其实我们期望它只作用于method1()方法中，且其他地方不会再用到它，但是，当method1()方法执行完成后，object对象所分配的内存不会马上被认为是可以被释放的对象，只有在Simple类创建的对象被释放后才会被释放，严格的说，这就是一种内存泄露。解决方法就是将object作为method1()方法中的局部变量。当然，如果一定要这么写，可以改为这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Simple</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    Object object;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        object = <span class="keyword">new</span> Object();</span><br><span class="line">        <span class="comment">//...其他代码</span></span><br><span class="line">        object = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样，之前“new Object()”分配的内存，就可以被GC回收。</p><p>到这里，Java的内存泄露应该都比较清楚了。下面再进一步说明：</p><ul><li>在堆中的分配的内存，在没有将其释放掉的时候，就将所有能访问这块内存的方式都删掉（如指针重新赋值），这是针对c++等语言的，Java中的GC会帮我们处理这种情况，所以我们无需关心。</li><li>在内存对象明明已经不需要的时候，还仍然保留着这块内存和它的访问方式（引用），这是所有语言都有可能会出现的内存泄漏方式。编程时如果不小心，我们很容易发生这种情况，如果不太严重，可能就只是短暂的内存泄露。</li></ul><h3 id="一些容易发生内存泄露的例子和解决方法"><a href="#一些容易发生内存泄露的例子和解决方法" class="headerlink" title="一些容易发生内存泄露的例子和解决方法"></a>一些容易发生内存泄露的例子和解决方法</h3><p>像上面例子中的情况很容易发生，也是我们最容易忽略并引发内存泄露的情况，解决的原则就是尽量减小对象的作用域（比如android studio中，上面的代码就会发出警告，并给出的建议是将类的成员变量改写为方法内的局部变量）以及手动设置null值。</p><p> 至于作用域，需要在我们编写代码时多注意；null值的手动设置，我们可以看一下Java容器LinkedList源码（可参考：<a href="https://blog.csdn.net/anxpp/article/details/51203591" target="_blank" rel="noopener">Java之LinkedList源码解读（JDK 1.8）</a>）的删除指定节点的内部方法：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除指定节点并返回被删除的元素值</span></span><br><span class="line"><span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取当前值和前后节点</span></span><br><span class="line">    <span class="keyword">final</span> E element = x.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = x.next;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class="line">    <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">        first = next; <span class="comment">//如果前一个节点为空(如当前节点为首节点)，后一个节点成为新的首节点</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        prev.next = next;<span class="comment">//如果前一个节点不为空，那么他先后指向当前的下一个节点</span></span><br><span class="line">        x.prev = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        last = prev; <span class="comment">//如果后一个节点为空(如当前节点为尾节点)，当前节点前一个成为新的尾节点</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next.prev = prev;<span class="comment">//如果后一个节点不为空，后一个节点向前指向当前的前一个节点</span></span><br><span class="line">        x.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    x.item = <span class="keyword">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>除了修改节点间的关联关系，我们还要做的就是赋值为null的操作，不管GC何时会开始清理，我们都应及时的将无用的对象标记为可被清理的对象。</p><p>我们知道Java容器ArrayList是数组实现的（可参考：<a href="https://blog.csdn.net/anxpp/article/details/51203591" target="_blank" rel="noopener">Java之ArrayList源码解读（JDK 1.8）</a>），如果我们要为其写一个pop()（弹出）方法，可能会是这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(size == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> (E) elementData[--size];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写法很简洁，但这里却会造成内存溢出：elementData[size-1]依然持有E类型对象的引用，并且暂时不能被GC回收。我们可以如下修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(size == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        E e = (E) elementData[--size];</span><br><span class="line">        elementData[size] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们写代码并不能一味的追求简洁，首要是保证其正确性。</p><h3 id="容器使用时的内存泄露"><a href="#容器使用时的内存泄露" class="headerlink" title="容器使用时的内存泄露"></a>容器使用时的内存泄露</h3><p>在很多文章中可能看到一个如下内存泄露例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vector v = <span class="keyword">new</span> Vector();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;<span class="number">100</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Object o = <span class="keyword">new</span> Object();</span><br><span class="line">    v.add(o);</span><br><span class="line">    o = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能很多人一开始并不理解，下面我们将上面的代码完整一下就好理解了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Vector vector = <span class="keyword">new</span> Vector();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;<span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Object object = <span class="keyword">new</span> Object();</span><br><span class="line">        vector.add(object);</span><br><span class="line">        object = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...对vector的操作</span></span><br><span class="line">    <span class="comment">//...与vector无关的其他操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里内存泄露指的是在对vector操作完成之后，执行下面与vector无关的代码时，如果发生了GC操作，这一系列的object是没法被回收的，而此处的内存泄露可能是短暂的，因为在整个method()方法执行完成后，那些对象还是可以被回收。这里要解决很简单，手动赋值为null即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Vector vector = <span class="keyword">new</span> Vector();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;<span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Object object = <span class="keyword">new</span> Object();</span><br><span class="line">        vector.add(object);</span><br><span class="line">        object = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...对v的操作</span></span><br><span class="line">    vector = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//...与v无关的其他操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 上面Vector已经过时了，不过只是使用老的例子来做内存泄露的介绍。我们使用容器时很容易发生内存泄露，就如上面的例子，不过上例中，容器时方法内的局部变量，造成的内存泄漏影响可能不算很大（但我们也应该避免），但是，如果这个容器作为一个类的成员变量，甚至是一个静态（static）的成员变量时，就要更加注意内存泄露了。</p><p>下面也是一种使用容器时可能会发生的错误:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionMemory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String s[])</span></span>&#123;</span><br><span class="line">        Set&lt;MyObject&gt; objects = <span class="keyword">new</span> LinkedHashSet&lt;MyObject&gt;();</span><br><span class="line">        objects.add(<span class="keyword">new</span> MyObject());</span><br><span class="line">        objects.add(<span class="keyword">new</span> MyObject());</span><br><span class="line">        objects.add(<span class="keyword">new</span> MyObject());</span><br><span class="line">        System.out.println(objects.size());</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            objects.add(<span class="keyword">new</span> MyObject());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span></span>&#123;</span><br><span class="line">    <span class="comment">//设置默认数组长度为99999更快的发生OutOfMemoryError</span></span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">99999</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的代码将很快报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">at java.util.ArrayList.&lt;init&gt;(ArrayList.java:152)</span><br><span class="line">at com.anxpp.memory.MyObject.&lt;init&gt;(CollectionMemory.java:21)</span><br><span class="line">at com.anxpp.memory.CollectionMemory.main(CollectionMemory.java:16)</span><br></pre></td></tr></table></figure><p>  如果足够了解Java的容器，上面的错误是不可能发生的。这里也推荐一篇本人介绍Java容器的文章：…</p><p>  容器Set只存放唯一的元素，是通过对象的equals()方法来比较的，但是Java中所有类都直接或间接继承至Object类，Object类的equals()方法比较的是对象的地址，上例中，就会一直添加元素直到内存溢出。</p><p>  所以，上例严格的说是容器的错误使用导致的内存溢出。</p><p>  就Set而言，remove()方法也是通过equals()方法来删除匹配的元素的，如果一个对象确实提供了正确的equals()方法，但是切记不要在修改这个对象后使用remove(Object o)，这也可能会发生内存泄露。</p><h3 id="各种提供了close-方法的对象"><a href="#各种提供了close-方法的对象" class="headerlink" title="各种提供了close()方法的对象"></a>各种提供了close()方法的对象</h3><p>比如数据库连接（dataSourse.getConnection()），网络连接(socket)和io连接，以及使用其他框架的时候，除非其显式的调用了其close()方法（或类似方法）将其连接关闭，否则是不会自动被GC回收的。其实原因依然是长生命周期对象持有短生命周期对象的引用。</p><p>可能很多人使用过Hibernate，我们操作数据库时，通过SessionFactory获取一个session：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Session session=sessionFactory.openSession();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.close();</span><br></pre></td></tr></table></figure><p> SessionFactory就是一个长生命周期的对象，而session相对是个短生命周期的对象，但是框架这么设计是合理的：它并不清楚我们要使用session到多久，于是只能提供一个方法让我们自己决定何时不再使用。</p><p> 因为在close()方法调用之前，可能会抛出异常而导致方法不能被调用，我们通常使用try语言，然后再finally语句中执行close()等清理工作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">    session=sessionFactory.openSession();</span><br><span class="line">    <span class="comment">//...其他操作</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单例模式导致的内存泄露"><a href="#单例模式导致的内存泄露" class="headerlink" title="单例模式导致的内存泄露"></a>单例模式导致的内存泄露</h3><p>单例模式，很多时候我们可以把它的生命周期与整个程序的生命周期看做差不多的，所以是一个长生命周期的对象。如果这个对象持有其他对象的引用，也很容易发生内存泄露。</p><h3 id="内部类和外部模块的引用"><a href="#内部类和外部模块的引用" class="headerlink" title="内部类和外部模块的引用"></a>内部类和外部模块的引用</h3><p>其实原理依然是一样的，只是出现的方式不一样而已。</p><h3 id="与清理相关的方法"><a href="#与清理相关的方法" class="headerlink" title="与清理相关的方法"></a>与清理相关的方法</h3><p>本节主要谈论gc()和finalize()方法。</p><h4 id="gc"><a href="#gc" class="headerlink" title="gc()"></a>gc()</h4><p>对于程序员来说，GC基本是透明的，不可见的。运行GC的函数是System.gc()，调用后启动垃圾回收器开始清理。</p><p>但是根据Java语言规范定义， 该函数不保证JVM的垃圾收集器一定会执行。因为，不同的JVM实现者可能使用不同的算法管理GC。通常，GC的线程的优先级别较低。</p><p>JVM调用GC的策略也有很多种，有的是内存使用到达一定程度时，GC才开始工作，也有定时执行的，有的是平缓执行GC，有的是中断式执行GC。但通常来说，我们不需要关心这些。除非在一些特定的场合，GC的执行影响应用程序的性能，例如对于基于Web的实时系统，如网络游戏等，用户不希望GC突然中断应用程序执行而进行垃圾回收，那么我们需要调整GC的参数，让GC能够通过平缓的方式释放内存，例如将垃圾回收分解为一系列的小步骤执行，Sun提供的HotSpot JVM就支持这一特性。</p><h4 id="finalize"><a href="#finalize" class="headerlink" title="finalize()"></a>finalize()</h4><p> finalize()是Object类中的方法。</p><p>了解C++的都知道有个析构函数，但是注意，finalize()绝不等于C++中的析构函数。</p><p>Java编程思想中是这么解释的：一旦GC准备好释放对象所占用的的存储空间，将先调用其finalize()方法，并在下一次GC回收动作发生时，才会真正回收对象占用的内存，所以一些清理工作，我们可以放到finalize()中。</p><p>该方法的一个重要的用途是：当在java中调用非java代码（如c和c++）时，在这些非java代码中可能会用到相应的申请内存的操作（如c的malloc()函数），而在这些非java代码中并没有有效的释放这些内存，就可以使用finalize()方法，并在里面调用本地方法的free()等函数。</p><p>所以finalize()并不适合用作普通的清理工作。</p><p>不过有时候，该方法也有一定的用处：</p><p>如果存在一系列对象，对象中有一个状态为false，如果我们已经处理过这个对象，状态会变为true，为了避免有被遗漏而没有处理的对象，就可以使用finalize()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyObject</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">boolean</span> state = <span class="keyword">false</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deal</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...一些处理操作</span></span><br><span class="line">        state = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!state)&#123;</span><br><span class="line">            System.out.println(<span class="string">"ERROR:"</span> + <span class="string">"对象未处理！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是从很多方面了解，该方法都是被推荐不要使用的，并被认为是多余的。</p><p>总的来说，内存泄露问题，还是编码不认真导致的，我们并不能责怪JVM没有更合理的清理。]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;文章转自&lt;a href=&quot;http://blog.csdn.net/anxpp/article/details/51325838&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JAVA 内存泄露详解（原因、例子及解决）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Java的一个
      
    
    </summary>
    
    
      <category term="JVM" scheme="https://qq19971017.github.io/categories/JVM/"/>
    
    
      <category term="JVM" scheme="https://qq19971017.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JVM学习笔记(5)——方法区</title>
    <link href="https://qq19971017.github.io/2020/06/15/JVM/"/>
    <id>https://qq19971017.github.io/2020/06/15/JVM/</id>
    <published>2020-06-15T12:21:00.000Z</published>
    <updated>2020-08-01T06:29:37.873Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天把宋红康老师的JVM内存结构的方法区看完了，至此所有的内存结构都已经系统的学习一遍了，我也在博客中整理和回顾一下我的学习笔记。ps：本来打算昨天就写blog的，结果在准备今天项目的时候遇到了一些问题，真心发现硬件实践要比算法难很多，所以也给我一个警惕，不仅要关注上层的算法知识，也要多关注底层的硬件，多考虑如何将算法落地。</p></blockquote><h3 id="一-方法区概念"><a href="#一-方法区概念" class="headerlink" title="一. 方法区概念"></a>一. 方法区概念</h3><p><img src="/images/pasted-46.png" alt="upload successful"><br>我们之前也提到了JVM的内存结构，分为堆、方法区、本地方法栈、虚拟机栈、程序计数器。如果按照线程是否共享来说，方法区和堆是线程共享的，而本地方法栈、虚拟机栈、程序计数器都是线程私有的。方法区和堆一样，在JVM启动的时候就被创建了，并且它的实际物理内存空间中和堆一样是不连续的。方法区是用于存储已被虚拟机加载的类信息、常量、静态变量、计时编译器编译后的代码等。方法区的大小决定了系统可以保存多少类，如果系统定义了太多的类，导致方法区的溢出，虚拟机同样会抛出内存异常错误：java.lang.OutOfMemoryError:MetaSpace。</p><p>方法区在java1.8版本之前都是叫做永久代，从1.8开始永久代被弃用，转而变成了元空间，其一些属性也发生了一些变化，在永久代的时候我们需要设置-XX:PermSize -XX:MaxPermSize来分别设置永久代初始值和最大值，当变成元空间之后，不再使用JVM的内存，转而使用本地内存来存储方法区的信息。其默认大小就是本地内存的大小，当然我们仍然可以设置元空间的初始值和最大值，当达到初始值的时候会触发full GC，当到达最大值并且full gc也满足不了需求的时候会触发OOM。比如说我们一直用动态代理创建对象或者一直往常量池加入数据，就有可能发生方法区内存溢出。当然关于触发了OOM，到底是内存泄漏导致的还是内存溢出导致的，这个还需要我们去探讨一下。我们可以看一下知乎的回答<a href="https://www.zhihu.com/question/40560123" target="_blank" rel="noopener">内存泄漏和内存溢出有啥区别？</a>(ps:内存泄漏可能会导致频繁进行full GC)</p><h4 id="1-方法区的内部结构"><a href="#1-方法区的内部结构" class="headerlink" title="1. 方法区的内部结构"></a>1. 方法区的内部结构</h4><p><img src="/images/pasted-47.png" alt="upload successful"><br>我们之前提到了，方法区内部存储有类信息和运行时常量池、字符串常量池、静态变量。其中静态变量和字符串常量池在java1.7之后放在堆中进行处理，后面我们会进行详细的分析。</p><p><img src="/images/pasted-48.png" alt="upload successful"><br>一个经典的堆内部结构还会有域信息和方法信息，但是我们通常将域信息和方法信息放在类型信息中。</p><p><strong>类型信息</strong><br>对每个加载的类型(类class、接口interface、枚举enum、注解annotation)，JVM必须在方法区中存储以下类型信息：</p><ul><li>1.这了类型完整的有效名称(全名=包名、类名)</li><li>2.这个类型的直接父类的完整有效名（对于interface、或者是java.lang.Object都没有父类）</li><li>3.这个类型的修饰符（public abstruct、final的子集）</li><li>4.这个类型的直接接口的一个有序序列</li></ul><p><strong>方法信息</strong><br>JVM必须保存所有方法信息，同域信息一样包括声明顺序</p><ul><li>1.方法名称</li><li>2.方法的返回类型（或void）</li><li>3.方法参数的数量和类型（按顺序）</li><li>4.方法的修饰符（public、private、protected、static、final、synchroized、native、abstract）</li><li>5.方法的字节码（bytecodes）、操作数栈、局部变量表大小（abstract和netive方法除外）</li><li>6.异常表（abstract和native除外），每个异常处理的开始位置、结束位置、代码处理在程序计数器中的偏移位置、被捕获的异常累的常量池检索。</li></ul><p><strong>non-final的类变量</strong><br>静态变量和类变量关联在一起，随着类的加载而加载，他们成为类数据在逻辑上的一部分。类变量被类的所有实例一起分享，即使没有类实例时你也可以访问他。</p><p><img src="/images/pasted-49.png" alt="upload successful"></p><h4 id="2-常量池和运行时常量池"><a href="#2-常量池和运行时常量池" class="headerlink" title="2. 常量池和运行时常量池"></a>2. 常量池和运行时常量池</h4><p>常量池在字节码文件中，运行时常量池在方法区中，这两者还是有一定区别的。</p><p><strong>常量池</strong><br>java原文件中的类、接口，编译后产生一个字节码文件。而Java中的字节码需要数据支持，通常这个数据会很大以至于不能直接存到字节码里面，换另一种方式，可以存到常量池，这个字节码包含指向常量池的引用，我们在动态链接的时候就会把符号引用变成直接引用。</p><p>常量池通常分为字面量和符号引用，字面量比较接近于Java语言层面的常量的概念，比如文本字符串、声明为final的常量值等。而符号引用则属于编译原理方面的概念，包括了下面的三类变量：</p><ul><li>1.类和接口的全限名称</li><li>2.字段的名称和描述符</li><li>3.方法的名称和描述符</li></ul><p>我先来贴一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodInnerStrucTest</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> num1 = <span class="number">23</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String str = <span class="string">"测试方法内部结构"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MethodInnerStrucTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(String o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">20</span>;</span><br><span class="line">        System.out.println(<span class="string">"count ="</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test2</span><span class="params">(<span class="keyword">int</span> cal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> value = <span class="number">39</span>;</span><br><span class="line">            result = value / cal;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var3) &#123;</span><br><span class="line">            var3.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在编译之后通过javap进行反编译，我只将反编译结果汇总的常量池贴出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Constant pool:</span><br><span class="line">   #1 &#x3D; Methodref          #18.#55        &#x2F;&#x2F; java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">   #2 &#x3D; Fieldref           #17.#56        &#x2F;&#x2F; MethodInnerStrucTest.num:I</span><br><span class="line">   #3 &#x3D; Fieldref           #57.#58        &#x2F;&#x2F; java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;</span><br><span class="line">   #4 &#x3D; Class              #59            &#x2F;&#x2F; java&#x2F;lang&#x2F;StringBuilder</span><br><span class="line">   #5 &#x3D; Methodref          #4.#55         &#x2F;&#x2F; java&#x2F;lang&#x2F;StringBuilder.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">   #6 &#x3D; String             #60            &#x2F;&#x2F; count &#x3D;</span><br><span class="line">   #7 &#x3D; Methodref          #4.#61         &#x2F;&#x2F; java&#x2F;lang&#x2F;StringBuilder.append:(Ljava&#x2F;lang&#x2F;String;)Ljava&#x2F;lang&#x2F;StringBuilder;</span><br><span class="line">   #8 &#x3D; Methodref          #4.#62         &#x2F;&#x2F; java&#x2F;lang&#x2F;StringBuilder.append:(I)Ljava&#x2F;lang&#x2F;StringBuilder;</span><br><span class="line">   #9 &#x3D; Methodref          #4.#63         &#x2F;&#x2F; java&#x2F;lang&#x2F;StringBuilder.toString:()Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">  #10 &#x3D; Methodref          #64.#65        &#x2F;&#x2F; java&#x2F;io&#x2F;PrintStream.println:(Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line">  #11 &#x3D; Class              #66            &#x2F;&#x2F; java&#x2F;lang&#x2F;Exception</span><br><span class="line">  #12 &#x3D; Methodref          #11.#67        &#x2F;&#x2F; java&#x2F;lang&#x2F;Exception.printStackTrace:()V</span><br><span class="line">  #13 &#x3D; Class              #68            &#x2F;&#x2F; java&#x2F;lang&#x2F;String</span><br><span class="line">  #14 &#x3D; Methodref          #17.#69        &#x2F;&#x2F; MethodInnerStrucTest.compareTo:(Ljava&#x2F;lang&#x2F;String;)I</span><br><span class="line">  #15 &#x3D; String             #70            &#x2F;&#x2F; 测试方法内部结构</span><br><span class="line">  #16 &#x3D; Fieldref           #17.#71        &#x2F;&#x2F; MethodInnerStrucTest.str:Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">  #17 &#x3D; Class              #72            &#x2F;&#x2F; MethodInnerStrucTest</span><br><span class="line">  #18 &#x3D; Class              #73            &#x2F;&#x2F; java&#x2F;lang&#x2F;Object</span><br><span class="line">  #19 &#x3D; Class              #74            &#x2F;&#x2F; java&#x2F;lang&#x2F;Comparable</span><br><span class="line">  #20 &#x3D; Class              #75            &#x2F;&#x2F; java&#x2F;io&#x2F;Serializable</span><br><span class="line">  #21 &#x3D; Utf8               num</span><br><span class="line">  #22 &#x3D; Utf8               I</span><br><span class="line">  #23 &#x3D; Utf8               num1</span><br><span class="line">  #24 &#x3D; Utf8               ConstantValue</span><br><span class="line">  #25 &#x3D; Integer            23</span><br><span class="line">  #26 &#x3D; Utf8               str</span><br><span class="line">  #27 &#x3D; Utf8               Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">  #28 &#x3D; Utf8               &lt;init&gt;</span><br><span class="line">  #29 &#x3D; Utf8               ()V</span><br><span class="line">  #30 &#x3D; Utf8               Code</span><br><span class="line">  #31 &#x3D; Utf8               LineNumberTable</span><br><span class="line">  #32 &#x3D; Utf8               LocalVariableTable</span><br><span class="line">  #33 &#x3D; Utf8               this</span><br><span class="line">  #34 &#x3D; Utf8               LMethodInnerStrucTest;</span><br><span class="line">  #35 &#x3D; Utf8               compareTo</span><br><span class="line">  #36 &#x3D; Utf8               (Ljava&#x2F;lang&#x2F;String;)I</span><br><span class="line">  #37 &#x3D; Utf8               o</span><br><span class="line">  #38 &#x3D; Utf8               test1</span><br><span class="line">  #39 &#x3D; Utf8               count</span><br><span class="line">  #40 &#x3D; Utf8               test2</span><br><span class="line">  #41 &#x3D; Utf8               (I)I</span><br><span class="line">  #42 &#x3D; Utf8               value</span><br><span class="line">  #43 &#x3D; Utf8               e</span><br><span class="line">  #44 &#x3D; Utf8               Ljava&#x2F;lang&#x2F;Exception;</span><br><span class="line">  #45 &#x3D; Utf8               cal</span><br><span class="line">  #46 &#x3D; Utf8               result</span><br><span class="line">  #47 &#x3D; Utf8               StackMapTable</span><br><span class="line">  #48 &#x3D; Class              #66            &#x2F;&#x2F; java&#x2F;lang&#x2F;Exception</span><br><span class="line">  #49 &#x3D; Utf8               (Ljava&#x2F;lang&#x2F;Object;)I</span><br><span class="line">  #50 &#x3D; Utf8               &lt;clinit&gt;</span><br><span class="line">  #51 &#x3D; Utf8               Signature</span><br><span class="line">  #52 &#x3D; Utf8               Ljava&#x2F;lang&#x2F;Object;Ljava&#x2F;lang&#x2F;Comparable&lt;Ljava&#x2F;lang&#x2F;String;&gt;;Ljava&#x2F;io&#x2F;Serializable;</span><br><span class="line">  #53 &#x3D; Utf8               SourceFile</span><br><span class="line">  #54 &#x3D; Utf8               MethodInnerStrucTest.java</span><br><span class="line">  #55 &#x3D; NameAndType        #28:#29        &#x2F;&#x2F; &quot;&lt;init&gt;&quot;:()V</span><br><span class="line">  #56 &#x3D; NameAndType        #21:#22        &#x2F;&#x2F; num:I</span><br><span class="line">  #57 &#x3D; Class              #76            &#x2F;&#x2F; java&#x2F;lang&#x2F;System</span><br><span class="line">  #58 &#x3D; NameAndType        #77:#78        &#x2F;&#x2F; out:Ljava&#x2F;io&#x2F;PrintStream;</span><br><span class="line">  #59 &#x3D; Utf8               java&#x2F;lang&#x2F;StringBuilder</span><br><span class="line">  #60 &#x3D; Utf8               count &#x3D;</span><br><span class="line">  #61 &#x3D; NameAndType        #79:#80        &#x2F;&#x2F; append:(Ljava&#x2F;lang&#x2F;String;)Ljava&#x2F;lang&#x2F;StringBuilder;</span><br><span class="line">  #62 &#x3D; NameAndType        #79:#81        &#x2F;&#x2F; append:(I)Ljava&#x2F;lang&#x2F;StringBuilder;</span><br><span class="line">  #63 &#x3D; NameAndType        #82:#83        &#x2F;&#x2F; toString:()Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">  #64 &#x3D; Class              #84            &#x2F;&#x2F; java&#x2F;io&#x2F;PrintStream</span><br><span class="line">  #65 &#x3D; NameAndType        #85:#86        &#x2F;&#x2F; println:(Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line">  #66 &#x3D; Utf8               java&#x2F;lang&#x2F;Exception</span><br><span class="line">  #67 &#x3D; NameAndType        #87:#29        &#x2F;&#x2F; printStackTrace:()V</span><br><span class="line">  #68 &#x3D; Utf8               java&#x2F;lang&#x2F;String</span><br><span class="line">  #69 &#x3D; NameAndType        #35:#36        &#x2F;&#x2F; compareTo:(Ljava&#x2F;lang&#x2F;String;)I</span><br><span class="line">  #70 &#x3D; Utf8               测试方法内部结构</span><br><span class="line">  #71 &#x3D; NameAndType        #26:#27        &#x2F;&#x2F; str:Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">  #72 &#x3D; Utf8               MethodInnerStrucTest</span><br><span class="line">  #73 &#x3D; Utf8               java&#x2F;lang&#x2F;Object</span><br><span class="line">  #74 &#x3D; Utf8               java&#x2F;lang&#x2F;Comparable</span><br><span class="line">  #75 &#x3D; Utf8               java&#x2F;io&#x2F;Serializable</span><br><span class="line">  #76 &#x3D; Utf8               java&#x2F;lang&#x2F;System</span><br><span class="line">  #77 &#x3D; Utf8               out</span><br><span class="line">  #78 &#x3D; Utf8               Ljava&#x2F;io&#x2F;PrintStream;</span><br><span class="line">  #79 &#x3D; Utf8               append</span><br><span class="line">  #80 &#x3D; Utf8               (Ljava&#x2F;lang&#x2F;String;)Ljava&#x2F;lang&#x2F;StringBuilder;</span><br><span class="line">  #81 &#x3D; Utf8               (I)Ljava&#x2F;lang&#x2F;StringBuilder;</span><br><span class="line">  #82 &#x3D; Utf8               toString</span><br><span class="line">  #83 &#x3D; Utf8               ()Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">  #84 &#x3D; Utf8               java&#x2F;io&#x2F;PrintStream</span><br><span class="line">  #85 &#x3D; Utf8               println</span><br><span class="line">  #86 &#x3D; Utf8               (Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line">  #87 &#x3D; Utf8               printStackTrace</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们在常量池中看到         </p><p> #75 = Utf8               java/io/Serializable<br>通常表示符号引用<br>以及<br>  #25 = Integer            23<br>这样的自面量</p><p>这些符号引用通常是需要进行动态链接，在类创建的时候对这些符号引用进行解析，翻译到本地内存中，从而找到真正内存的入口地址。</p><h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><p>运行时常量池是方法区的一部分。常量池表是Class文件的一部分，用于存放编译期生成的种字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。运行时常量池，在加载类和接口到虚拟机后，就会创建对应的运行时常量池。JVM为每个已加载的类型（类或接口）都维护一个常量池。池中的数据项像数组项一样，都是通过索引访问的。</p><p>运行时常量池中包含多种不同的常量，包括编译期就已经明确的数值字面量，也包括到运行期解析后才能够获得的方法或者字段引用。此时不再是常量池中的符号地址了，这里换成了真实地址。</p><p>运行时常量池，相对于class文件常量池的另一个重要特征是：具备动态性。<br>String：intern()<br>当创建类或者接口窦娥运行时常量池时，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大值，则JVM会抛出OutOfMemoryError异常。</p><h3 id="二-方法区的演进细节"><a href="#二-方法区的演进细节" class="headerlink" title="二. 方法区的演进细节"></a>二. 方法区的演进细节</h3><p>在jdk7及以前，习惯上将方法区称之为永久代，但是在1.7之后随着去永久代的落实，永久代的部分内容转移到堆中存储，在java1.8中，正式使用元空间代替了永久代。</p><p>本质上方法区和永久代也不是等价的，仅是堆hotspot而言，对如何实现方法区，不做统一要求，例如：BEA JRpckit/IBM J9中就不存在永久代。<br>现在来看，当年使用永久代。不是好的idea，导致Java程序更容易OOM（超过-XX：MaxPermSize上限）</p><p><img src="/images/pasted-50.png" alt="upload successful"></p><p>JDK8摒弃了永久代，使用元空间，这两者最大的区别在于<font color=#A52A2A size=4 >元空间不在虚拟机设置的内存中，而是使用本地内存。</font></p><h4 id="hotspot-方法区中的变化"><a href="#hotspot-方法区中的变化" class="headerlink" title="hotspot 方法区中的变化"></a>hotspot 方法区中的变化</h4><p><img src="/images/pasted-51.png" alt="upload successful"></p><p>这里面有一些问题需要注意，1. 永久代为什么要被元空间替换？ 2. 字符串常量池为什么会被转移到堆中 3. 静态变量为什么会被转移到堆中</p><h4 id="永久代被元空间替代"><a href="#永久代被元空间替代" class="headerlink" title="永久代被元空间替代"></a>永久代被元空间替代</h4><p>随着Java8的到来，Hotspot vm 中再也见不到永久代了，但是这并不意味着类的元数据信息也消失了，这些数据被移到一个与堆不相连的本地内存区域，这个区域叫做元空间。</p><p>由于类的元数据分配到本地内存中，元空间的最大可分配空间就是系统可用内存空间。在java虚拟机规范中说的是，为了使得hotspot和jrocket更好的融合，所以去除了方法区。这里解释其实有点含糊，我从我上课中记的笔记和我自己理解的进行一个解释：</p><ol><li><p>永久代设置空间大小是很难确定的<br>元空间默认的最大值为-1也就是整个本地内存，然而永久代的默认最大值是82m，这个是对于一个大工程尤其是使用多个动态代理框架来说是远远不够的，很容易就OOM，而设置永久代最大值需要结合多方面的元素比如JVM加载的class总数，常量池的大小，方法的大小等，如果过小就容易OOM，过大容易导致虚拟机内存紧张。而元空间并不在虚拟机中，而是使用的本地内存，因此，默认情况下，元空间的大小仅受本地内存的限制。</p></li><li><p>对永久代调优是困难的<br>永久代会为 GC 带来不必要的复杂度，并且回收效率偏低。</p></li></ol><h4 id="字符串常量池和静态变量为什么调整"><a href="#字符串常量池和静态变量为什么调整" class="headerlink" title="字符串常量池和静态变量为什么调整"></a>字符串常量池和静态变量为什么调整</h4><p>字符串常量池在java1.7的时候被放入了堆中，因为永久代回收效率很低，在full gc的时候才会触发，而full GC是老年代空间不足、永久代空间不足才会触发的，这就导致了字符串常量池回收的效率不高，而我们开发中会有大量的字符串被创建，回收效率低，导致永久代内存不足，放到堆中能够及时回收。</p><p>首先放入堆中一个重要的好处就是当我们大量加载类或者使用String.intern的时候由于永久代或者元空间不存放字符串常量池，这使得在方法区中触发full GC就不会很频繁，并且应为字符串通常寿命较短在放在堆中垃圾回收的效率也高。</p><h3 id="二-方法区中的垃圾回收"><a href="#二-方法区中的垃圾回收" class="headerlink" title="二. 方法区中的垃圾回收"></a>二. 方法区中的垃圾回收</h3><p>《Java虚拟机规范》对方法区的垃圾回收是十分宽泛的。一般来说这个区域的回收效果比较难以令人满意，尤其是类型的加载，条件相当苛刻。但是这部分区域的回收有时又确实是有必要的。以前Sun公司Bug列表中，曾出现若干个严重的bug都是由于低版本的HotSpot虚拟机对此区域未完全回收而导致的内存泄漏。<br>方法区中的垃圾回收主要分为两个部分：<font color=#A52A2A size=4 >常量池中废弃的常量和不再使用的类型。</font></p><p>之前说过方法区中常量池主要有字面量和符号引用。HotSpot对常量池的回收策略是十分明确的，只要常量池中的常量没有任何地方引用，就可以被回收。</p><p>判定一个常量是否被“废弃”还是相对简单，而要判定一个类型是否属于“不再被使用的类”的条件就比较苛刻了。需要同时满足下面三个条件：</p><ul><li>1.该类所有的实例都已经被回收了，也就是Java堆中不存在该类及其任何派生子类的实例。</li><li>2.加载该类的类加载器已经被回收，这个条件除非是经过精心设计的可替换类加载器的场景，如OSGI、JSP的重加载等，否则通常很难达成。</li><li>3.该类对应的Java.lang.class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li></ul><p>Java虚拟机被允许对满足上述的三个条件的无用类进行回收，这里仅仅说的是被允许，而不是和对象一样，没有引用就一定被回收。关于是够要对类型进行回收，HotSpot虚拟机提供了-Xnoclassgc参数进行控制。还可以使用-verbose:class以及-XX:+TraceClass-Loading、-XX:+TraceClassUnLoading查看类加载和卸载信息。</p><p>在大量使用反射，动态代理，CGlab等字节码框架，动态生成JSP以及OSGI这类频繁自定义类加载器的场景中，通常需要JAVA虚拟机具备类型的卸载能力，以保证不会对方法区造成过大的压力。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最后贴一张JVM的内存模型图，大家自行回忆一下我们学过的知识。</p><p><img src="/images/pasted-52.png" alt="upload successful"></p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://www.bilibili.com/video/BV1PJ411n7xZ" target="_blank" rel="noopener">尚硅谷2020最新版宋红康JVM教程持续更新中(java虚拟机详解，jvm从入门到精通)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;今天把宋红康老师的JVM内存结构的方法区看完了，至此所有的内存结构都已经系统的学习一遍了，我也在博客中整理和回顾一下我的学习笔记。ps：本来打算昨天就写blog的，结果在准备今天项目的时候遇到了一些问题，真心发现硬件实践要比算法难很多，所以也给我一
      
    
    </summary>
    
    
      <category term="JVM" scheme="https://qq19971017.github.io/categories/JVM/"/>
    
    
      <category term="JVM" scheme="https://qq19971017.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络(4)——DNS</title>
    <link href="https://qq19971017.github.io/2020/06/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-4-%E2%80%94%E2%80%94DNS/"/>
    <id>https://qq19971017.github.io/2020/06/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-4-%E2%80%94%E2%80%94DNS/</id>
    <published>2020-06-11T06:48:00.000Z</published>
    <updated>2020-06-11T09:19:22.302Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-DNS概念"><a href="#一-DNS概念" class="headerlink" title="一. DNS概念"></a>一. DNS概念</h3><p>通常我们对一个主机的标识是<font color=#A52A2A size=4 >域名</font>的形式，这中形式更易于记忆，如<a href="http://www.baidu.com等，而路由器并不知道www.baidu.com对应的是哪一台服务器，在他们眼里只有" target="_blank" rel="noopener">www.baidu.com等，而路由器并不知道www.baidu.com对应的是哪一台服务器，在他们眼里只有</a><font color=#A52A2A size=4 >IP</font>地址才是有效地址，这种定长的结构化表示也更易于解析和通信。为了解决域名和IP地址之间的映射关系，DNS站了出来。DNS(domain name system)是域名系统的缩写，他负责将我们看到的域名解析为ip地址。</p><h4 id="顶级域名、二级域名"><a href="#顶级域名、二级域名" class="headerlink" title="顶级域名、二级域名"></a>顶级域名、二级域名</h4><p>顶级域名(一级域名)如：.com、.net、.edu、.gov、.cn等。N级域名就是在N-1级域名前追加一级。比如.baidu.com就是一个二级域名，.siba.com.cn是一个三级域名。这里又一个误点，有很多人吧www也当作一个域名，这种理解其实是不恰当的，www其实是表示该主机所提供的服务为www服务，即万维网服务。具体大家可以参考<a href="https://www.zhihu.com/question/29998374/answer/477597889" target="_blank" rel="noopener">顶级域名 一级域名 二级域名 三级域名什么区别?</a>中的高赞回答。</p><h4 id="DNS层次关系"><a href="#DNS层次关系" class="headerlink" title="DNS层次关系"></a>DNS层次关系</h4><p><img src="/images/pasted-42.png" alt="upload successful"><br>如图，DNS层次关系通常是树状结构的，从上往下分别为根DNS服务器、顶级DNS服务器、权威DNS服务器。</p><ul><li>1.根DNS服务器：负责提供顶级域名服务器的IP地址，也就是根DNS服务器负责维护一张顶级DNS的映射表，一个顶级域名对应一个顶级DNS服务器的IP。</li><li>2.顶级DNS服务器：对于每个顶级域(如com、org、net、edu等)和国家顶级域都有顶级域服务器(TLD服务器)，TLD服务器负责提供权威DNS服务器的IP地址。</li><li>3.权威DNS服务器：在因特网上具有公共可访问的主机的每个组织机构必须提供公共可访问的DNS记录，这些记录将这些主机的名字映射为IP地址。</li></ul><p>除此之外还有一个本地DNS服务器，这个服务器通常与主机再同一个局域网当中。当主机发出DNS请求时，该请求被发往本地的DNS服务器，他起着代理的作用，并将该请求转发到DNS服务器层次结构中。他可以起到一个DNS缓存的作用，第一次DNS服务器在接收到返回的域名映射的IP地址，会将主机名和IP地址进行缓存，之后的一定时间内，如果客户端再次访问相同的主机时，本地DNS服务器会立刻返回对应的IP地址，减少其他DNS服务器的压力。</p><h3 id="二-DNS解析"><a href="#二-DNS解析" class="headerlink" title="二. DNS解析"></a>二. DNS解析</h3><p>当我们在浏览器输入一个URL的时候，通常第一步就是进行DNS解析，如<a href="http://www.baidu.com，会有很多步骤需要做。" target="_blank" rel="noopener">www.baidu.com，会有很多步骤需要做。</a></p><p><img src="/images/pasted-43.png" alt="upload successful"></p><ol><li><p>查找浏览器缓存：因为浏览器一般会缓存DNS记录一段时间，不同浏览器的时间可能不一样，一般2-30分钟不等，浏览器去查找这些缓存，如果有缓存，直接返回IP，否则下一步。如chrome采用了预提DNS记录，在本地建立DNS缓存的方法，加快网站的连接速度。</p></li><li><p>查找系统缓存：浏览器缓存中找不到IP之后，浏览器会查看本地硬盘的 hosts 文件，看看其中有没有和这个域名对应的规则，如果有的话就直接使用 hosts 文件里面的 ip 地址。</p></li><li><p>如果在本地的 hosts 文件没有能够找到对应的 ip 地址，浏览器会发出一个 DNS请求到本地DNS服务器 。</p></li><li><p>查询你输入的网址的DNS请求到达本地DNS服务器之后，本地DNS服务器会首先查询它的缓存记录，如果缓存中有此条记录，就可以直接返回结果，此过程是递归的方式进行查询。如果没有，本地DNS服务器还要向DNS根服务器进行查询。</p></li><li><p>根DNS服务器没有记录具体的域名和IP地址的对应关系，而是告诉本地DNS服务器，你可以到顶级DNS服务器上去继续查询，并给出相应的顶级DNS服务器的地址。这种过程是迭代的过程。</p></li><li><p>本地DNS服务器继续向顶级DNS服务器发出请求，在这个例子中，请求的对象是.com域服务器。.com域服务器收到请求之后，也不会直接返回域名和IP地址的对应关系，而是告诉本地DNS服务器，你的域名的权威DNS服务器的地址。</p></li><li><p>最后，本地DNS服务器向域名的权威DNS服务器发出请求，这时就能收到一个域名和IP地址对应关系，本地DNS服务器不仅要把IP地址返回给用户电脑，还要把这个对应关系保存在缓存中，以备下次别的用户查询时，可以直接返回结果，加快网络访问。</p></li></ol><h4 id="查询方式"><a href="#查询方式" class="headerlink" title="查询方式"></a>查询方式</h4><p>DNS进行解析的方式有两种，一种是迭代的方法，也就是我们上面用到的，一种是递归的方法。</p><p><strong>递归解析</strong><br><img src="/images/pasted-44.png" alt="upload successful"><br>本地DNS服务器自己负责向其他DNS服务器进行查询，一般是先向根DNS服务器查询，再由根DNS服务器一级级向下查询。最后得到的查询结果返回给局部DNS服务器，再由局部DNS服务器返回给客户端。</p><p><strong>迭代解析</strong><br><img src="/images/pasted-45.png" alt="upload successful"><br>当本地DNS服务器自己不能回答客户机的DNS查询时，也可以通过迭代查询的方式进行解析，如图所示。本地DNS服务器不是自己向其他DNS服务器进行查询，而是把能解析该域名的其他DNS服务器的IP地址返回给客户端DNS程序，客户端DNS程序再继续向这些DNS服务器进行查询，直到得到查询结果为止。也就是说，迭代解析只是帮你找到相关的服务器而已，而不会帮你去查。</p><p>实际使用中，主机向本地dns服务器的查询是一种递归查询方式，本地dns服务器向其他dns服务器查询使用的迭代方式。</p><h3 id="DNS劫持"><a href="#DNS劫持" class="headerlink" title="DNS劫持"></a>DNS劫持</h3><p>DNS劫持就是通过劫持了DNS服务器，通过某些手段取得某域名的解析记录控制权，进而修改此域名的解析结果，导致对该域名的访问由原IP地址转入到修改后的指定IP，其结果就是对特定的网址不能访问或访问的是假网址，从而实现窃取资料或者破坏原有正常服务的目的。DNS劫持通过篡改DNS服务器上的数据返回给用户一个错误的查询结果来实现的。</p><p>DNS劫持症状：在某些地区的用户在成功连接宽带后，首次打开任何页面都指向ISP提供的“电信互联星空”、“网通黄页广告”等内容页面。还有就是曾经出现过用户访问Google域名的时候出现了百度的网站。这些都属于DNS劫持。</p><p>解决方法：<br>1.加强本地计算机病毒检查，开启防火墙等，防止恶意软件，木马病毒感染计算机<br>2.改变路由器默认密码，防止攻击者修改路由器的DNS配置指向恶意的DNS服务器<br>3.企业的话可以准备两个以上的域名，一旦一个域名挂掉，还可以使用另一个<br>4.用HTTP DNS 代替 Local DNS</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://bbs.huaweicloud.com/blogs/109378" target="_blank" rel="noopener">浅谈DNS缓存机制–浏览器和OS篇</a><br><a href="https://juejin.im/post/5df5d72be51d45584006ddfe" target="_blank" rel="noopener">浏览器输入URL后发生了啥</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-DNS概念&quot;&gt;&lt;a href=&quot;#一-DNS概念&quot; class=&quot;headerlink&quot; title=&quot;一. DNS概念&quot;&gt;&lt;/a&gt;一. DNS概念&lt;/h3&gt;&lt;p&gt;通常我们对一个主机的标识是&lt;font color=#A52A2A size=4 &gt;域名&lt;/fon
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://qq19971017.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="https://qq19971017.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络(3)——HTTP</title>
    <link href="https://qq19971017.github.io/2020/06/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-3-%E2%80%94%E2%80%94HTTP/"/>
    <id>https://qq19971017.github.io/2020/06/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-3-%E2%80%94%E2%80%94HTTP/</id>
    <published>2020-06-05T13:06:00.000Z</published>
    <updated>2020-06-06T08:46:10.647Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-HTTP简介"><a href="#一-HTTP简介" class="headerlink" title="一. HTTP简介"></a>一. HTTP简介</h3><blockquote><p>今天看了一些http协议的一些相关的概念，准备在博客中记录一下。<br>HTTP是客户端和服务端用于通信的协议，可以用来传输文本、图片、文件。他是基于TCP连接，所以说HTTP协议是一个可靠的协议，当HTTP客户端发起一个与服务端的TCP连接，一旦连接建立起来，该浏览器和服务器进程就可以通过套接字接口访问TCP。</p></blockquote><h3 id="二-HTTP特性"><a href="#二-HTTP特性" class="headerlink" title="二. HTTP特性"></a>二. HTTP特性</h3><h4 id="1-HTTP的无状态"><a href="#1-HTTP的无状态" class="headerlink" title="1. HTTP的无状态"></a>1. HTTP的无状态</h4><p>HTTP是一种无状态的协议，我们如何去理解无状态协议呢。当浏览器向服务端连续发送相同的请求时，服务器不会因为两次请求的相同而返回不同的响应，而是从新去发送请求的对象，就像服务器完全忘记之前做过的事情一样，换一句话说就是每一次请求都是完全独立的。因为HTTP服务器不会保存关于客户的任何相关信息，所以说HTTP是一个无状态的。</p><p>那如果我们需要使用HTTP协议去维持一个有状态的场景应该怎么办呢。比如说我们登陆网站，我们会对服务端发送一个登陆请求，登陆上以后我们想浏览网站，就会对服务端发送其他请求，我们想要服务端记住我们已经登陆的状态，这种情况下我们应该如何去处理问题呢？为了帮助HTTP变得有状态，我们通常使用Session和Cookie，我这里先卖一个关子，后面为大家详细介绍。</p><h4 id="2-HTTP的长连接和短连接"><a href="#2-HTTP的长连接和短连接" class="headerlink" title="2. HTTP的长连接和短连接"></a>2. HTTP的长连接和短连接</h4><p>HTTP的短连接就是，当客户端向服务端每发送一次请求是就要建立一次TCP连接然后传输数据然后立刻关闭连接，这样当客户端向服务端请求的web页面含有多个对象时如图片、视频等，每多一个对象，客户端就需要重新和服务端建立一次连接，这样无疑会增加网页加载的时间。</p><p>而从HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码：<br>Connection:keep-alive</p><p>在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。</p><p>我们都说HTTP长连接和短连接本质上是TCP的长连接和短连接，应为HTTP是应用层上的协议，它的底层是基于TCP，应为TCP协议支持长连接，能够保持TCP在请求结束后不立刻关闭，所以说HTTP支持长连接，如果TCP协议在请求结束后立刻关闭，我们说这样的HTTP是短连接的。</p><p>当我们请求的一个网页含有大量的图片、CSS、JS等静态资源，长连接能够帮助我们只建立一个TCP通道就可以完成全部的请求，这就省下了大量的资源消耗。</p><h3 id="三-HTTP格式"><a href="#三-HTTP格式" class="headerlink" title="三. HTTP格式"></a>三. HTTP格式</h3><p>应为HTTP不仅用于发送请求服务端，还用于响应客户端。所以HTTP包含了请求报文格式和响应报文格式。</p><h4 id="1-请求报文格式"><a href="#1-请求报文格式" class="headerlink" title="1. 请求报文格式"></a>1. 请求报文格式</h4><p><img src="/images/pasted-30.png" alt="upload successful"><br>请求报文包括，请求行、请求头部、请求体。<br><strong>请求行</strong></p><ul><li><p>请求方法：有GET、POST、PUT、DELET。GET请求参数可以放在URL后面，而POST请求的数据参数只能放在请求数据里面，和GET请求相比POST请求更安全一些，并且应为POST请求的参数是放在请求数据内，POST可以传输的数据也更多一些。PUT和DELET使用的更少一些，以我的使用经验来说，这些往往适合REST风格配合使用。</p></li><li><p>URL：是指请求的资源</p></li><li><p>协议版本：指HTTP协议的版本，如HTTP/1.1</p></li></ul><p><strong>请求头部</strong><br>请求头部由头部字段名：值的格式构成，看起来像JSON格式，我介绍一些比较常用的。</p><ul><li><p>user-agent: 这的是用户使用浏览器版本。例如：user-agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36。这个是chrome的引擎。</p></li><li><p>Cookie：用于在客户端存储少量的信息，通常用于实现session功能。</p></li><li><p>Host：请求的资源在哪个主机的端口上。</p></li></ul><p><strong>请求数据</strong><br>请求数据又叫请求体，使用是用于传输html表单中的信息。通常来说使用POST方法会将参数放到请求体中，而使用GET方法一般不会放在请求体中。</p><h4 id="2-响应报文格式"><a href="#2-响应报文格式" class="headerlink" title="2. 响应报文格式"></a>2. 响应报文格式</h4><p><img src="/images/pasted-32.png" alt="upload successful"><br>响应报文协议是当服务端进行处理返回给客户端的信息，这里面同样包含了3个部分，响应行、响应头、响应正文。<br><strong>响应行</strong><br>由3部分组成，分别为：协议版本，状态码，状态码描述，之间由空格分隔。</p><p>状态代码为3位数字，200~299的状态码表示成功，300~399的状态码指资源重定向，400~499的状态码指客户端请求出错，500~599的状态码指服务端出错（HTTP/1.1向协议中引入了信息性状态码，范围为100~199）</p><p>这里举出一些常见的：<br><img src="/images/pasted-33.png" alt="upload successful"></p><p><strong>响应头</strong><br>与请求头部类似，为响应报文添加了一些附加信息<br><img src="/images/pasted-34.png" alt="upload successful"></p><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>我们前面提到了http是无状态的。这简化了服务器的设计，并且可以允许程序员去开发可以同时处理数以千计的TCP连接的高新能Web服务器。然而一个Web站点经常希望能够识别用户。为此，HTTP使用了cookie。cookie在HTTP应用中有四个部分：</p><ul><li><ol><li>http请求头部包含了cookie字段</li></ol></li><li><ol start="2"><li>http响应报文包含了Set-Cookie字段</li></ol></li><li><ol start="3"><li>服务端数据库会保存cookie的相关信息。</li></ol></li><li><ol start="4"><li>客户端会保存cookie信息的文件。</li></ol></li></ul><p>我们举一个例子，假设张三晚上想上淘宝，当他第一次上淘宝时，我们假定他以前访问过淘宝，当请求报文到达淘宝的时候，淘宝的服务器会生成一个唯一的识别码，并以此作为索引在他的后端数据库产生一个表项，接下来淘宝的服务器会用一个包含了set-cookie首部的http响应报文对于张三的浏览器进行响应，其中set-cookie就含有该识别码。可能是</p><ul><li>Set-cookie:1678<br>当张三的浏览器收到了该HTTP响应报文时，他会看到set-cookie：首部。该浏览器在他管理的cookie文件中会添加一行，该行包含服务器的主机名和在set-cookie：首部的识别码。当张三继续浏览淘宝时，其浏览器就会查询该cookie文件并抽取他对这个网站的识别码，并放到http请求报的识别码的cookie首部行中。之后每一次发往淘宝的cookie的请求报文中就包含了一下首部行：</li><li>cookie:1678<br>在这样的方式下，淘宝就可以跟踪张三的浏览记录，并为张三提供购物车服务，即淘宝可以维护张三希望购买的物品列表，这样张三在结束回话时可以一起为他们支付。</li></ul><p>如果张三再次访问该网站的时候，比如说是一个星期以后，她的浏览器会在其请求报文中继续放入首部行cookie：1678.淘宝将根据张三过去访问过的页面向她推荐产品，如果张三在淘宝网注册过，可以将邮件地址、银行卡相关联，这就可以解释淘宝等购物网站的点击购物功能，即在点击购买的时候不需要重新提供信用卡和姓名。</p><h3 id="web缓存"><a href="#web缓存" class="headerlink" title="web缓存"></a>web缓存</h3><p>Web缓存器也叫做代理服务器，它能够代表初始的服务器来满足http请求的网络实体，并在存储空见保存最近请求过的对象的副本。<br>举一个例子，如果有一个浏览器想访问淘宝。</p><ul><li><ol><li>浏览器首先会向web缓存器发送http请求。</li></ol></li><li><ol start="2"><li>缓存服务器会查询存储空间中是否含有请求对象的副本，如果含有的话，立刻返回副本数据。</li></ol></li><li><ol start="3"><li>如果web缓存器中没有该对象，他就打开一个与该对象的初始服务器的TCP连接，web缓存器则向淘宝网发送http请求，在收到请求后，淘宝的服务器会返回一个响应报文。</li></ol></li><li><ol start="4"><li>当web缓存起接收到该对象是，他在本地存储空间会存储一份副本，并向客户端浏览器发送该副本。</li></ol></li></ul><p>这样以后在去访问该对象时，就可以快速返回。但是这会有一个问题，如果代理服务器备份的副本时间过长，对象已经被修改了，这样web缓存器返回回来的对象就是错误的。<br>我们使用条件GET可以解决这个问题，条件GET是指在请求报文中，我们使用GET方法，并且在请求头中包含了“If-Modified-Since”字段，这是由web缓存起发送的，缓存器在备份副本的时候会记录修改的时间，当浏览器再次请求相同的对象时，web缓存器会先向服务端发送一个包含If-Modified-Since的GET请求，如果没有被修改则返回一个304响应报文。这样虽然会影响一些效率，但是增加了安全性和可靠性。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://blog.csdn.net/a19881029/article/details/14002273" target="_blank" rel="noopener">HTTP请求、响应报文格式</a><br><a href="https://www.cnblogs.com/williamjie/p/9099940.html" target="_blank" rel="noopener">浅谈HTTP中GET、POST用法以及它们的区别</a><br><a href="https://detail.tmall.com/item.htm?spm=a220m.1000858.1000725.56.1b7127efE3BbeC&id=574793583993&user_id=101450072&cat_id=2&is_b=1&rn=6f69597db6ce41773f733a2e3368654d" target="_blank" rel="noopener">计算机网络 自顶向下方法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-HTTP简介&quot;&gt;&lt;a href=&quot;#一-HTTP简介&quot; class=&quot;headerlink&quot; title=&quot;一. HTTP简介&quot;&gt;&lt;/a&gt;一. HTTP简介&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;今天看了一些http协议的一些相关的概念，准备在博客中记录一下
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://qq19971017.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="https://qq19971017.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>设计模式笔记(4)——观察者模式(转)</title>
    <link href="https://qq19971017.github.io/2020/06/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-4-%E2%80%94%E2%80%94%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://qq19971017.github.io/2020/06/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-4-%E2%80%94%E2%80%94%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-06-04T16:38:00.000Z</published>
    <updated>2020-06-04T16:52:18.775Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-观察者模式模式简介"><a href="#一-观察者模式模式简介" class="headerlink" title="一. 观察者模式模式简介"></a>一. 观察者模式模式简介</h3><p>文章转发自<a href="https://blog.csdn.net/itachi85/article/details/50773358" target="_blank" rel="noopener">设计模式（五）观察者模式</a></p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>观察者模式（又被称为发布-订阅（Publish/Subscribe）模式，属于行为型模式的一种，它定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态变化时，会通知所有的观察者对象，使他们能够自动更新自己。</p><h4 id="观察者模式结构图"><a href="#观察者模式结构图" class="headerlink" title="观察者模式结构图"></a>观察者模式结构图</h4><p><img src="/images/pasted-29.png" alt="upload successful"></p><p>在观察者模式中有如下角色：</p><ul><li><p>Subject：抽象主题（抽象被观察者），抽象主题角色把所有观察者对象保存在一个集合里，每个主题都可以有任意数量的观察者，抽象主题提供一个接口，可以增加和删除观察者对象。</p></li><li><p>ConcreteSubject：具体主题（具体被观察者），该角色将有关状态存入具体观察者对象，在具体主题的内部状态发生改变时，给所有注册过的观察者发送通知。</p></li><li><p>Observer：抽象观察者，是观察者者的抽象类，它定义了一个更新接口，使得在得到主题更改通知时更新自己。</p></li><li><p>ConcrereObserver：具体观察者，实现抽象观察者定义的更新接口，以便在得到主题更改通知时更新自身的状态。</p></li></ul><h3 id="二-观察者模式简单实现"><a href="#二-观察者模式简单实现" class="headerlink" title="二. 观察者模式简单实现"></a>二. 观察者模式简单实现</h3><p>观察者模式这种发布-订阅的形式我们可以拿微信公众号来举例，假设微信用户就是观察者，微信公众号是被观察者，有多个的微信用户关注了程序猿这个公众号，当这个公众号更新时就会通知这些订阅的微信用户。好了我们来看看用代码如何实现：</p><p><strong>抽象观察者（Observer）</strong><br>微信用户是观察者，里面实现了更新的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>具体观察者（ConcrereObserver）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeixinUser</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 微信用户名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeixinUser</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">"-"</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>抽象被观察者（Subject）</strong><br>抽象主题，提供了attach、detach、notify三个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加订阅者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> observer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除订阅者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> observer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detach</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知订阅者更新消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>具体被观察者（ConcreteSubject）</strong><br>微信公众号是具体主题（具体被观察者），里面存储了订阅该公众号的微信用户，并实现了抽象主题中的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubscriptionSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="comment">//储存订阅公众号的微信用户</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; weixinUserlist = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        weixinUserlist.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detach</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        weixinUserlist.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : weixinUserlist) &#123;</span><br><span class="line">            observer.update(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>客户端调用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SubscriptionSubject mSubscriptionSubject=<span class="keyword">new</span> SubscriptionSubject();</span><br><span class="line">        <span class="comment">//创建微信用户</span></span><br><span class="line">        WeixinUser user1=<span class="keyword">new</span> WeixinUser(<span class="string">"杨影枫"</span>);</span><br><span class="line">        WeixinUser user2=<span class="keyword">new</span> WeixinUser(<span class="string">"月眉儿"</span>);</span><br><span class="line">        WeixinUser user3=<span class="keyword">new</span> WeixinUser(<span class="string">"紫轩"</span>);</span><br><span class="line">        <span class="comment">//订阅公众号</span></span><br><span class="line">        mSubscriptionSubject.attach(user1);</span><br><span class="line">        mSubscriptionSubject.attach(user2);</span><br><span class="line">        mSubscriptionSubject.attach(user3);</span><br><span class="line">        <span class="comment">//公众号更新发出消息给订阅的微信用户</span></span><br><span class="line">        mSubscriptionSubject.notify(<span class="string">"刘望舒的专栏更新了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">杨影枫-刘望舒的专栏更新了</span><br><span class="line">月眉儿-刘望舒的专栏更新了</span><br><span class="line">紫轩-刘望舒的专栏更新了</span><br></pre></td></tr></table></figure><h3 id="三-使用观察者模式的场景和优缺点"><a href="#三-使用观察者模式的场景和优缺点" class="headerlink" title="三. 使用观察者模式的场景和优缺点"></a>三. 使用观察者模式的场景和优缺点</h3><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li>关联行为场景，需要注意的是，关联行为是可拆分的，而不是“组合”关系。</li><li>事件多级触发场景。</li><li>跨系统的消息交换场景，如消息队列、事件总线的处理机制。</li></ul><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>解除耦合，让耦合的双方都依赖于抽象，从而使得各自的变换都不会影响另一边的变换。</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>在应用观察者模式时需要考虑一下开发效率和运行效率的问题，程序中包括一个被观察者、多个观察者，开发、调试等内容会比较复杂，而且在Java中消息的通知一般是顺序执行，那么一个观察者卡顿，会影响整体的执行效率，在这种情况下，一般会采用异步实现。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-观察者模式模式简介&quot;&gt;&lt;a href=&quot;#一-观察者模式模式简介&quot; class=&quot;headerlink&quot; title=&quot;一. 观察者模式模式简介&quot;&gt;&lt;/a&gt;一. 观察者模式模式简介&lt;/h3&gt;&lt;p&gt;文章转发自&lt;a href=&quot;https://blog.csdn.
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://qq19971017.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://qq19971017.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络(2)——网络编程BIO、NIO</title>
    <link href="https://qq19971017.github.io/2020/06/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-2-%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8BBIO%E3%80%81NIO%E3%80%81AIO/"/>
    <id>https://qq19971017.github.io/2020/06/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-2-%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8BBIO%E3%80%81NIO%E3%80%81AIO/</id>
    <published>2020-06-02T02:17:00.000Z</published>
    <updated>2020-06-03T09:10:06.932Z</updated>
    
    <content type="html"><![CDATA[<h3 id="计算机网络-2-——网络编程BIO、NIO"><a href="#计算机网络-2-——网络编程BIO、NIO" class="headerlink" title="计算机网络(2)——网络编程BIO、NIO"></a>计算机网络(2)——网络编程BIO、NIO</h3><blockquote><p>本来在学习nginx，想写一些nginx的blog，但是在看一写blog的时候，看到了io多路复用，epoll等概念，确认过眼神，是没学过的概念，于是由转而看起了网络编程多线程相关的一些知识，也是学到了很多新的知识。</p></blockquote><h4 id="一-同步、异步、阻塞、非阻塞"><a href="#一-同步、异步、阻塞、非阻塞" class="headerlink" title="一. 同步、异步、阻塞、非阻塞"></a>一. 同步、异步、阻塞、非阻塞</h4><p>同步、异步是两种通信机制，同步是指在调用函数的时候，必须要有返回结果才能够继续往下执行；异步则是指，调用在发出的时候，调用者不会立刻得到结果，而是在调用发出之后，被调用者通过状态、通知来通知调用者，或者通过回调函数处理这个调用。<br><img src="/images/pasted-25.png" alt="upload successful"><br>上图比较清晰的给我们解释了什么事同步IO，什么是异步IO，同步IO是当系统调用发生时，内核会将程序挂起，CPU会从用户空间切换到内核空间进行数据交换，完成系统调用时，CPU返回用户空间并返回结果，进程由挂起状态转换为就绪状态，准备执行下面的命令。而异步IO是当系统调用发生时，系统会立即给程序发生一个结果，好让程序继续往下执行，当系统调用结束时，系统通通知调用进程。（设置一个用户空间特殊的变量值或者触发一个signal或者产生一个软中断 或者调用应用程序的回调函数）</p><p>而阻塞和非阻塞是种状态，它们关注的是程序在等待结果时的状态，阻塞是指程序在调用结果返回直线，当前线程会被挂起，只有在得到结果之后才能返回。这种被挂起的状态被称为阻塞。非阻塞是指线程在结果返回之前不会被挂起，该调用会执行其他的事情。</p><p>同步IO可以分为阻塞IO和非阻塞IO，我们之后谈论的BIO就是阻塞IO，NIO是非阻塞IO，而aio就是异步io。</p><h4 id="二-BIO模型"><a href="#二-BIO模型" class="headerlink" title="二. BIO模型"></a>二. BIO模型</h4><p>BIO又叫做blocking IO，阻塞模型，下面我们来说BIO流程，注意下面所说的都是针对多线程的。</p><p><img src="/images/pasted-26.png" alt="upload successful"><br>采用BIO的服务端会用一个socket去监听窗口，当有客户端连接进来时，socket会创建一个新的线程用于和客户端进行交互，通过输出流返回应答给客户端，线程销毁，这是典型的 请求——应答 模型。<br>下面上代码：<br><em>BIOServer</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BIOServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> PORT = <span class="number">12345</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ServerSocket server;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        start(PORT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(server != <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            server = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">            System.out.println(<span class="string">"服务器已启动， 端口号:"</span> + port);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                Socket socket = server.accept();</span><br><span class="line">                <span class="keyword">new</span> Thread(<span class="keyword">new</span> BIOServerHandler(socket)).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(server != <span class="keyword">null</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"服务器关闭"</span>);</span><br><span class="line">                server.close();</span><br><span class="line">                server = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>BIO服务端交互代码</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BIOServerHandler</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BIOServerHandler</span><span class="params">(Socket socket)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line">        PrintWriter out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">            out = <span class="keyword">new</span> PrintWriter(socket.getOutputStream(), <span class="keyword">true</span>);</span><br><span class="line">            String expression;</span><br><span class="line">            String result;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="comment">//通过BufferedReader读取一行</span></span><br><span class="line">                <span class="comment">//如果已经读到输入流尾部，返回null,退出循环</span></span><br><span class="line">                <span class="comment">//如果得到非空值，就尝试计算结果并返回</span></span><br><span class="line">                <span class="keyword">if</span>((expression = in.readLine()) ==  <span class="keyword">null</span>) <span class="keyword">break</span>;</span><br><span class="line">                System.out.println(<span class="string">"服务器收到消息："</span> + expression);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    result = <span class="string">"to do！"</span>;</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    result = <span class="string">"计算错误"</span> + e.getMessage();</span><br><span class="line">                &#125;</span><br><span class="line">                out.println(result);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(in != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(out != <span class="keyword">null</span>)&#123;</span><br><span class="line">                out.close();</span><br><span class="line">                out = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(socket!= <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                socket = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>BIOClient</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.print.DocFlavor;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BIOClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> PORT = <span class="number">12345</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String IP = <span class="string">"localhost"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String expression)</span></span>&#123;</span><br><span class="line">        send(PORT, expression);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(<span class="keyword">int</span> port, String expression)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发送消息为："</span> + expression);</span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line">        PrintWriter out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            socket = <span class="keyword">new</span> Socket(IP, PORT);</span><br><span class="line">            in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">            out = <span class="keyword">new</span> PrintWriter(socket.getOutputStream(),<span class="keyword">true</span>);</span><br><span class="line">            out.println(expression);</span><br><span class="line">            System.out.println(<span class="string">"结果为:"</span>+ in.readLine());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(in != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                in = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(out != <span class="keyword">null</span>)&#123;</span><br><span class="line">                out.close();</span><br><span class="line">                out = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(socket != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                socket = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>测试代码</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    BIOServer.start();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">char</span> operators[] = &#123;<span class="string">'+'</span>,<span class="string">'-'</span>,<span class="string">'*'</span>,<span class="string">'/'</span>&#125;;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random(System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                    String expression = random.nextInt(<span class="number">10</span>)+<span class="string">""</span>+operators[random.nextInt(<span class="number">4</span>)]+(random.nextInt(<span class="number">10</span>)+<span class="number">1</span>);</span><br><span class="line">                    BIOClient.send(expression);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.currentThread().sleep(random.nextInt(<span class="number">1000</span>));</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>BIO的只适用与小并发量且是一问一答的程序，因为每有一个客户端连接进来，服务端就会创建一个新的线程用于对接，线程也会占用内存资源，并且创建线程需要进行系统调用，当线程数量快速膨胀后，cpu需要不断切换线程，这样上下文切换将会占用cpu大量的时间。最重要的缺点是accept是阻塞的，这是无法解决根本问题的，而NIO作为非阻塞模型，就可以很好解决这个问题。</p><h4 id="三-NIO模型"><a href="#三-NIO模型" class="headerlink" title="三. NIO模型"></a>三. NIO模型</h4><p>Nio官方叫法new io，我们习惯称之为no-block io应为非阻塞是nio的最大的特点。对于NIO，如果TCP RecvBUffer有数据，就把数据从网卡读到内存，并且返回给用户；反之则返回0，永远不会阻塞。在NIO中用户最关心的是，“我可以读了”。本质上来说，NIO模型中，socket主要的读写、注册、接收函数，在等待就绪阶段是非堵塞的，真正的IO操作是同步阻塞的。<br>我们回忆BIO模型，之所以需要多线程，是因为在进行IO操作的时候，一是没有办法知道到底能不能写，能不能读，只能等待，即使通过各种估算，算出来的操作系统没有能力进行读写，也没有办法在socket.read()和socket.write()函数中返回，这两个函数无法进行有效的中断，所以除了多开线程另其炉灶，没有好的办法利用CPU。NIO的读写函数可以立即返回，这就给我们不开线程，这就给我们不开线程利用CPU的最好机会，如果一个连接不能读写，我们可以吧这件事记下来，通常的方式是在selector上注册标记位，然后切换到其他就绪的连接继续进行读写。</p><p>NIO最重要的三个基本概念是channel、buffer、selector。</p><h5 id="1-channel"><a href="#1-channel" class="headerlink" title="1.channel"></a>1.channel</h5><p>channel 我们通过翻译可以看出，它是一个通道，可以与硬件如网卡、硬盘进行连接，当通道被被打开时，我们可以向通道中读写数据。和流的概念类似但是通道是双向的，而流只具有单向性，并且通道可以支持多线程的读写，比较重要的的一些通道如FileChannel、ServerSocketChannel、SocketChannel都是现在比较常用的类，再多线程中发挥着重要作用，由于我们这只将网络编程，所以我下面重点介绍ServerSocketChannel、SocketChannel。</p><blockquote><p><em>ServerSocketChannel</em></p></blockquote><p>ServerSocketChannel 是用于TCP服务端的通道，他的作用和标准IO中的ServerSocket类似，可以绑定端口进行监听。和ServerSocket相比，ServerSocketChannel最大的优势是可以设置为非阻塞的状态，当没有客户端连接进来时，ServerSocketChannel可以立刻返回null，如果有客户端连接时，就会和ServerSocket一样返回一个Socket，除此之外ServerSocketChannel是多线程安全的，支持多线程并发。</p><blockquote><p><em>SocketChannel</em></p></blockquote><p>SocketChannel 是用于TCP客户端的通道，它同样可以设置非阻塞模式对服务端进行连接，以及对通道内的数据进行读写。SocketChannel还有一个特点就是支持异步关闭，如果SocketChannel在一个线程上read阻塞，另一个线程对该SocketChannel调用shutdownInput，则读阻塞的线程将返回-1表示没有读取任何数据；如果SocketChannel在一个线程上write阻塞，另一个线程对该SocketChannel调用shutdownOutput，则写阻塞的线程将抛出AsynchronousCloseException。</p><h5 id="2-buffer"><a href="#2-buffer" class="headerlink" title="2.buffer"></a>2.buffer</h5><p>Buffer通常与Channel进行交互，数据从通道读入缓冲区，或者从缓冲区写入通道中，缓冲区本质上是一个可以写入数据的数组，之后可以读取数据，Buffer对象包装了此内存块，可以更轻松的使用内存块。</p><p>使用buffer时通常遵循以下几个步骤：</p><ol><li>将数据写入缓冲区</li><li>调用buffer.flip()反转读写模式</li><li>从缓冲区读取数据</li><li>调用buffer.clear()或者buffer.compact()清除缓冲区的内容。</li></ol><p>将数据写入Buffer 时，Buffer 会跟踪写入的数据量。 当需要读取数据时，就使用 flip() 方法将缓冲区从写入模式切换到读取模式。 在读取模式下，缓冲区允许读取写入缓冲区的所有数据。</p><p>读完所有数据之后，就需要清除缓冲区，以便再次写入。 可以通过两种方式执行此操作：通过调用 clear() 或调用 compact() 。区别在于 clear() 是方法清除整个缓冲区，而 compact() 方法仅清除已读取的数据，未读数据都会移动到缓冲区的开头，新数据将在未读数据之后写入缓冲区。</p><p>buffer有一些基本概念：</p><ol><li>capacity：指的时缓冲区的容量，是他所包含的元素的数量，不能为负并且不能够更改。</li><li>position：缓冲去的位置， 是下一个要读取或者要写入的元素的索引。不能为负，并且不能够大于limit</li><li>limit：缓冲区的限制，缓冲区的限制不能为负，并且不能够大于capacity</li></ol><p>另外还有标记 mark ，<br>标记、位置、限制和容量值遵守以下不变式：<br>0 &lt;= mark&lt;= position &lt;= limit&lt;= capacity</p><p>position和limit的含义取决于Buffer是处于读取还是写入模式。无论缓冲模式如何，capacity总是一样表示容量。</p><p>以下是写入和读取模式下的容量，位置和限制的说明：<br><img src="/images/pasted-27.png" alt="upload successful"></p><p><strong>capacity</strong></p><blockquote><p>作为存储器块，缓冲区具有一定的固定大小，也称为“容量”。 只能将 capacity 多的 byte，long，char 等写入缓冲区。 缓冲区已满后，需要清空它（读取数据或清除它），然后才能将更多数据写入。</p></blockquote><p><strong>position</strong></p><blockquote><p>将数据写入缓冲区时，可以在某个位置执行操作。 position 初始值为 0 ，当一个 byte，long，char 等已写入缓冲区时，position 被移动，指向缓冲区中的下一个单元以插入数据。 position 最大值为 capacity -1</p></blockquote><blockquote><p>从缓冲区读取数据时，也可以从给定位置开始读取数据。 当缓冲区从写入模式切换到读取模式时，position 将重置为 0 。当从缓冲区读取数据时，将从 position 位置开始读取数据，读取后会将 position 移动到下一个要读取的位置。</p></blockquote><p><strong>limit</strong></p><blockquote><p>在写入模式下，Buffer 的 limit 是可以写入缓冲区的数据量的限制，此时 limit=capacity。</p></blockquote><blockquote><p>将缓冲区切换为读取模式时，limit 表示最多能读到多少数据。 因此，当将 Buffer 切换到读取模式时，limit被设置为之前写入模式的写入位置（position ），换句话说，你能读到之前写入的所有数据（例如之前写写入了 6 个字节，此时 position=6 ，然后切换到读取模式，limit 代表最多能读取的字节数，因此 limit 也等于 6）。</p></blockquote><p><strong>分配缓冲区</strong><br>buffer 在一开始需要使用allocate来分配缓冲区的大小，缓冲区的大小决定了capacity的大小。例子如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer buffer = ByteBuffer.allocate(<span class="number">48</span>); <span class="comment">//创建容量为48字节的缓冲区</span></span><br></pre></td></tr></table></figure><p><strong>将数据写入缓冲区</strong><br>可以通过两种方式将数据写入 Buffer：</p><ol><li>将数据从通道写入缓冲区</li><li>通过缓冲区的 put() 方法,自己将数据写入缓冲区。<br>这是一个示例，显示了 Channel 如何将数据写入 Buffer：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> data = fileChannel.read(buffer); <span class="comment">// 将 Channel 的数据读入缓冲区，返回读入到缓冲区的字节数</span></span><br><span class="line">buffer.put(<span class="number">127</span>); <span class="comment">// 此处的 127 是 byte 类型</span></span><br></pre></td></tr></table></figure><p><em>flip() 切换缓冲区的读写模式</em><br>flip() 方法将 Buffer 从写入模式切换到读取模式。 调用 flip() 会将 position 设置回 0，并将 limit 的值设置为切换之前的 position 值。换句话说，limit 表示之前写进了多少个 byte、char 等 —— 现在能读取多少个 byte、char 等。</p><p><strong>从缓冲区读取数据</strong><br>有两种方法可以从 Buffer 中读取数据：</p><ol><li>将数据从缓冲区读入通道。</li><li>使用 get() 方法之一，自己从缓冲区读取数据。<br>以下是将缓冲区中的数据读入通道的示例：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> bytesWritten = fileChannel.write(buffer);</span><br><span class="line"><span class="keyword">byte</span> aByte = buffer.get();    </span><br></pre></td></tr></table></figure><p>和 put() 方法一样，get() 方法也有许多其他版本，允许以多种不同方式从 Buffer 中读取数据。有关更多详细信息，请参阅JavaDoc以获取具体的缓冲区实现。</p><p><strong>rewind() 倒带</strong><br>Buffer对象的 rewind() 方法将 position 设置回 0，因此可以重读缓冲区中的所有数据， limit 则保持不变。</p><p><strong>clear() 和 compact()</strong><br>如果调用 clear() ,则将 position 设置回 0 ，并将 limit 被设置成 capacity 的值。换句话说，Buffer 被清空了。 但是 Buffer 中的实际存放的数据并未清除。</p><p>如果在调用 clear() 时缓冲区中有任何未读数据，数据将被“遗忘”，这意味着不再有任何标记告诉读取了哪些数据，还没有读取哪些数据。</p><p>如果缓冲区中仍有未读数据，并且想稍后读取它，但需要先写入一些数据，这时候应该调用 compact() ，它会将所有未读数据复制到 Buffer 的开头，然后它将 position 设置在最后一个未读元素之后。 limit 属性仍设置为 capacity ，就像 clear() 一样。 现在缓冲区已准备好写入，并且不会覆盖未读数据。</p><p><strong>mark() 和 reset()</strong><br>以通过调用 Buffer 对象的 mark() 方法在 Buffer 中标记给定位置。 然后，可以通过调用 Buffer.reset() 方法将位置重置回标记位置，就像在标准 IO 中一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">buffer.mark();</span><br><span class="line"><span class="comment">// 调用 buffer.get() 等方法读取数据...</span></span><br><span class="line"></span><br><span class="line">buffer.reset();  <span class="comment">// 设置 position 回到 mark 位置。    </span></span><br></pre></td></tr></table></figure><p><strong>使用buffer的一些好处</strong></p><p>当我们使用buffer和channel共同进行数据传输的时候，channel解决了阻塞的问题，那么buffer解决了什么问题？下面我们看一下buffer和channel的流程图</p><p><img src="/images/pasted-28.png" alt="upload successful"><br>乍一看内核空间和用户空间进行交互的时候，还需要现将数据放入到buffer然后在通过read取出来不是多此一举吗？其实不然，我们设想以下下面的情况，<br>ByteBuffer buffer = ByteBuffer.allocate(1024 * 4);<br>……<br>channel.read(buffer);<br>……<br>while(true){<br>byte[] buf = new byte[32];<br>buffer.read(buf);<br>//handle<br>}<br>如果有1024<em>4 个byte需要读取，若我们使用字节流读取的话就需要进行1024</em>4/32次IO操作，若我们提前讲数据放入buffer，我们就只需要一次IO操作，其他的操作都是在内存中进行，效率就会高很多。</p><h5 id="3-selector"><a href="#3-selector" class="headerlink" title="3.selector"></a>3.selector</h5><p>Selector是NIO中的一个组件，它负责监控和管理多个Channel从而管理多个网络连接。并可以使用轮询的方式确定那些通道可以读写。通道必须处于非阻塞的模式才能够和选择器一起使用，这意味着无法将FileChannel与Selector一起使用，因为FileChannel无法切换到非阻塞模式。套接字通道则支持。</p><p>通常selector通过register()的方法来管理通道，他可以监听四种不同的事件，</p><ul><li>Connect 连接</li><li>Accept 接收</li><li>Read 读</li><li>Write 写</li></ul><p>一个“发起事件”的通道也被称为“已就绪”事件。 因此，已成功连接到另一台服务器的通道是“连接就绪”。 接受传入连接的服务器套接字通道是“接收就绪”。 准备好要读取的数据的通道“读就绪”。 准备好写入数据的通道称为“写就绪”。</p><p>下面结合一个具体的例子我们来操作NIO<br><strong>NIOServer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NioServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> PORT = <span class="number">12345</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> NIOServerHandle serverhandle;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        start(PORT);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">int</span> port)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(serverhandle!=<span class="keyword">null</span>)</span><br><span class="line">            serverhandle.stop();</span><br><span class="line">        serverhandle = <span class="keyword">new</span> NIOServerHandle(port);</span><br><span class="line">        <span class="keyword">new</span> Thread(serverhandle,<span class="string">"Server"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>NIOServerHandler</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOServerHandle</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line">    <span class="keyword">private</span> ServerSocketChannel serverSocketChannel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> started;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NIOServerHandle</span><span class="params">(<span class="keyword">int</span> port)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            selector = Selector.open();</span><br><span class="line">            serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">            serverSocketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">            serverSocketChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(port),<span class="number">1024</span>);</span><br><span class="line">            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">            started = <span class="keyword">true</span>;</span><br><span class="line">            System.out.println(<span class="string">"服务器已启动， 端口号"</span>+ port);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;started = <span class="keyword">false</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (started)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                selector.select(<span class="number">1000</span>);</span><br><span class="line">                Set&lt;SelectionKey&gt; keys = selector.selectedKeys();</span><br><span class="line">                Iterator&lt;SelectionKey&gt; it = keys.iterator();</span><br><span class="line">                SelectionKey key = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">                    key = it.next();</span><br><span class="line">                    it.remove();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        hanleInput(key);</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(key != <span class="keyword">null</span>)&#123;</span><br><span class="line">                            key.cancel();</span><br><span class="line">                            <span class="keyword">if</span>(key.channel() != <span class="keyword">null</span>)&#123;</span><br><span class="line">                                key.channel().close();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(selector != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                selector.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hanleInput</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(key.isValid())&#123;</span><br><span class="line">            <span class="keyword">if</span>(key.isAcceptable())&#123;</span><br><span class="line">                ServerSocketChannel ssc = (ServerSocketChannel)key.channel();</span><br><span class="line">                SocketChannel sc = ssc.accept();</span><br><span class="line">                sc.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                sc.register(selector,SelectionKey.OP_READ);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(key.isReadable())&#123;</span><br><span class="line">                SocketChannel sc = (SocketChannel)key.channel();</span><br><span class="line">                ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                <span class="keyword">int</span> readBytes = sc.read(buffer);</span><br><span class="line">                <span class="keyword">if</span>(readBytes &gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    buffer.flip();</span><br><span class="line">                    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[buffer.remaining()];</span><br><span class="line">                    buffer.get(bytes);</span><br><span class="line">                    String expression = <span class="keyword">new</span> String(bytes,<span class="string">"UTF-8"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"服务器收到消息："</span> + expression);</span><br><span class="line">                    String result = <span class="string">"to do"</span>;</span><br><span class="line">                    doWrite(sc, result);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>  <span class="keyword">if</span>(readBytes&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                    key.cancel();</span><br><span class="line">                    sc.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doWrite</span><span class="params">(SocketChannel channel, String response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = response.getBytes();</span><br><span class="line">        ByteBuffer writeBuffer = ByteBuffer.allocate(bytes.length);</span><br><span class="line">        writeBuffer.put(bytes);</span><br><span class="line">        writeBuffer.flip();</span><br><span class="line">        channel.write(writeBuffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>NIOClient</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String HOST = <span class="string">"localhost"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> PORT = <span class="number">12345</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> NIOClientHandle clientHandle;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        start(HOST,PORT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(String host, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(clientHandle != <span class="keyword">null</span>)</span><br><span class="line">            clientHandle.stop();</span><br><span class="line">        clientHandle = <span class="keyword">new</span> NIOClientHandle(host,port);</span><br><span class="line">        <span class="keyword">new</span> Thread(clientHandle,<span class="string">"Server"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向服务器发送消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">sendMsg</span><span class="params">(String msg)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(msg.equals(<span class="string">"q"</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        clientHandle.sendMsg(msg);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>NIOClientHandle</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ClosedChannelException;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOClientHandle</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line">    <span class="keyword">private</span> SocketChannel socketChannel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> started;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NIOClientHandle</span><span class="params">(String host, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//创建选择器</span></span><br><span class="line">            selector = Selector.open();</span><br><span class="line">            <span class="comment">//打开监听通道</span></span><br><span class="line">            socketChannel = SocketChannel.open();</span><br><span class="line">            <span class="comment">//如果为 true，则此通道将被置于阻塞模式；如果为 false，则此通道将被置于非阻塞模式</span></span><br><span class="line">            socketChannel.configureBlocking(<span class="keyword">false</span>);<span class="comment">//开启非阻塞模式</span></span><br><span class="line">            started = <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        started = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            doConnect();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (started)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                selector.select(<span class="number">1000</span>);</span><br><span class="line">                Set&lt;SelectionKey&gt; keys = selector.selectedKeys();</span><br><span class="line">                Iterator&lt;SelectionKey&gt; it = keys.iterator();</span><br><span class="line">                SelectionKey key = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">                    key = it.next();</span><br><span class="line">                    it.remove();</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        handleInput(key);</span><br><span class="line">                    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(key != <span class="keyword">null</span>)&#123;</span><br><span class="line">                            key.cancel();</span><br><span class="line">                            <span class="keyword">if</span>(key.channel() != <span class="keyword">null</span>)&#123;</span><br><span class="line">                                key.channel().close();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                System.exit(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(selector != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                selector.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doConnect</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(host,port)));</span><br><span class="line">        <span class="keyword">else</span> socketChannel.register(selector, SelectionKey.OP_CONNECT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(String msg)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">        doWrite(socketChannel, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doWrite</span><span class="params">(SocketChannel channel,String request)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="comment">//将消息编码为字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = request.getBytes();</span><br><span class="line">        <span class="comment">//根据数组容量创建ByteBuffer</span></span><br><span class="line">        ByteBuffer writeBuffer = ByteBuffer.allocate(bytes.length);</span><br><span class="line">        <span class="comment">//将字节数组复制到缓冲区</span></span><br><span class="line">        writeBuffer.put(bytes);</span><br><span class="line">        <span class="comment">//flip操作</span></span><br><span class="line">        writeBuffer.flip();</span><br><span class="line">        <span class="comment">//发送缓冲区的字节数组</span></span><br><span class="line">        channel.write(writeBuffer);</span><br><span class="line">        <span class="comment">//****此处不含处理“写半包”的代码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleInput</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(key.isValid())&#123;</span><br><span class="line">            SocketChannel sc = (SocketChannel) key.channel();</span><br><span class="line">            <span class="keyword">if</span>(key.isConnectable())&#123;</span><br><span class="line">                <span class="keyword">if</span>(sc.finishConnect());</span><br><span class="line">                <span class="keyword">else</span> System.exit(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//读消息</span></span><br><span class="line">            <span class="keyword">if</span>(key.isReadable())&#123;</span><br><span class="line">                <span class="comment">//创建ByteBuffer，并开辟一个1M的缓冲区</span></span><br><span class="line">                ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                <span class="comment">//读取请求码流，返回读取到的字节数</span></span><br><span class="line">                <span class="keyword">int</span> readBytes = sc.read(buffer);</span><br><span class="line">                <span class="comment">//读取到字节，对字节进行编解码</span></span><br><span class="line">                <span class="keyword">if</span>(readBytes&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">//将缓冲区当前的limit设置为position=0，用于后续对缓冲区的读取操作</span></span><br><span class="line">                    buffer.flip();</span><br><span class="line">                    <span class="comment">//根据缓冲区可读字节数创建字节数组</span></span><br><span class="line">                    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[buffer.remaining()];</span><br><span class="line">                    <span class="comment">//将缓冲区可读字节数组复制到新建的数组中</span></span><br><span class="line">                    buffer.get(bytes);</span><br><span class="line">                    String result = <span class="keyword">new</span> String(bytes,<span class="string">"UTF-8"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"客户端收到消息："</span> + result);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//没有读取到字节 忽略</span></span><br><span class="line"><span class="comment">//else if(readBytes==0);</span></span><br><span class="line">                <span class="comment">//链路已经关闭，释放资源</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(readBytes&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                    key.cancel();</span><br><span class="line">                    sc.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Test</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> nio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//运行服务器</span></span><br><span class="line">        NioServer.start();</span><br><span class="line">        <span class="comment">//避免客户端先于服务器启动前执行代码</span></span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">//运行客户端</span></span><br><span class="line"></span><br><span class="line">        NIOClient.start();</span><br><span class="line">        <span class="keyword">while</span>(NIOClient.sendMsg(<span class="keyword">new</span> Scanner(System.in).nextLine()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><p><a href="https://www.zhihu.com/question/19732473" target="_blank" rel="noopener">怎样理解阻塞非阻塞与同步异步的区别？</a><br><a href="https://blog.csdn.net/anxpp/article/details/51512200" target="_blank" rel="noopener">Java 网络IO编程总结（BIO、NIO、AIO均含完整实例代码）</a><br><a href="https://www.jianshu.com/p/49754f69822c" target="_blank" rel="noopener">BIO/NIO底层原理分析</a><br><a href="https://www.bilibili.com/video/BV11K4y1C7rm?p=2" target="_blank" rel="noopener">清华大牛权威讲解nio,epoll,多路复用，更好的理解redis-netty-Kafka等热门技术</a><br><a href="https://tech.meituan.com/2016/11/04/nio.html" target="_blank" rel="noopener">Java NIO浅析</a><br><a href="https://www.cnblogs.com/lxyit/p/9209407.html" target="_blank" rel="noopener">SocketChannel简述</a><br><a href="https://www.cnblogs.com/czwbig/p/10035631.html" target="_blank" rel="noopener">Java NIO 学习笔记（一）—-概述，Channel/Buffer</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;计算机网络-2-——网络编程BIO、NIO&quot;&gt;&lt;a href=&quot;#计算机网络-2-——网络编程BIO、NIO&quot; class=&quot;headerlink&quot; title=&quot;计算机网络(2)——网络编程BIO、NIO&quot;&gt;&lt;/a&gt;计算机网络(2)——网络编程BIO、NIO&lt;/
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://qq19971017.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="https://qq19971017.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
      <category term="socket" scheme="https://qq19971017.github.io/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络(1)——socket编程</title>
    <link href="https://qq19971017.github.io/2020/05/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-1-%E2%80%94%E2%80%94socket%E7%BC%96%E7%A8%8B/"/>
    <id>https://qq19971017.github.io/2020/05/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-1-%E2%80%94%E2%80%94socket%E7%BC%96%E7%A8%8B/</id>
    <published>2020-05-27T08:49:00.000Z</published>
    <updated>2020-05-31T15:57:39.593Z</updated>
    
    <content type="html"><![CDATA[<h3 id="socket编程"><a href="#socket编程" class="headerlink" title="socket编程"></a>socket编程</h3><p>最近做项目，需要了解一些socket编程的相关知识，因为本身在大学的时候也接触过socket编程，但是时间已经很久了，并且当时学的不够用心，今天下午看了一些博客，对socket有了一些新的认识，在这里记录一下我学到的一些知识。</p><h4 id="一-什么是socket"><a href="#一-什么是socket" class="headerlink" title="一.什么是socket"></a>一.什么是socket</h4><p>什么socket，这里我们要先从osi模型和TCP/IP模型开始讲起，OSI一共包含了7层，其中应用层、表示层和会话层是面向用户的，程序员可以在此基础上进行开发，如http、ftp、SMTP(邮件)等协议就是基于应用层建立的，下面的四层协议是由系统内核封装，对用户不可见的。<br><img src="/images/pasted-19.png" alt="upload successful"></p><p>OSI模型表达的过于复杂，为了简化模型，人们又提出了TCP/IP模型，这种模型将上面的3层模型统一的表示成应用层。<br><img src="/images/pasted-20.png" alt="upload successful"></p><p>为了使数据分组从源传送到目的地，源端OSI模型的每一层都必须与目的端的对等层进行通信，这种通信方式称为对等层通信。在每一层通信过程中，使用本层自己协议进行通信。在进行网络通信的时候如打开一个网页，数据在发送端(这里指客户端)会从上到下进行封装，然后传输到服务端后，数据会自下而上进行解封装。最后获取上层数据。</p><p>我们在进行网络通信的过程中，可以使用http这样应用层的协议，但是当没有协议满足我们的需求的时候，我们需要自主与TCP/UDP进行交互，这时候就有了socket，这是建立在传输层上的一个抽象层，帮助我们与tcp/ip建立连接进行通信，我们可以把它看作两个主机进行双向通信的端点。socket主要有3个参数：通信的目的IP地址、使用的传输层协议(TCP或UDP)和使用的端口号。</p><h4 id="二-socket工作流程"><a href="#二-socket工作流程" class="headerlink" title="二. socket工作流程"></a>二. socket工作流程</h4><p><img src="/images/pasted-21.png" alt="upload successful"><br>socket是一种打开——读/写——关闭的模式的实现，使用TCP协议进行通讯为例。一共分为服务端socket和客户端socket。服务端socket负责监听客户端连接请求，当客户端发送请求时，两端进行通信。具体流程如下：</p><ul><li>1.服务端根据地址类型、socket类型、协议创建socket。</li><li>2.服务端为socket绑定ip地址和端口号。</li><li>3.服务器socket监听端口号请求，随时准备接受客户端发来的请求，这时候服务器的socket并没有被打开。</li><li>4.客户端创建socket</li><li>5.客户端打开socket，根据服务器的ip地址和端口号试图连接服务器socket</li><li>6.服务器socket接收到客户端socket请求，被动打开，开始接收客户端请求，直到客户端返回连接信息。这时候socket进入阻塞状态，所谓阻塞即accept()方法一直到客户端返回连接信息后才返回，开始接收下一个客户端谅解请求。</li><li>7.客户端连接成功，向服务端发送连接状态信息。</li><li>8.服务器accept方法返回，连接成功</li><li>9.客户端向socket写入信息</li><li>10.服务器读取信息</li><li>11.客户端关闭</li><li>12.服务器关闭</li></ul><h5 id="1-三次握手"><a href="#1-三次握手" class="headerlink" title="1.三次握手"></a>1.三次握手</h5><p>在客户端和服务端建立TCP连接的过程中会发生有名的<strong>三次握手</strong></p><p><img src="/images/pasted-23.png" alt="upload successful"></p><p>第一次握手：客户端会尝试连接服务器，向服务器发送syn包，syn=j，客户端进入syn_send状态等待服务器确认。</p><p>第二次握手：服务器接收客户端syn包并确认(ack=j+1),同时向客户端发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态。</p><p>第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1),此包发送完毕，客户端和服务器进入ESTABLISHED(已确认)，完成三次握手。</p><p>值得强调的是<strong>accept()</strong>这个方法，内核会创建两个队列，SYN队列和accept队列，其中accept队列的长度由backlog指定。服务器在调用accept之后，阻塞，等待accept队列有元素，当三次握手结束后服务器会把客户端从syn队列转移到accept队列，而accept()被唤醒，从accept队列中取出请求方，重新建立一个socket用于准备发送和接收数据，原来的socket还在监听哪个端口。换一句话说，socket()返回的套接字用于监听(listen)和接受(accept)客户端请求，这个套接字不能用于与客户端之间发送和接受数据。accept()接受一个客户端的连接请求，并返回一个新的套接字。所谓“新的”就是说这个套接字与socket()返回的套接字不是同一个socket。这个新的套接字用于与这次接受的客户端之间的通信。</p><h5 id="2-四次握手"><a href="#2-四次握手" class="headerlink" title="2.四次握手"></a>2.四次握手</h5><p>当客户端发送信息完毕之后，客户端会与服务端断开连接，此时会发生<strong>4次挥手</strong>。<br><img src="/images/pasted-24.png" alt="upload successful"></p><p>第一次挥手：先由客户端向服务器端发送一个FIN，请求关闭数据传输。</p><p>第二次挥手：当服务器接收到客户端的FIN时，向客户端发送一个ACK，其中ack的值等于FIN+SEQ，此时客户端不再向服务端发送消息，但是服务端还可以向客户端发送信息。</p><p>第三次挥手：服务端向客户端发送一个FIN，去告诉客户端关闭应用。</p><p>第四次挥手：当客户端收到服务端的FIN时，发送一个ACK给服务器。其中ACK的值等于FIN+SEQ。</p><h4 id="三-socket实例"><a href="#三-socket实例" class="headerlink" title="三. socket实例"></a>三. socket实例</h4><h5 id="demo1-同步实例"><a href="#demo1-同步实例" class="headerlink" title="demo1 同步实例"></a>demo1 同步实例</h5><p>这里我抛出来一些简单的socket的demo，先贴出服务端的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">''</span></span><br><span class="line">PORT = <span class="number">11113</span></span><br><span class="line">BUFSIZE = <span class="number">4096</span></span><br><span class="line">ADDR = (HOST, PORT)</span><br><span class="line"></span><br><span class="line">tcpServer = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">tcpServer.bind(ADDR)</span><br><span class="line">tcpServer.listen(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">'waiting for connection...'</span>)</span><br><span class="line">    tcpClient, addr = tcpServer.accept()</span><br><span class="line">    print(addr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        data = tcpClient.recv(BUFSIZE)</span><br><span class="line">        print(data.decode())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            print(<span class="string">'---------'</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        buf = <span class="string">'['</span> + ctime() + <span class="string">']'</span> + data.decode()</span><br><span class="line">        tcpClient.send(buf.encode())</span><br><span class="line"></span><br><span class="line">    tcpClient.close()</span><br><span class="line">tcpServer.close()</span><br></pre></td></tr></table></figure><p>服务端会一直监听11113端口，直到有客户端连接进来，会创建一个新的socket用于交换信息。<br>下面是客户端的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'localhost'</span></span><br><span class="line">PORT = <span class="number">11113</span></span><br><span class="line">BUFSIZE = <span class="number">4096</span></span><br><span class="line">ADDR = (HOST, PORT)</span><br><span class="line"></span><br><span class="line">tcpClient = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">tcpClient.connect(ADDR)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    data = input(<span class="string">'&gt; '</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    tcpClient.send(data.encode())</span><br><span class="line"></span><br><span class="line">    data = tcpClient.recv(BUFSIZE)</span><br><span class="line">    print(data.decode())</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">tcpClient.close()</span><br></pre></td></tr></table></figure><p>这个demo基本上涵盖了socket通信的整个流程，但是demo中有一些缺点，因为socket.recv()是阻塞的，所以当服务端执行到recv()的时候，会一直等待，直到客户端发送消息才能够继续往下执行代码。这样的结构对于一些实时性要求比较高的场景很不友好。比如说，我们在用实时的视频流进行监控和一些异常计算，当有异常现象的时候，我们会与巡逻小车进行socket进行通信来处理异常，这就要求我们既要能够实时接收摄像头传来的视频流，又要接巡逻小车发来的指令信号，使用上述的demo作为框架就显得不那么合适了。</p><h5 id="2-demo2-异步实例"><a href="#2-demo2-异步实例" class="headerlink" title="2. demo2 异步实例"></a>2. demo2 异步实例</h5><p>有一种解决方法就是使用异步通信来解决，这样我们可以对传来的数据进行监听，当监听到有客户端传来请求时，我们会对传来的消息进行解析处理；当客户端没有传来请求时，服务端就会处理自己的事情。在python中可以使用select完成异步通信，下面有一个demo，这里我只抛出来客户端的demo，服务端的异步处理同客户端：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'localhost'</span></span><br><span class="line">PORT = <span class="number">6688</span></span><br><span class="line">BUFSIZE = <span class="number">4096</span></span><br><span class="line">ADDR = (HOST, PORT)</span><br><span class="line"></span><br><span class="line">tcpClient = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">tcpClient.connect(ADDR)</span><br><span class="line"></span><br><span class="line">input = [tcpClient]</span><br><span class="line"><span class="comment"># tcpClient.setblocking(False)</span></span><br><span class="line">print(<span class="string">"["</span>+time.ctime()+<span class="string">"]"</span>  +<span class="string">"发现异常"</span>)</span><br><span class="line">data_exchange = &#123;<span class="string">'Position'</span>:<span class="number">0</span>, <span class="string">'CarArrived'</span>:<span class="literal">False</span>, <span class="string">'ResetCarPosition'</span>:<span class="literal">False</span>, <span class="string">'CarPatrol'</span>:<span class="literal">False</span>&#125;</span><br><span class="line">data = json.dumps(data_exchange)</span><br><span class="line">tcpClient.send(data.encode())</span><br><span class="line">tcpClient.settimeout(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    rs, ws, es = select.select(input, [], [], <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> indata <span class="keyword">in</span> rs:</span><br><span class="line">        <span class="keyword">if</span> indata == tcpClient:</span><br><span class="line">            data = tcpClient.recv(BUFSIZE)</span><br><span class="line">            <span class="keyword">if</span> data:</span><br><span class="line">                car_recv = data.decode()</span><br><span class="line">                data_exchange = json.loads(car_recv)</span><br><span class="line">                <span class="keyword">if</span> data_exchange[<span class="string">'CarPatrol'</span>] == <span class="literal">True</span>:</span><br><span class="line">                    print(<span class="string">"["</span>+time.ctime()+<span class="string">"]"</span>  +<span class="string">"小车已经就绪，重置实验"</span>)</span><br><span class="line">                    data_exchange = &#123;<span class="string">'Position'</span>:<span class="number">0</span>, <span class="string">'CarArrived'</span>:<span class="literal">False</span>, <span class="string">'ResetCarPosition'</span>:<span class="literal">False</span>, <span class="string">'CarPatrol'</span>:<span class="literal">False</span>&#125;</span><br><span class="line">                <span class="keyword">elif</span> data_exchange[<span class="string">'CarArrived'</span>] == <span class="literal">True</span>:</span><br><span class="line">                    print(<span class="string">"["</span>+time.ctime()+<span class="string">"]"</span>  +<span class="string">"小车已经到达异常点，开始处理异常"</span>)</span><br><span class="line">                    time.sleep(<span class="number">3</span>)</span><br><span class="line">                    print(<span class="string">"["</span>+time.ctime()+<span class="string">"]"</span>  +<span class="string">"处理异常结束，小车归位"</span>)</span><br><span class="line">                    data_exchange[<span class="string">'ResetCarPosition'</span>] = <span class="literal">True</span></span><br><span class="line">                    data = json.dumps(data_exchange)</span><br><span class="line">                    tcpClient.send(data.encode())</span><br><span class="line">    print(<span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tcpClient.close()</span><br></pre></td></tr></table></figure><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><p><a href="https://blog.csdn.net/qq_38131333/article/details/81533192" target="_blank" rel="noopener">网络OSI七层模型、TCP/IP模型以及数据发送封装与解封装过程</a></p><p><a href="https://www.cnblogs.com/dolphinX/p/3460545.html" target="_blank" rel="noopener">简单理解Socket</a></p><p><a href="https://blog.csdn.net/weixin_42255385/article/details/82119968" target="_blank" rel="noopener">socket中accept()函数的理解</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;socket编程&quot;&gt;&lt;a href=&quot;#socket编程&quot; class=&quot;headerlink&quot; title=&quot;socket编程&quot;&gt;&lt;/a&gt;socket编程&lt;/h3&gt;&lt;p&gt;最近做项目，需要了解一些socket编程的相关知识，因为本身在大学的时候也接触过socket
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://qq19971017.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="https://qq19971017.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
      <category term="socket" scheme="https://qq19971017.github.io/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>Docker 学习基础(2) —Dockerfile</title>
    <link href="https://qq19971017.github.io/2020/05/26/Docker-%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80-2-%E2%80%94dockerfile/"/>
    <id>https://qq19971017.github.io/2020/05/26/Docker-%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80-2-%E2%80%94dockerfile/</id>
    <published>2020-05-26T06:08:00.000Z</published>
    <updated>2020-05-26T08:16:16.576Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>今天带来dockerfile的第二篇文档————Dockerfile，Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。我们可以用java的源码和class文件进行类比，如果我们将image文件比做为一个个类文件，那么Dockerfile就可以看成是源码文件。当我们在Dockerfile文件中写好我们希望构建的镜像之后，可以使用docker build来读取Dockerfile中的指令构建我们的镜像。</p><h4 id="一-Dockerfile相关指令以及build指令"><a href="#一-Dockerfile相关指令以及build指令" class="headerlink" title="一. Dockerfile相关指令以及build指令"></a>一. Dockerfile相关指令以及build指令</h4><ul><li>FORM 基础镜像，当前新镜像是基于哪个镜像的</li><li>MAINTAINER 镜像维护者的姓名和邮箱</li><li>RUN 容器构建时需要运行的命令</li><li>EXPOSE 当前容器对外暴露出的端口</li><li>WORKDIR 指定在创建容器后，终端默认登陆进来的工作目录，一个落脚点</li><li>ENV 用来在构建镜像过程中设置环境变量</li><li>ADD 将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包</li><li>COPY 类似ADD，拷贝文件和目录到镜像中，注意这个不会解压</li><li>VOLUME 容器数据卷，用于数据保存和持久化操作</li><li>CMD 指定一个容器启动时要运行的命令，dockerfile可以有多个cmd，但是只有最后一个生效</li><li>ENTRYPOINT 指定一个容器启动时要运行的命令，不会被覆盖，会追加</li><li>ONBUILD 当构建一个被继承的Dockerfile时运行命令，父镜像在被子继承后父镜像的onbuild会被触发，类似于一个触发器</li></ul><p>build指令解释如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build [OPTIONS] PATH | URL | -</span><br></pre></td></tr></table></figure><p>关于options有一些说明：</p><ul><li>–build-arg=[] :设置镜像创建时的变量</li><li>–cpu-shares :设置 cpu 使用权重；</li><li>–cpu-period :限制 CPU CFS周期；</li><li>–cpu-quota :限制 CPU CFS配额；</li><li>–cpuset-cpus :指定使用的CPU id；</li><li>–cpuset-mems :指定使用的内存 id；</li><li>–disable-content-trust :忽略校验，默认开启；</li><li>-f :指定要使用的Dockerfile路径；</li><li>–force-rm :设置镜像过程中删除中间容器；</li><li>–isolation :使用容器隔离技术；</li><li>–label=[] :设置镜像使用的元数据；</li><li>-m :设置内存最大值；</li><li>–memory-swap :设置Swap的最大值为内存+swap，”-1”表示不限swap；</li><li>–no-cache :创建镜像的过程不使用缓存；</li><li>–pull :尝试去更新镜像的新版本；</li><li>–quiet, -q :安静模式，成功后只输出镜像 ID；</li><li>–rm :设置镜像成功后删除中间容器；</li><li>–shm-size :设置/dev/shm的大小，默认值是64M；</li><li>–ulimit :Ulimit配置。</li><li>–tag, -t: 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。</li><li>–network: 默认 default。在构建期间设置RUN指令的网络模式</li></ul><p>下面我们举一个例子来构建自己的dockerfile</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FROM contos</span><br><span class="line"></span><br><span class="line">ENV MYPATH &#x2F;usr&#x2F;local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo &quot;success-------ok&quot;</span><br><span class="line">CMD &#x2F;bin&#x2F;bash</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里我们引入原始的centos镜像，然后设置工作路径为 /usr/local，并在这个linux系统中装入vim和net-tools组建，最后我们输出我们的工作路径和success。</p><p>使用build指令进行镜像构建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f &#x2F;mydocker&#x2F;DockerFile -t mycentos:1.3 .</span><br></pre></td></tr></table></figure><p>这里我遇到了一个坑，就是我是在根目录下构建的images，就会出现问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error checking context: &#39;no permission to read from&#39;&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;route&#x2F;flush&#39;&#39;.</span><br></pre></td></tr></table></figure><p>这里我们一定不要在根目录下进行build操作。</p><p>最终结果就是成功构建，我们使用docker images 可以看到：<br><img src="/images/pasted-18.png" alt="upload successful"></p><h4 id="二-参考文献"><a href="#二-参考文献" class="headerlink" title="二. 参考文献"></a>二. 参考文献</h4><p><a href="https://www.bilibili.com/video/BV18b411K7q7" target="_blank" rel="noopener">尚硅谷docker核心技术</a><br><a href="https://docs.docker.com/" target="_blank" rel="noopener">docker官方文档</a><br><a href="https://www.runoob.com/docker/docker-build-command.html" target="_blank" rel="noopener">docker build 命令 菜鸟教程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Dockerfile&quot;&gt;&lt;a href=&quot;#Dockerfile&quot; class=&quot;headerlink&quot; title=&quot;Dockerfile&quot;&gt;&lt;/a&gt;Dockerfile&lt;/h3&gt;&lt;p&gt;今天带来dockerfile的第二篇文档————Dockerfile，Doc
      
    
    </summary>
    
    
      <category term="docker" scheme="https://qq19971017.github.io/categories/docker/"/>
    
    
      <category term="dock er" scheme="https://qq19971017.github.io/tags/dock-er/"/>
    
  </entry>
  
  <entry>
    <title>Docker 基础学习(1)</title>
    <link href="https://qq19971017.github.io/2020/05/23/Docker-%E5%AD%A6%E4%B9%A0/"/>
    <id>https://qq19971017.github.io/2020/05/23/Docker-%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-05-23T07:26:00.000Z</published>
    <updated>2020-05-24T06:32:56.965Z</updated>
    
    <content type="html"><![CDATA[<h3 id="docker基础学习-1"><a href="#docker基础学习-1" class="headerlink" title="docker基础学习(1)"></a>docker基础学习(1)</h3><p>今天在天池参加了一个比赛，里面涉及到了docker的容器技术的打包，之前一直没有接触过这些东西，所以乘着周末学习了一些docker基础知识。</p><h4 id="一-什么是docker"><a href="#一-什么是docker" class="headerlink" title="一. 什么是docker"></a>一. 什么是docker</h4><p>我们从官方文档里面可以看到，docker是为程序员提供一个可以构建、运行和移植的容器。这个容器可以帮助程序员们快速部署应用，这样的功能被称之为容器化。</p><p>容器化有以下几个特点：</p><ul><li>灵活：即使是很复杂的程序，也可以被放在容器中。</li><li>轻量级：容器内的应用运行于主机的内核系统，并可以共享内核资源，这样就比虚拟机更轻量化，可以快速创建和启动。</li><li>可移植性：容器可以在本地创建，在云端部署，并在任何地方运行。</li><li>松耦合： 容器具有高度的封装性，可以在不破坏其他容器的前提下完成容器的升级或替换。</li><li>可扩展： 我们可以自动扩充并自动部署容器副本。</li><li>安全性：我们不需要手动配置任何参数，容器会帮助我们自动约束和隔离应用。</li></ul><p>docker容器并不仅仅是一个正在运行的线程，它增加了一些封装的功能使得其与主机和其他的容器相互隔离，实现隔离功能的最主要的原因是容器可以和内部的镜像文件进行交互，一个镜像文件包括了程序运行的一切代码或二进制文件、依赖项、以及所需的任何其他的文件系统对象。</p><h4 id="二-docker和VM的对比"><a href="#二-docker和VM的对比" class="headerlink" title="二. docker和VM的对比"></a>二. docker和VM的对比</h4><p>由下图我们可以看到，docker在linux本地运行，并与其他容器共享主机的内核，当他运行一个独立的进程的时候，不会占用其他可执行文件的内存，容器内部只有程序以及所依赖的二进制文件和依赖哭，并与其他容器相隔离，这种轻巧的特性使得容器可以在几秒内启动。<br><img src="/images/pasted-15.png" alt="upload successful"></p><p>相比之下虚拟机的虚拟的是整个操作系统，包括硬件的设置，这样的方式使得VM会产生大量的开销，超出了应用程序逻辑所消耗的的开销。</p><h4 id="三-docker架构"><a href="#三-docker架构" class="headerlink" title="三. docker架构"></a>三. docker架构</h4><p>在看架构图之前，我们先来了解一下docker的三个基本概念：镜像、容器、仓库。</p><ul><li>镜像：镜像是只读，里面有需要运行的文件。它通常是用来创建容器的，镜像可以创建多个容器；我们可以在本地创建镜像也可以通过docker pull从仓库中下载。</li><li>容器：容器是镜像的运行的一个实例，我们在使用镜像创建容器的时候可以配置一定的参数，来约束容器的运行。容器的运行是相互独立的，容器之间是不会影响的，这样可以保证容器可以运行在一个相对安全的地方。</li><li>仓库：仓库是用来管理、存储镜像的，最有名的仓库就是docker hub，其他的比如国内阿里云的镜像仓库、网易晕的镜像仓库都是用来管理镜像的远程仓库，他们为我们提供下载上传渠道。<br><img src="/images/pasted-17.png" alt="upload successful"></li></ul><p>如上图，docker架构一共分为三个部分，docker 客户端， docker服务端，和docker注册中心。docker客户端用于发送docker指令，并与docker的守护进程进行通信，守护进程会对指令进行分析，并执行指令，注册中心就是仓库，它用来共享和管理dicker镜像，当我们使用docker pull的时候，docker守护进程会从指定的仓库中拉取镜像并放到本地，这样我们在使用docker run创建容器的时候，就可以直接使用本地的镜像直接创建容器。</p><h4 id="四-docker常用指令"><a href="#四-docker常用指令" class="headerlink" title="四. docker常用指令"></a>四. docker常用指令</h4><p>docker 有一些比较常用的指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">1. 从仓库拉取镜像</span><br><span class="line">docker pull [image name:tag]</span><br><span class="line">2. 查看本地的所有镜像</span><br><span class="line">docker images</span><br><span class="line">3. 查看运行的容器</span><br><span class="line">docker ps</span><br><span class="line">4. 查看所有的容器</span><br><span class="line">docker ps -a</span><br><span class="line">5. 删除镜像</span><br><span class="line">docker rmi [image name:tag]</span><br><span class="line">6. 启动、停止、重启容器命令</span><br><span class="line">docker start container_name&#x2F;container_id</span><br><span class="line">docker stop container_name&#x2F;container_id</span><br><span class="line">docker restart container_name&#x2F;container_id</span><br><span class="line">7.  -i 以交互模式运行容器</span><br><span class="line">-t 为容器重新分配一个伪输入终端</span><br><span class="line">    -d 在后台运行  </span><br><span class="line">docker run -i -t container_name&#x2F;container_id</span><br><span class="line">8. 删除容器的命令：</span><br><span class="line">docker rm container_name&#x2F;container_id</span><br><span class="line">9. 查看docker信息</span><br><span class="line">docker info</span><br><span class="line">10. 使用镜像创建docker容器</span><br><span class="line">docker run container_name&#x2F;container_id</span><br><span class="line">11. 查看docker 日志</span><br><span class="line">-t 打印时间</span><br><span class="line">    -f 持续打印</span><br><span class="line">    -tail 显示日志总数</span><br><span class="line">docker logs</span><br><span class="line">12. 进入后台</span><br><span class="line">docker attach container_id</span><br><span class="line">13. 进入后台，退出容器不会停止</span><br><span class="line">docker exec -it container_id &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><p>更多的指令我们可以在docker –help中查看。</p><h4 id="四-参考文献"><a href="#四-参考文献" class="headerlink" title="四. 参考文献"></a>四. 参考文献</h4><p><a href="https://www.bilibili.com/video/BV18b411K7q7" target="_blank" rel="noopener">尚硅谷docker核心技术</a><br><a href="https://docs.docker.com/" target="_blank" rel="noopener">docker官方文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;docker基础学习-1&quot;&gt;&lt;a href=&quot;#docker基础学习-1&quot; class=&quot;headerlink&quot; title=&quot;docker基础学习(1)&quot;&gt;&lt;/a&gt;docker基础学习(1)&lt;/h3&gt;&lt;p&gt;今天在天池参加了一个比赛，里面涉及到了docker的容器
      
    
    </summary>
    
    
      <category term="docker" scheme="https://qq19971017.github.io/categories/docker/"/>
    
    
      <category term="dokcer" scheme="https://qq19971017.github.io/tags/dokcer/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot-2.2.6 无法配置@ConfigurationProperties</title>
    <link href="https://qq19971017.github.io/2020/04/24/SpringBoot-2-2-6-%E6%97%A0%E6%B3%95%E9%85%8D%E7%BD%AE-ConfigurationProperties/"/>
    <id>https://qq19971017.github.io/2020/04/24/SpringBoot-2-2-6-%E6%97%A0%E6%B3%95%E9%85%8D%E7%BD%AE-ConfigurationProperties/</id>
    <published>2020-04-24T13:17:00.000Z</published>
    <updated>2020-05-23T14:01:25.691Z</updated>
    
    <content type="html"><![CDATA[<p>今天在使用SpringBoot 2.2.6 配置@ConfigurationProperties注解是，发生错误，看一些博客也没有解决问题，在这里记录一下。</p><p>首先查找blog，发现在pom添加 spring-boot-configuration-processor配置包就可以了，于是去maven依赖包中查找，代码如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2.6.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>但是maven始终无法解析这个依赖包，可能还未上传的缘故，解决方法，将依赖包的版本往前退一个，改为2.1.6就可以了</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.6.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在使用SpringBoot 2.2.6 配置@ConfigurationProperties注解是，发生错误，看一些博客也没有解决问题，在这里记录一下。&lt;/p&gt;
&lt;p&gt;首先查找blog，发现在pom添加 spring-boot-configuration-process
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://qq19971017.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="https://qq19971017.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>设计模式(3)——代理模式</title>
    <link href="https://qq19971017.github.io/2020/04/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-3-%E2%80%94%E2%80%94%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>https://qq19971017.github.io/2020/04/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-3-%E2%80%94%E2%80%94%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-04-05T14:27:00.000Z</published>
    <updated>2020-04-06T07:54:58.060Z</updated>
    
    <content type="html"><![CDATA[<p>之前我们说过反射机制，今天我们聊一聊反射机制相关的一个设计模式————代理模式，代理模式中的动态代理就是应用了我们反射来动态生成代理对象完成方法调用。</p><h3 id="一-代理模式概念"><a href="#一-代理模式概念" class="headerlink" title="一. 代理模式概念"></a>一. 代理模式概念</h3><p>代理模式是给某一个对象提供一个代理，并由代理对象来控制对真实对象的访问。</p><p>当我们想对一个对象增加一些附加的功能，例如权限的验证、增加日志功能，同时我们又不想破坏对象本身的结构，我们就可以创建一个和这个对象功能相同的代理对象，通过对代理对象的方法调用，间接调用被代理的对象，还可以在方法调用的前后增加一些附加的功能，以达到增强对象的目的。</p><p>代理模式一共有三种，静态代理模式、动态代理模式、gclib代理模式。</p><h3 id="二-静态代理模式"><a href="#二-静态代理模式" class="headerlink" title="二. 静态代理模式"></a>二. 静态代理模式</h3><p><img src="/images/pasted-13.png" alt="upload successful"></p><p>如图，我们在有一个ITeacherDao接口，然后我们又创建一个类TeacherDao实现了ITeacherDao接口，当我们在使用这个类的时候，我们希望对类中实现的teache方法做一些增强。这里我们创建TeacherProxy代理类同样实现了ITeacherDao接口，并通过构造函数，传入接口参数来间接对TeacherDao形成依赖关系。代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ITeacherDao</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">teach</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//实现方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherDao</span> <span class="keyword">implements</span> <span class="title">ITeacherDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">teach</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"老师教学生"</span> + name);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherProxy</span> <span class="keyword">implements</span> <span class="title">ITeacherDao</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ITeacherDao target;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用接口来代理目标乐居</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TeacherProxy</span><span class="params">(ITeacherDao target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">teach</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"代理开始"</span>);</span><br><span class="line">        String stu = target.teach(name);</span><br><span class="line">        System.out.println(<span class="string">"代理结束"</span>);</span><br><span class="line">        <span class="keyword">return</span> stu;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们向TeacherProxy传入ITeacherDao对象target，并通过构造函数传入被代理对象，在实现teach方法的过程中，通过调用被代理类的teach方法达到方法增强的效果。在实现过程中我们用到了泛型操作，这使得我们可以创建新的ITeacherDao实现类，而无需修改代理类的代码。</p><p>静态代理的优点：</p><ul><li>易于理解和实现</li><li>代理类和真实类的关系是编译期静态决定的，和下文马上要介绍的动态代理比较起来，执行时没有任何额外开销。</li></ul><p>静态代理的缺点：<br>对于每一个接口都需要一个创建新的代理类，当一个工程创建的接口增多时，我们需要创建和维护的代理类也会增多，这无疑是增加工程的代码量和复杂度，不易于管理和维护。</p><h3 id="三-动态代理模式"><a href="#三-动态代理模式" class="headerlink" title="三. 动态代理模式"></a>三. 动态代理模式</h3><p>动态代理模式也叫做JDK代理模式，它是通过调用JDK的Proxy类newProxyInstance()来实现对象代理，他会使代理类在运行时动态的生成。<br><strong>JDK中生成代理对象的API：</strong></p><p>代理类所在包:java.lang.reflect.Proxy<br>JDK实现代理只需要使用newProxyInstance方法,但是该方法需要接收三个参数,完整的写法是:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader, Class [] interfaces, InvocationHandler handler)</span></span></span><br></pre></td></tr></table></figure><p>这是一个静态方法，且接收的三个参数依次为:</p><ul><li>ClassLoader loader： 指定当前被委托对象使用类加载器,用null表示默认类加载</li><li>Class [] interfaces： 指定被委托对象实现的接口。</li><li>InvocationHandler handler： 调用处理器,执行目标对象的方法时,会触发调用处理器的方法,从而把当前执行目标对象的方法作为参数传入</li></ul><p>java.lang.reflect.InvocationHandler：这是调用处理器接口，它自定义了一个 invoke 方法，用于集中处理在动态代理类对象上的方法调用，通常在该方法中实现对委托类的代理访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该方法负责集中处理动态代理类上的所有方法调用。</span></span><br><span class="line"><span class="comment">//第一个参数既是代理类实例，</span></span><br><span class="line"><span class="comment">//第二个参数是被调用的方法对象</span></span><br><span class="line"><span class="comment">// 第三个参数是调用方法的参数。</span></span><br><span class="line"><span class="function">Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br></pre></td></tr></table></figure><p>当我们在调用代理类的方法的时候，代理类会转而进入到InvocationHandler的invoke方法中从而操作被代理对象调用相应的方法。这样我们就可以对被代理对象进行统一的处理，也可以更具参数的不同对被代理对象进行风别处理。</p><p>我们在使用JDK动态代理时，通过创建一个代理工厂生成代理对象，并动态执行被代理对象的方法调用，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span></span>&#123;</span><br><span class="line">    Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getNewInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Object o = Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">"代理开始"</span>);</span><br><span class="line">                        Object ObjectReturn = method.invoke(target, args);</span><br><span class="line">                        System.out.println(<span class="string">"代理结束"</span>);</span><br><span class="line">                        <span class="keyword">return</span> ObjectReturn;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们点开newProxyInstance源码可以看到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span></span><br><span class="line"><span class="function"><span class="params">                                          Class&lt;?&gt;[] interfaces,</span></span></span><br><span class="line"><span class="function"><span class="params">                                          InvocationHandler h)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalArgumentException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Objects.requireNonNull(h);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class="line">        <span class="keyword">final</span> SecurityManager sm = System.getSecurityManager();</span><br><span class="line">        <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">            checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Look up or generate the designated proxy class.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">         </span><br><span class="line">         <span class="comment">//生成代理类</span></span><br><span class="line">        Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Invoke its constructor with the designated invocation handler.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">                checkNewProxyPermission(Reflection.getCallerClass(), cl);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//利用代理类生构造器</span></span><br><span class="line">            <span class="keyword">final</span> Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class="line">            <span class="keyword">final</span> InvocationHandler ih = h;</span><br><span class="line">            <span class="keyword">if</span> (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class="line">                AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        cons.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//利用构造器在生成实例</span></span><br><span class="line">            <span class="keyword">return</span> cons.newInstance(<span class="keyword">new</span> Object[]&#123;h&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException|InstantiationException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e.toString(), e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            Throwable t = e.getCause();</span><br><span class="line">            <span class="keyword">if</span> (t <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (RuntimeException) t;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(t.toString(), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e.toString(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们可以看到newProxyInstance现为我们生成了一个代理类，再利用代理类生成一个构造器，最后用构造器生成代理对象。这里我们看到构造器传入了constructorParams，我们追踪一下源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Class&lt;?&gt;[] constructorParams =</span><br><span class="line">        &#123; InvocationHandler<span class="class">.<span class="keyword">class</span> &#125;</span>;</span><br></pre></td></tr></table></figure><p>发现constructorParams是一个包含了InvocationHandler.class的数组，其实我们最终生成代理类会包含一个InvocationHandler对象h，当我们调用代理对象的方法的时候，实际上调用调用的是h的invoke()方法进而调用实际的方法。我们接下来用idea的反编译看一下生成的class类文件，反编译的操作是在VM options中添加：-Dsun.misc.ProxyGenerator.saveGeneratedFiles=true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sun.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mjj.proxy.JDKproxy.ITeacherDao;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> $<span class="title">Proxy0</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">ITeacherDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler var1) <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object var1)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Boolean)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m1, <span class="keyword">new</span> Object[]&#123;var1&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var3;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m2, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">teacher</span><span class="params">(String var1)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m3, <span class="keyword">new</span> Object[]&#123;var1&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var3;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m0, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"equals"</span>, Class.forName(<span class="string">"java.lang.Object"</span>));</span><br><span class="line">            m2 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"toString"</span>);</span><br><span class="line">            m3 = Class.forName(<span class="string">"com.mjj.proxy.JDKproxy.ITeacherDao"</span>).getMethod(<span class="string">"teacher"</span>, Class.forName(<span class="string">"java.lang.String"</span>));</span><br><span class="line">            m0 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"hashCode"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(var2.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里我们可以清晰的看到代理类在初始化的时候通过反射加载方法，在调用方法的时候实际上是调用我们传入的InvocationHandler的方法。本质上代理类和被代理类都实现了相同的接口，拥有相似的结构，而在方法的调用上都是通过反射实现对代理类的调用。</p><p>我们维护的动态代理类生成器ProxyFactory无需实现接口，具有可维护、易扩展的特点，具体的源代码可以参考这个链接（<a href="https://blog.csdn.net/yhl_jxy/article/details/80586785" target="_blank" rel="noopener">JDK动态代理实现原理(jdk8)</a>）但是JDK动态代理有一个无法避免的缺点就是，被代理类必须实现接口。若我们想代理一个没有实现接口的类，我们就不能使用这种方法，而只能使用我们下面介绍的cglib代理。</p><h3 id="三-cglib代理模式"><a href="#三-cglib代理模式" class="headerlink" title="三. cglib代理模式"></a>三. cglib代理模式</h3><p>cglib代理模式不需要被代理的对象实现接口，其底层是通过ASM字节码框架生成类的字节码，达到动态创建类的目的。它利用ASM开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。下面我借用一下别人的uml类图来说明一下：</p><p><img src="/images/pasted-14.png" alt="upload successful"><br>cglib通过先创建了代理类并实例化proxy，proxy通过继承关系继承被代理类，然后通过对父类方法的重写以达到业务增强的效果。<br>实例代码如下：</p><p><strong>创建目标类：Target：</strong>方法简单输出一句话</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行目标类的方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建目标类的方法增强拦截器：TargetMethodInterceptor：</strong>在拦截器内部，调用目标方法前进行前置和后置增强处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetMethodInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj, Method method, Object[] args, </span></span></span><br><span class="line"><span class="function"><span class="params">                            MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法拦截增强逻辑-前置处理执行"</span>);</span><br><span class="line">        Object result = proxy.invokeSuper(obj, args);</span><br><span class="line">        System.out.println(<span class="string">"方法拦截增强逻辑-后置处理执行"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>生成代理类，并测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibDynamicProxyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置生成代理类的父类class对象</span></span><br><span class="line">        enhancer.setSuperclass(Target<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置增强目标类的方法拦截器</span></span><br><span class="line">        MethodInterceptor methodInterceptor = <span class="keyword">new</span> TargetMethodInterceptor();</span><br><span class="line">        enhancer.setCallback(methodInterceptor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成代理类并实例化</span></span><br><span class="line">        Target proxy = (Target) enhancer.create();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用代理类调用方法</span></span><br><span class="line">        proxy.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试输出：可以看到成功进行了业务增强的处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">方法拦截增强逻辑-前置处理执行</span><br><span class="line">执行目标类的方法</span><br><span class="line">方法拦截增强逻辑-后置处理执行</span><br></pre></td></tr></table></figure><h3 id="四-动态代理和cglib对比"><a href="#四-动态代理和cglib对比" class="headerlink" title="四. 动态代理和cglib对比"></a>四. 动态代理和cglib对比</h3><ul><li>实现方式不同<br>动态代理是利用<strong>相同接口</strong>实现和被代理类相同结构代理类，再利用<strong>反射机制</strong>实现方法代理，而cglib是利用<strong>asm框架</strong>操作字节码文件生层代理类，再利用<strong>继承关系</strong>实现代理。</li><li>使用方式不同<br>动态代理要求代理对象必须实现接口，而cglib虽然不需要被代理对象实现接口，但是由于使用了继承关系，所以cglib无法代理final对象。</li><li>效率对比<br>关于两者之间的性能的话，网上有人对于不通版本的jdk进行测试，经过多次试验，测试结果大致是这样的，在1.6和1.7的时候，JDK动态代理的速度要比CGLib动态代理的速度要慢，但是并没有教科书上的10倍差距，在JDK1.8的时候，JDK动态代理的速度已经比CGLib动态代理的速度快很多了，但是JDK动态代理和CGLIB动态代理的适用场景还是不一样的哈！</li></ul><h3 id="五-参考文献"><a href="#五-参考文献" class="headerlink" title="五. 参考文献"></a>五. 参考文献</h3><p><a href="https://segmentfault.com/a/1190000009235245" target="_blank" rel="noopener">Java的三种代理模式</a><br><a href="https://zhuanlan.zhihu.com/p/41869538" target="_blank" rel="noopener">Java代理设计模式的四种具体实现：静态代理和动态代理</a><br><a href="https://www.zhihu.com/question/20794107" target="_blank" rel="noopener">Java 动态代理作用是什么？</a><br><a href="https://zhuanlan.zhihu.com/p/106336169" target="_blank" rel="noopener">Java：聊聊JDK和CGLib动态代理实现和区别</a><br><a href="https://www.jianshu.com/p/3caa0c23a157" target="_blank" rel="noopener">设计模式（11）动态代理 JDK VS CGLIB面试必问</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前我们说过反射机制，今天我们聊一聊反射机制相关的一个设计模式————代理模式，代理模式中的动态代理就是应用了我们反射来动态生成代理对象完成方法调用。&lt;/p&gt;
&lt;h3 id=&quot;一-代理模式概念&quot;&gt;&lt;a href=&quot;#一-代理模式概念&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://qq19971017.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://qq19971017.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>深入反射机制(1)——基础</title>
    <link href="https://qq19971017.github.io/2020/04/05/%E6%B7%B1%E5%85%A5%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6-1-%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80/"/>
    <id>https://qq19971017.github.io/2020/04/05/%E6%B7%B1%E5%85%A5%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6-1-%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80/</id>
    <published>2020-04-04T16:47:00.000Z</published>
    <updated>2020-04-05T03:38:10.436Z</updated>
    
    <content type="html"><![CDATA[<p>之前在看springIOC的视频，里面设计到了很多反射的知识，我对反射一直停留在会用的阶段，借着这个机会好好学习一下Java的反射机制。</p><h3 id="一-反射基本概念"><a href="#一-反射基本概念" class="headerlink" title="一. 反射基本概念"></a>一. 反射基本概念</h3><p>反射机制是指在<strong>程序运行期间对于任意一个类可以知道它的全部属性和方法，对于任意一个对象可以调用他的所有方法。</strong>这种 动态的获取信息 以及 动态调用对象的方法 的功能称为 java 的反射机制。</p><p>一般来说我们可以通过new一个对象来达到正向创建对象的目的，这样创建出来的对象类型是编译期可知的，而我们可以借助反射机制在运行期间通过Class动态创建对象，这样的对象往往在编译期间是不可知的。</p><p>Java 反射主要提供以下功能：</p><ul><li>在运行时判断任意一个对象所属的类；（isInstance）</li><li>在运行时构造任意一个类的对象；（newInstance）</li><li>在运行时判断任意一个类所具有的成员变量和方法（通过反射甚至可以调用private方法）；</li><li>在运行时调用任意一个对象的方法（invoke）</li></ul><h3 id="二-反射的使用"><a href="#二-反射的使用" class="headerlink" title="二. 反射的使用"></a>二. 反射的使用</h3><h4 id="Class类获取"><a href="#Class类获取" class="headerlink" title="Class类获取"></a>Class类获取</h4><p>提到反射的使用，就不得不提class类，class类是标示一个运行时类的具体信息，它由JVM在装载一个类的时候自动创建用于记录该类的相关信息并存放在虚拟机堆中。他的创建方式一共有三种</p><p>第一种，使用 Class.forName 静态方法。当你知道该类的全路径名时，你可以使用该方法获取 Class 类对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class clz = Class.forName(<span class="string">"java.lang.String"</span>);</span><br></pre></td></tr></table></figure><p>第二种是使用 类.class直接获取类的Class对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class clz = String<span class="class">.<span class="keyword">class</span></span>;</span><br></pre></td></tr></table></figure><p>第三种是通过对象的getClass()方法获取Class对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="keyword">new</span> String(<span class="string">"Hello"</span>);</span><br><span class="line">Class clz = str.getClass()</span><br></pre></td></tr></table></figure><p>这里第二种方式需要在编译期前就确定Class类，这与反射机制的编译时不可知，运行时可知的特点相矛盾，而第三种已经创建出类的实体，再利用getClass方法获取类对象，对于反射来说已经意义不大了，所以我们再利用反射的时候通常使用第一种方式，通过全类名的方式获取class类，也符合编译器不可知的特点。</p><h4 id="获取对象实例"><a href="#获取对象实例" class="headerlink" title="获取对象实例"></a>获取对象实例</h4><p>通过反射创建类对象主要有两种方式：通过 Class 对象的 newInstance() 方法、通过 Constructor 对象的 newInstance() 方法。</p><p>第一种：通过 Class 对象的 newInstance() 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class clz = Class.forName(<span class="string">"java.lang.String"</span>);</span><br><span class="line">Object object = clz.newInstance();</span><br></pre></td></tr></table></figure><p>这种方式只适用于适用无参的构造函数，有参数的无法使用。</p><p>第二种：通过 Constructor 对象的 newInstance() 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class clz = Class.forName(<span class="string">"java.lang.String"</span>);</span><br><span class="line">Constructor cons = clz.getConstructor(String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">Object object = constructor.newInstance(<span class="string">"111"</span>);</span><br></pre></td></tr></table></figure><p>通过 Constructor 对象创建类对象可以选择特定构造方法，而通过 Class 对象则只能使用默认的无参数构造方法。</p><h4 id="获取类属性、方法"><a href="#获取类属性、方法" class="headerlink" title="获取类属性、方法"></a>获取类属性、方法</h4><p>属性的获得一共有两种getField()和getDeclaredField()</p><p>第一种getField()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; bookclz = Class.forName(<span class="string">"com.mjj.book.Book"</span>);</span><br><span class="line">Field author = bookclz.getField(<span class="string">"author"</span>);</span><br></pre></td></tr></table></figure><p>这种方式可以获取类内以public方式声明的属性以及继承的public的属性，对于private和默认声明的属性无法获取。</p><p>第二种getDeclaredField()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; bookclz = Class.forName(<span class="string">"com.mjj.book.Book"</span>);</span><br><span class="line">Field author = bookclz.getDeclaredField(<span class="string">"author"</span>);</span><br><span class="line">author.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">System.out.println(author);</span><br></pre></td></tr></table></figure><p>这种属性的获取方式可以获取到本类private属性的值，但是当我们在使用这样私有属性的时候，我们需要设置setAccessible(true);才可以正确使用。</p><p>方法获取的方式一样都有两种分别是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getDeclaredMethods 方法返回类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。</span></span><br><span class="line"><span class="keyword">public</span> Method[] getDeclaredMethods() <span class="keyword">throws</span> SecurityException</span><br><span class="line"><span class="comment">//getMethods 方法返回某个类的所有公用（public）方法，包括其继承类的公用方法。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Method <span class="title">getMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span></span></span><br><span class="line"><span class="function"><span class="comment">//getMethod 方法返回一个特定的方法，其中第一个参数为方法名称，后面的参数为方法的参数对应Class的对象</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Method[] <span class="title">getMethods</span><span class="params">()</span> <span class="keyword">throws</span> SecurityException</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><h3 id="三-参考文献"><a href="#三-参考文献" class="headerlink" title="三. 参考文献"></a>三. 参考文献</h3><p><a href="https://www.cnblogs.com/chanshuyi/p/head_first_of_reflection.html" target="_blank" rel="noopener">大白话说Java反射：入门、使用、原理</a><br><a href="https://www.sczyh30.com/posts/Java/java-reflection-1/" target="_blank" rel="noopener">深入解析Java反射（1） - 基础</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前在看springIOC的视频，里面设计到了很多反射的知识，我对反射一直停留在会用的阶段，借着这个机会好好学习一下Java的反射机制。&lt;/p&gt;
&lt;h3 id=&quot;一-反射基本概念&quot;&gt;&lt;a href=&quot;#一-反射基本概念&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
      <category term="java" scheme="https://qq19971017.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://qq19971017.github.io/tags/java/"/>
    
      <category term="reflect" scheme="https://qq19971017.github.io/tags/reflect/"/>
    
  </entry>
  
  <entry>
    <title>设计模式笔记(2)——工厂模式</title>
    <link href="https://qq19971017.github.io/2020/03/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-2-%E2%80%94%E2%80%94%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://qq19971017.github.io/2020/03/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-2-%E2%80%94%E2%80%94%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-03-29T02:09:00.000Z</published>
    <updated>2020-03-29T04:19:43.598Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-工厂模式概念"><a href="#一-工厂模式概念" class="headerlink" title="一. 工厂模式概念"></a>一. 工厂模式概念</h3><p>工厂模式是一种创建型模式，他的意义是专门创建一个类，我们在这个类中去完成我们需要创建的对象，这样既可以方便管理，又可以提高代码的可扩展性和灵活性。工厂模式包括简单工厂模式、工厂方法模式、抽象工厂模式，其中工厂方法模式就是我们常说的工厂模式。</p><p>我们在开发初期通常是直接通过new来创建一个对象的，这样的方式无疑是最简单的，但是这样创建对象有很多不足的地方，我们可以通过一个例子来看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginAction</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> UserDAO udao;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LoginAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">udao = <span class="keyword">new</span> JDBCUserDAO(); <span class="comment">//创建对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//其他代码</span></span><br><span class="line">udao.findUserById(); <span class="comment">//使用对象</span></span><br><span class="line"><span class="comment">//其他代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们在LoginAction类中创建了一哦个UserDao对象udao，并在execute()方法中调用了udao对象的findUserById()方法。这样LoginAction对udao既有创建职责又有使用职责，在同一个类中将两种职责耦合在了一起，当我们有修改需求的时候，比如我们要创建的是UserDAO的子类的时候，我们就需要修改LoginAction()中的代码，违背了开闭原则。</p><p>而工厂模式是通常解决这个问题好方法，我们可以创建一个UserDaoFactory由它来专门负责UserDao类及其子类对象的创建。当我们需要增加UserDao子类或者修改构造函数的时候，我们只需要维护UserDaoFactory而不影响其他相关类的使用。工厂模式一只强调的是当两个类A和B发生关联的时候，<strong>两者只会发生A使用B或者A创建B这两种关系，而不是同时发生。</strong> 并且工厂类帮我们封装了创建对象的细节，我们只要传递相应的参数，就可以帮助我们创建具体的对象。下面我们来介绍依次介绍3个工厂工行模式。</p><h3 id="二-简单工厂模式"><a href="#二-简单工厂模式" class="headerlink" title="二. 简单工厂模式"></a>二. 简单工厂模式</h3><p>简单工厂模式又叫做静态工厂模式，他并不属于23种经典模式之中，我们从一个例子中先体验简单工厂模式。</p><p>比如说我们需要生产pizza，一共有奶酪pizza和希腊pizza两种不同口味，我们创建一个工厂来负责生产这两种口味的pizza，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开动啦！吃："</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"准备一个奶酪披萨"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreekPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"准备一个希腊披萨"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        Pizza pizza =<span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span>(name.equals(<span class="string">"cheese"</span>))&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">            pizza.setName(<span class="string">"奶酪披萨"</span>);</span><br><span class="line">            pizza.prepare();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (name.equals(<span class="string">"greek"</span>))&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> GreekPizza();</span><br><span class="line">            pizza.setName(<span class="string">"希腊披萨"</span>);</span><br><span class="line">            pizza.prepare();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPizza</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pizza pizza = SimpleFactory.createPizza(<span class="string">"greek"</span>);</span><br><span class="line">        <span class="keyword">if</span>(pizza!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            pizza.eat();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"没有pizza"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当我们在订单中需要创建一个pizza的时候，我们会调用SimpleFactory中的方法createPizza来创建一个对象，SimpleFactory会根据参数来自主判断创建对象的类型。</p><p>这种方法使用起来比较简单，表面上解决了OrderPizza中耦合的问题，但是他只是将逻辑判断中的代码转移到了工厂中，这会使得工厂类不满足ocp原则，在需要修改代码的时候我们需要维护工厂类的逻辑判断。</p><h3 id="二-工厂方法模式"><a href="#二-工厂方法模式" class="headerlink" title="二. 工厂方法模式"></a>二. 工厂方法模式</h3><p>为了解决简单工厂模式的缺点，使得工厂类更加符合开闭原则。我们先使用一个抽象类去定义一个抽象的创建对象的方法，再由子类去继承这个抽象类，去专门创建具体的对象。</p><p>还是上一个例子，但是我们分别创建了奶酪pizza工厂和希腊pizza工厂去继承一个抽象的工厂类。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Pizza <span class="title">createPizza</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreekPizzaFactory</span> <span class="keyword">extends</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        GreekPizza greekPizza = <span class="keyword">new</span> GreekPizza();</span><br><span class="line">        greekPizza.setName(<span class="string">"希腊披萨"</span>);</span><br><span class="line">        <span class="keyword">return</span> greekPizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheesePizzaFactory</span> <span class="keyword">extends</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CheesePizza();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样写的好处就是，我们在增加或者删除不同口味pizza的时候，我们只需要创建不同的工厂去生产不同的pizza就可以了，而不用去修改factory中的代码。但是工厂方法模式也有一定的缺陷，就是当我们的产品增多时我们需要创建大量的具体工厂去生产不同的对象，导致系统类的个数成对增加，在一定程度上增加了系统的复杂性。</p><h3 id="二-抽象工厂模式"><a href="#二-抽象工厂模式" class="headerlink" title="二. 抽象工厂模式"></a>二. 抽象工厂模式</h3><p>在工厂方法模式中具体工厂负责生产具体的产品，每一个具体工厂对应一种具体产品，工厂方法也具有唯一性，一般情况下，一个具体工厂中只有一个工厂方法或者一组重载的工厂方法。但是有时候我们需要一个工厂可以提供多个产品对象，而不是单一的产品对象。</p><p>为了更清晰地理解工厂方法模式，需要先引入两个概念：</p><ul><li>产品等级结构 ：产品等级结构即产品的继承结构，如一个抽象类是电视机，其子类有海尔电视机、海信电视机、TCL电视机，则抽象电视机与具体品牌的电视机之间构成了一个产品等级结构，抽象电视机是父类，而具体品牌的电视机是其子类。</li><li>产品族 ：在抽象工厂模式中，产品族是指由同一个工厂生产的，位于不同产品等级结构中的一组产品，如海尔电器工厂生产的海尔电视机、海尔电冰箱，海尔电视机位于电视机产品等级结构中，海尔电冰箱位于电冰箱产品等级结构中。</li></ul><p>当系统所提供的工厂所需生产的具体产品并不是一个简单的对象，而是多个位于不同产品等级结构中属于不同类型的具体产品时需要使用抽象工厂模式。</p><p>抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。</p><p>抽象工厂模式与工厂方法模式最大的区别在于，工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构，一个工厂等级结构可以负责多个不同产品等级结构中的产品对象的创建 。当一个工厂等级结构可以创建出分属于不同产品等级结构的一个产品族中的所有对象时，抽象工厂模式比工厂方法模式更为简单、有效率。<br>这里我们看一个uml图理解一下</p><p><img src="/images/pasted-12.png" alt="upload successful"></p><p>当一个产品族中的多个对象被设计成一起工作时，它能够保证客户端始终只使用同一个产品族中的对象。这对一些需要根据当前环境来决定其行为的软件系统来说，是一种非常实用的设计模式。</p><p>增加新的具体工厂和产品族很方便，无须修改已有系统，符合“开闭原则”。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>视频：<br><a href="https://www.bilibili.com/video/av57936239" target="_blank" rel="noopener">尚硅谷Java设计模式，韩顺平图解java设计模式</a></p><p>文献：<br><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/abstract_factory.html" target="_blank" rel="noopener">3. 抽象工厂模式(Abstract Factory)</a></p><p><a href="https://segmentfault.com/a/1190000015050674" target="_blank" rel="noopener">深入理解工厂模式</a></p><p><a href="https://blog.csdn.net/lovelion/article/details/7523392" target="_blank" rel="noopener">创建对象与使用对象——谈谈工厂的作用</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-工厂模式概念&quot;&gt;&lt;a href=&quot;#一-工厂模式概念&quot; class=&quot;headerlink&quot; title=&quot;一. 工厂模式概念&quot;&gt;&lt;/a&gt;一. 工厂模式概念&lt;/h3&gt;&lt;p&gt;工厂模式是一种创建型模式，他的意义是专门创建一个类，我们在这个类中去完成我们需要创建的对
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://qq19971017.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://qq19971017.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式笔记(1)——单例模式</title>
    <link href="https://qq19971017.github.io/2020/03/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-1-%E2%80%94%E2%80%94%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://qq19971017.github.io/2020/03/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-1-%E2%80%94%E2%80%94%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-03-13T03:22:00.000Z</published>
    <updated>2020-03-29T02:34:20.284Z</updated>
    
    <content type="html"><![CDATA[<p>单例模式顾名思义就是保证某个类只有一个实例的设计方式，他负责自己创建实例，且保证实例的唯一性。这种实例的唯一性，可以避免某些高频率使用的对象被频繁的创建和销毁，提高了效率，节省了系统资源。单例模式向外界提供了创建该类实例的方法，并私有化构造方法，使得外界不能直接通过new构造实例。</p><p>单例模式使用的场景:需要频繁的进行创建和销毁的对象、创建对象时耗时过多或耗费资源过多(即:重量级<br>对象)，但又经常用到的对象、工具类对象、频繁访问数据库或文件的对象(比如数据源、session 工厂等)。</p><p>单例模式分为饿汉式和饱汉式，下面我们来详细介绍一下这两种设计模式。</p><h3 id="二-饿汉式"><a href="#二-饿汉式" class="headerlink" title="二. 饿汉式"></a>二. 饿汉式</h3><p>饿汉式是通过直接声明一个该类静态成员变量并在加载的时候就直接创建实例。我们可以用以下的方法进行构造，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjj.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance1 = Singleton.getInstance();</span><br><span class="line">        <span class="keyword">boolean</span> equals = instance.equals(instance1);</span><br><span class="line">        System.out.println(instance == instance1);</span><br><span class="line">        System.out.println(instance.hashCode());</span><br><span class="line">        System.out.println(instance1.hashCode());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//饿汉式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>饿汉式直接在内部声明对象实例，并提供了一个返回对象实例的方法，这样类在加载的时候就会自动创建一个该类的实例。这种方法实现起来简单易懂，并且自动支持线程安全(由jvm保证)。但是饿汉式的方法又一个缺点就是类在加载的时候就会被创建该实例，不管有没有被使用到，这就导致如果这个实例没有被用到的化，就会造成资源浪费。</p><h3 id="三-懒汉式"><a href="#三-懒汉式" class="headerlink" title="三. 懒汉式"></a>三. 懒汉式</h3><p>如果说饿汉式是一种空间换时间的方法，那么懒汉式就是就是一种时间换空间的方法。懒汉式提供一种懒加载的方式，只有在需要的时候才会创建该类的实例对象。他有很多种方法，下面我们来具体看一下。</p><h4 id="1-线程不安全"><a href="#1-线程不安全" class="headerlink" title="1. 线程不安全"></a>1. 线程不安全</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjj.singleton;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//懒汉式 只有在获取getInstance的时候才会去加载，并且只会加载一次</span></span><br><span class="line"><span class="comment">// 缺点 线程不安全</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton03 instance = Singleton03.getInstance();</span><br><span class="line">        Singleton03 instance1 = Singleton03.getInstance();</span><br><span class="line">        System.out.println(instance == instance1);</span><br><span class="line">        System.out.println(instance.hashCode());</span><br><span class="line">        System.out.println(instance1.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton03</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton03 singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton03</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton03 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton03();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种懒汉式将实例化对象封装在方法中，这样可以实现懒加载，也就是只有在用到getInstance()的时候才会加载实例，但是这种方法不是线程安全的，比如有两个线程A和B同时调用getInstance()方法，当A已经进入if(singleton == null)语句之后，还没有跳出if判断语句，B线程也进入到if判断语句，这就会导致创建多个兑现，违背单例模式对象唯一性。为了解决这一问题，我们有3种方法进行改进。</p><h4 id="2-双重检查"><a href="#2-双重检查" class="headerlink" title="2. 双重检查"></a>2. 双重检查</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjj.singleton;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton05 instance = Singleton05.getInstance();</span><br><span class="line">        Singleton05 instance1 = Singleton05.getInstance();</span><br><span class="line">        System.out.println(instance == instance1);</span><br><span class="line">        System.out.println(instance.hashCode());</span><br><span class="line">        System.out.println(instance1.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton05</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton05 singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton05</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 双重检测的方法 不仅线程安全 并且能够解决效率底的问题 建议使用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton05 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton05<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (singleton == <span class="keyword">null</span>)</span><br><span class="line">                    singleton = <span class="keyword">new</span> Singleton05();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这种方法通过两次判断类的实例对象是否被创建，其中第一次判断语句是为了防止线程每一次调用getIntance()都会使用synchronized进行同步，使代码执行效率变高，第二次判断语句是为了防止多线程情况下重复创建对象。这里使用volatile有两个目的，第一是使多线程之间共享资源可见，当一个线程在修改公共资源的时候其他线程能够立刻从内存中读取修改值，第二个好处就是使得指令有序，防止空指针引用。举个例子，当线程A运行到singleton = new Singleton05()时，其实会有3个指令操作</p><ul><li><ol><li>获取对象地址；</li></ol></li><li><ol start="2"><li>在对象地址上初始化一个Singleton05对象；</li></ol></li><li><ol start="3"><li>将singleton引用指向对象地址；<br>但是JVM会自动进行指令的优化，他可能会按照1-&gt;2-&gt;3的方式进行也可能会按照1-&gt;3-&gt;2的方式进行，当线程A按照第二种方式操作的时候，且已经将singlton引用指向了对象地址了，这时正好线程B运行到第一个判断语句就会判断成非空，然后返回singleton引用，此时引用并没有初始化对象，就是一个空指针，这样就会造成空指针异常。</li></ol></li></ul><h4 id="3-静态内部类"><a href="#3-静态内部类" class="headerlink" title="3. 静态内部类"></a>3. 静态内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjj.singleton;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton06 instance = Singleton06.getInstance();</span><br><span class="line">        Singleton06 instance1 = Singleton06.getInstance();</span><br><span class="line">        System.out.println(instance == instance1);</span><br><span class="line">        System.out.println(instance.hashCode());</span><br><span class="line">        System.out.println(instance1.hashCode());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton06</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton06</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonInstance</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton06 singleton = <span class="keyword">new</span> Singleton06();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用静态内部类 不仅线程安全 并且能够解决效率底的问题 建议使用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton06 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> SingletonInstance.singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>静态内部类的方法是创建一个内部类，并在内部类里面创建静态实例对象，内部类必须是私有的只能由外部类调用，这种方法相当于将多线程安全的问题交给JVM去处理，也是推荐使用的方法。</p><h4 id="4-枚举"><a href="#4-枚举" class="headerlink" title="4. 枚举"></a>4. 枚举</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mjj.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Sinleton07 instance1 = Sinleton07.Instance;</span><br><span class="line">        Sinleton07 instance2 = Sinleton07.Instance;</span><br><span class="line">        System.out.println(instance1 == instance2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Sinleton07&#123;</span><br><span class="line">    Instance;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methof</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"枚举方法 单例模式"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用枚举也是一种比较好的方法，这种方法使用简单，不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象，也是推荐的方法。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>视频：<br><a href="https://www.bilibili.com/video/av57936239" target="_blank" rel="noopener">尚硅谷Java设计模式，韩顺平图解java设计模式</a></p><p>文献：<br><a href="https://blog.csdn.net/FU250/article/details/79721197" target="_blank" rel="noopener">双重检查单例为什么要加volatile</a><br><a href="https://blog.csdn.net/qq_35098526/article/details/79893628" target="_blank" rel="noopener">单例模式懒汉式和饿汉式区别</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;单例模式顾名思义就是保证某个类只有一个实例的设计方式，他负责自己创建实例，且保证实例的唯一性。这种实例的唯一性，可以避免某些高频率使用的对象被频繁的创建和销毁，提高了效率，节省了系统资源。单例模式向外界提供了创建该类实例的方法，并私有化构造方法，使得外界不能直接通过new构
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://qq19971017.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://qq19971017.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
